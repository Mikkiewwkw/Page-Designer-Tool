{"ast":null,"code":"import _objectSpread from \"/Users/kaiweiwu/Documents/page_designer/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/kaiweiwu/Documents/page_designer/client/src/FundSelection.js\";\nimport React from \"react\"; // import Ordering from \"./Ordering\";\n\nimport uniqueId from \"lodash/uniqueId\";\nimport \"string\";\nimport SortableList from \"./SortableList\"; // import Sortable from 'sortablejs';\n\nlet base64 = require(\"base-64\");\n\nlet url = \"https://test-api.mobileaxept.com/micro_service/page-properties\";\nlet username = \"spencer.grimes@mobileaxept.com\";\nlet password = \"Temp654321\";\nlet headers = {\n  Authorization: \"Basic \" + base64.encode(username + \":\" + password),\n  \"Content-Type\": \"application/json\"\n};\n\nclass FundSelection extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.autoSaveOption = new_value => {\n      const client_code = this.props.clientCode;\n      const pageId = this.props.pageId;\n      const field = \"accnos\";\n      let body = {\n        client_code: client_code,\n        page_id: pageId,\n        field: field,\n        new_value: new_value\n      };\n      fetch(url, {\n        method: \"POST\",\n        headers: headers,\n        mode: \"cors\",\n        body: JSON.stringify(body)\n      }).then(response => {\n        if (response.ok) {\n          console.log(response);\n          return response.json();\n        } else {\n          throw new Error(\"Something went wrong ...\");\n        }\n      }).then(data => {\n        console.log(data);\n      }).catch(error => console.log(error));\n    };\n\n    this.onAddingOption = option => {\n      const isChecked = option.target.checked;\n      const value = option.target.value;\n      this.setState(prevState => ({\n        optionList: prevState.optionList.map(option => option.name === value ? _objectSpread({}, option, {\n          isChecked: isChecked\n        }) : option)\n      }));\n      if (isChecked) this.setState(prevState => ({\n        optionsChecked: [...prevState.optionsChecked, value]\n      }));else {\n        const newoptionsChecked = this.state.optionsChecked.filter(option => option !== value);\n        this.setState({\n          optionsChecked: newoptionsChecked\n        });\n      }\n    };\n\n    this.state = {\n      optionList: [],\n      //{ name: \"apples\", isChecked: false }, { name: \"Banana\", isChecked: false }, { name: \"orange\", isChecked: false }\n      optionsChecked: [],\n      // fundLibrary: {},\n      isLoading: false,\n      error: null\n    };\n  }\n\n  componentDidMount() {\n    const client_code = this.props.clientCode;\n    const pageId = this.props.pageId;\n    this.setState({\n      isLoading: true\n    });\n    let fundLibrary = null;\n    let fundListUrl = url + \"?client_code=\" + client_code + \"&field=availableFundAccnos\";\n    fetch(fundListUrl, {\n      method: \"GET\",\n      headers: headers,\n      mode: \"cors\"\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error(\"Can't fetch fund options ...\");\n      }\n    }).then(data => {\n      fundLibrary = data; // this.setState({ fundLibrary: data });\n\n      for (var element in data) {\n        console.log(element);\n        let option_object = {\n          name: data[element],\n          accno: element,\n          isChecked: false\n        };\n        let new_array = this.state.optionList.concat(option_object);\n        this.setState({\n          optionList: new_array\n        });\n      }\n\n      let fundSelectionUrl = url + \"?client_code=\" + client_code + \"&page_id=\" + pageId + \"&field=accnos\";\n      fetch(fundSelectionUrl, {\n        method: \"GET\",\n        headers: headers,\n        mode: \"cors\"\n      }).then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw new Error(\"Can't fetch selected funds ...\");\n        }\n      }).then(data => {\n        console.log(data.value);\n        let accnosArray = data.value.split(\",\");\n        const length = accnosArray.length;\n\n        for (let i = 0; i < length; i++) {\n          let accno = accnosArray[i];\n          let fundName = fundLibrary[accno];\n          this.setState(prevState => ({\n            optionList: prevState.optionList.map(option => option.name === fundName ? _objectSpread({}, option, {\n              isChecked: true\n            }) : option)\n          }));\n          this.setState(prevState => ({\n            optionsChecked: [...prevState.optionsChecked, fundName]\n          }));\n        }\n\n        this.setState({\n          isLoading: false\n        });\n      }).catch(error => this.setState({\n        error,\n        isLoading: false\n      }));\n    }).catch(error => this.setState({\n      error,\n      isLoading: false\n    }));\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    //Can also use JSON.stringfy to convert two arrays into a string and compare them directly\n    if (JSON.stringify(prevState.optionsChecked) !== JSON.stringify(this.state.optionsChecked)) {\n      autoSaveOptions(this.state.optionsChecked);\n    }\n  }\n\n  render() {\n    if (this.state.error) {\n      return React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, this.state.error.message);\n    }\n\n    if (this.state.isLoading) {\n      return React.createElement(\"div\", {\n        className: \"loader\",\n        id: \"loader-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"sr-only\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }, \"Loading...\"));\n    }\n\n    const option_list = this.state.optionList.map(option => // const id = \"inlineCheckbox\" + i.toString();\n    React.createElement(\"label\", {\n      key: uniqueId(),\n      className: \"checkbox-inline col-md-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"checkbox\",\n      name: option.name,\n      value: option.accno,\n      checked: option.isChecked,\n      onChange: this.onAddingOption,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }), option.name)); // var order_list = this.state.optionsChecked.map((option, i) =>\n    // <li key={uniqueId()} className=\"list-group-item\">\n    //   {option}\n    // </li>\n    // );\n\n    return React.createElement(\"div\", {\n      id: \"giving-options\",\n      className: \"giving-options\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, \"Giving Options\"), React.createElement(\"div\", {\n      className: \"apperance\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, \"Apperance\"), React.createElement(\"span\", {\n      className: \"help-block\",\n      id: \"helpBlock\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, \"Choose which funds are visible on the page\"), React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"multi-selection-fund row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, option_list)), React.createElement(\"div\", {\n      className: \"ordering\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, \"Ordering\"), React.createElement(\"span\", {\n      className: \"help-block\",\n      id: \"helpBlock\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, \"Choose which order the funds are displayed on the page\"), React.createElement(\"div\", {\n      id: \"simpleList\",\n      className: \"list-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, React.createElement(SortableList, {\n      items: this.state.optionsChecked,\n      onChange: options => {\n        this.setState({\n          optionsChecked: options\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default FundSelection;","map":{"version":3,"sources":["/Users/kaiweiwu/Documents/page_designer/client/src/FundSelection.js"],"names":["React","uniqueId","SortableList","base64","require","url","username","password","headers","Authorization","encode","FundSelection","Component","constructor","props","autoSaveOption","new_value","client_code","clientCode","pageId","field","body","page_id","fetch","method","mode","JSON","stringify","then","response","ok","console","log","json","Error","data","catch","error","onAddingOption","option","isChecked","target","checked","value","setState","prevState","optionList","map","name","optionsChecked","newoptionsChecked","state","filter","isLoading","componentDidMount","fundLibrary","fundListUrl","element","option_object","accno","new_array","concat","fundSelectionUrl","accnosArray","split","length","i","fundName","componentDidUpdate","prevProps","autoSaveOptions","render","message","option_list","options"],"mappings":"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","sourcesContent":["import React from \"react\";\n// import Ordering from \"./Ordering\";\nimport uniqueId from \"lodash/uniqueId\";\nimport \"string\";\nimport SortableList from \"./SortableList\";\n// import Sortable from 'sortablejs';\n\nlet base64 = require(\"base-64\");\nlet url = \"https://test-api.mobileaxept.com/micro_service/page-properties\";\nlet username = \"spencer.grimes@mobileaxept.com\";\nlet password = \"Temp654321\";\n\nlet headers = {\n    Authorization: \"Basic \" + base64.encode(username + \":\" + password),\n    \"Content-Type\": \"application/json\"\n};\n\nclass FundSelection extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            optionList: [], //{ name: \"apples\", isChecked: false }, { name: \"Banana\", isChecked: false }, { name: \"orange\", isChecked: false }\n            optionsChecked: [],\n            // fundLibrary: {},\n            isLoading: false,\n            error: null\n        };\n    }\n\n    componentDidMount() {\n        const client_code = this.props.clientCode;\n        const pageId = this.props.pageId;\n        this.setState({ isLoading: true });\n        let fundLibrary = null;\n        let fundListUrl =\n            url + \"?client_code=\" + client_code + \"&field=availableFundAccnos\";\n        fetch(fundListUrl, {\n            method: \"GET\",\n            headers: headers,\n            mode: \"cors\"\n        })\n            .then(response => {\n                if (response.ok) {\n                    return response.json();\n                } else {\n                    throw new Error(\"Can't fetch fund options ...\");\n                }\n            })\n            .then(data => {\n                fundLibrary = data;\n                // this.setState({ fundLibrary: data });\n                for (var element in data) {\n                    console.log(element);\n                    let option_object = {\n                        name: data[element],\n                        accno: element,\n                        isChecked: false\n                    };\n                    let new_array = this.state.optionList.concat(option_object);\n                    this.setState({\n                        optionList: new_array\n                    });\n                }\n\n                let fundSelectionUrl =\n                    url +\n                    \"?client_code=\" +\n                    client_code +\n                    \"&page_id=\" +\n                    pageId +\n                    \"&field=accnos\";\n                fetch(fundSelectionUrl, {\n                    method: \"GET\",\n                    headers: headers,\n                    mode: \"cors\"\n                })\n                    .then(response => {\n                        if (response.ok) {\n                            return response.json();\n                        } else {\n                            throw new Error(\"Can't fetch selected funds ...\");\n                        }\n                    })\n                    .then(data => {\n                        console.log(data.value);\n                        let accnosArray = data.value.split(\",\");\n                        const length = accnosArray.length;\n                        for (let i = 0; i < length; i++) {\n                            let accno = accnosArray[i];\n                            let fundName = fundLibrary[accno];\n                            this.setState(prevState => ({\n                                optionList: prevState.optionList.map(option =>\n                                    option.name === fundName\n                                        ? { ...option, isChecked: true }\n                                        : option\n                                )\n                            }));\n                            this.setState(prevState => ({\n                                optionsChecked: [\n                                    ...prevState.optionsChecked,\n                                    fundName\n                                ]\n                            }));\n                        }\n\n                        this.setState({ isLoading: false });\n                    })\n                    .catch(error => this.setState({ error, isLoading: false }));\n            })\n            .catch(error => this.setState({ error, isLoading: false }));\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        //Can also use JSON.stringfy to convert two arrays into a string and compare them directly\n        if (\n            JSON.stringify(prevState.optionsChecked) !==\n            JSON.stringify(this.state.optionsChecked)\n        ) {\n            autoSaveOptions(this.state.optionsChecked);\n        }\n    }\n\n    autoSaveOption = new_value => {\n        const client_code = this.props.clientCode;\n        const pageId = this.props.pageId;\n        const field = \"accnos\";\n        let body = {\n            client_code: client_code,\n            page_id: pageId,\n            field: field,\n            new_value: new_value\n        };\n\n        fetch(url, {\n            method: \"POST\",\n            headers: headers,\n            mode: \"cors\",\n            body: JSON.stringify(body)\n        })\n            .then(response => {\n                if (response.ok) {\n                    console.log(response);\n                    return response.json();\n                } else {\n                    throw new Error(\"Something went wrong ...\");\n                }\n            })\n            .then(data => {\n                console.log(data);\n            })\n            .catch(error => console.log(error));\n    };\n\n    onAddingOption = option => {\n        const isChecked = option.target.checked;\n        const value = option.target.value;\n\n        this.setState(prevState => ({\n            optionList: prevState.optionList.map(option =>\n                option.name === value\n                    ? { ...option, isChecked: isChecked }\n                    : option\n            )\n        }));\n\n        if (isChecked)\n            this.setState(prevState => ({\n                optionsChecked: [...prevState.optionsChecked, value]\n            }));\n        else {\n            const newoptionsChecked = this.state.optionsChecked.filter(\n                option => option !== value\n            );\n            this.setState({ optionsChecked: newoptionsChecked });\n        }\n    };\n\n    render() {\n        if (this.state.error) {\n            return <p>{this.state.error.message}</p>;\n        }\n        if (this.state.isLoading) {\n            return (\n                <div className=\"loader\" id=\"loader-1\">\n                    <span className=\"sr-only\">Loading...</span>\n                </div>\n            );\n        }\n        const option_list = this.state.optionList.map(option => (\n            // const id = \"inlineCheckbox\" + i.toString();\n            <label key={uniqueId()} className=\"checkbox-inline col-md-3\">\n                <input\n                    type=\"checkbox\"\n                    name={option.name}\n                    value={option.accno}\n                    checked={option.isChecked}\n                    onChange={this.onAddingOption}\n                />\n                {option.name}\n            </label>\n        ));\n        // var order_list = this.state.optionsChecked.map((option, i) =>\n        // <li key={uniqueId()} className=\"list-group-item\">\n        //   {option}\n        // </li>\n        // );\n\n        return (\n            <div id=\"giving-options\" className=\"giving-options\">\n                <h3>Giving Options</h3>\n                <div className=\"apperance\">\n                    <h4>Apperance</h4>\n                    <span className=\"help-block\" id=\"helpBlock\">\n                        Choose which funds are visible on the page\n                    </span>\n                    <form>\n                        <div className=\"multi-selection-fund row\">\n                            {option_list}\n                        </div>\n                    </form>\n                    <div className=\"ordering\">\n                        <h4>Ordering</h4>\n                        <span className=\"help-block\" id=\"helpBlock\">\n                            Choose which order the funds are displayed on the\n                            page\n                        </span>\n                        <div id=\"simpleList\" className=\"list-group\">\n                            <SortableList\n                                items={this.state.optionsChecked}\n                                onChange={options => {\n                                    this.setState({ optionsChecked: options });\n                                }}\n                            ></SortableList>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default FundSelection;\n"]},"metadata":{},"sourceType":"module"}