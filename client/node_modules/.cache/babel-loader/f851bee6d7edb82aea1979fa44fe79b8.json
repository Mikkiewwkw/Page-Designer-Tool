{"ast":null,"code":"import _objectSpread from \"/Users/kaiweiwu/Documents/page_designer/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/kaiweiwu/Documents/page_designer/client/src/FundSelection.js\";\nimport React from \"react\"; // import Ordering from \"./Ordering\";\n\nimport uniqueId from \"lodash/uniqueId\";\nimport \"string\";\nimport SortableList from \"./SortableList\"; // import Sortable from 'sortablejs';\n\nlet base64 = require(\"base-64\");\n\nlet url = \"https://test-api.mobileaxept.com/micro_service/page-properties\";\nlet username = \"spencer.grimes@mobileaxept.com\";\nlet password = \"Temp654321\";\nlet headers = {\n  Authorization: \"Basic \" + base64.encode(username + \":\" + password),\n  \"Content-Type\": \"application/json\"\n};\n\nclass FundSelection extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onAddingOption = option => {\n      const isChecked = option.target.checked;\n      const value = option.target.value;\n      this.setState(prevState => ({\n        optionList: prevState.optionList.map(option => option.name === value ? _objectSpread({}, option, {\n          isChecked: isChecked\n        }) : option)\n      }));\n      if (isChecked) this.setState(prevState => ({\n        optionsChecked: [...prevState.optionsChecked, value]\n      }));else {\n        const newoptionsChecked = this.state.optionsChecked.filter(option => option !== value);\n        this.setState({\n          optionsChecked: newoptionsChecked\n        });\n      }\n    };\n\n    this.state = {\n      optionList: [],\n      //{ name: \"apples\", isChecked: false }, { name: \"Banana\", isChecked: false }, { name: \"orange\", isChecked: false }\n      optionsChecked: [],\n      isLoading: false,\n      error: null\n    };\n  }\n\n  componentDidMount() {\n    const client_code = this.props.clientCode;\n    const pageId = this.props.pageId;\n    this.setState({\n      isLoading: true\n    });\n    let fundListUrl = url + \"?client_code=\" + client_code + \"&field=availableFundAccnos\";\n    fetch(fundListUrl, {\n      method: \"GET\",\n      headers: headers,\n      mode: \"cors\"\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error(\"Can't fetch fund options ...\");\n      }\n    }).then(data => {\n      for (var element in data) {\n        let option_object = {\n          name: data[element],\n          isChecked: false\n        };\n        let new_array = this.state.optionList.concat(option_object);\n        this.setState({\n          optionList: new_array\n        });\n      }\n\n      this.setState({\n        isLoading: false\n      });\n    });\n  }\n\n  render() {\n    if (this.state.error) {\n      return React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, this.state.error.message);\n    }\n\n    if (this.state.isLoading) {\n      return React.createElement(\"div\", {\n        className: \"loader\",\n        id: \"loader-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"sr-only\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, \"Loading...\"));\n    }\n\n    const option_list = this.state.optionList.map(option => // const id = \"inlineCheckbox\" + i.toString();\n    React.createElement(\"label\", {\n      key: uniqueId(),\n      className: \"checkbox-inline col-md-4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"checkbox\",\n      value: option.name,\n      checked: option.isChecked,\n      onChange: this.onAddingOption,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), option.name)); // var order_list = this.state.optionsChecked.map((option, i) =>\n    // <li key={uniqueId()} className=\"list-group-item\">\n    //   {option}\n    // </li>\n    // );\n\n    return React.createElement(\"div\", {\n      id: \"giving-options\",\n      className: \"giving-options\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"Giving Options\"), React.createElement(\"div\", {\n      className: \"apperance\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"Apperance\"), React.createElement(\"span\", {\n      className: \"help-block\",\n      id: \"helpBlock\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"Choose which funds are visible on the page\"), React.createElement(\"div\", {\n      className: \"multi-selection-fund\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, option_list), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"ordering\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, \"Ordering\"), React.createElement(\"span\", {\n      className: \"help-block\",\n      id: \"helpBlock\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, \"Choose which order the funds are displayed on the page\"), React.createElement(\"div\", {\n      id: \"simpleList\",\n      className: \"list-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(SortableList, {\n      items: this.state.optionsChecked,\n      onChange: options => {\n        this.setState({\n          optionsChecked: options\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default FundSelection;","map":{"version":3,"sources":["/Users/kaiweiwu/Documents/page_designer/client/src/FundSelection.js"],"names":["React","uniqueId","SortableList","base64","require","url","username","password","headers","Authorization","encode","FundSelection","Component","constructor","props","onAddingOption","option","isChecked","target","checked","value","setState","prevState","optionList","map","name","optionsChecked","newoptionsChecked","state","filter","isLoading","error","componentDidMount","client_code","clientCode","pageId","fundListUrl","fetch","method","mode","then","response","ok","json","Error","data","element","option_object","new_array","concat","render","message","option_list","options"],"mappings":"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","sourcesContent":["import React from \"react\";\n// import Ordering from \"./Ordering\";\nimport uniqueId from \"lodash/uniqueId\";\nimport \"string\";\nimport SortableList from \"./SortableList\";\n// import Sortable from 'sortablejs';\n\nlet base64 = require(\"base-64\");\nlet url = \"https://test-api.mobileaxept.com/micro_service/page-properties\";\nlet username = \"spencer.grimes@mobileaxept.com\";\nlet password = \"Temp654321\";\n\nlet headers = {\n    Authorization: \"Basic \" + base64.encode(username + \":\" + password),\n    \"Content-Type\": \"application/json\"\n};\n\nclass FundSelection extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            optionList: [], //{ name: \"apples\", isChecked: false }, { name: \"Banana\", isChecked: false }, { name: \"orange\", isChecked: false }\n            optionsChecked: [],\n            isLoading: false,\n            error: null\n        };\n    }\n\n    componentDidMount() {\n        const client_code = this.props.clientCode;\n        const pageId = this.props.pageId;\n        this.setState({ isLoading: true });\n        let fundListUrl =\n            url + \"?client_code=\" + client_code + \"&field=availableFundAccnos\";\n        fetch(fundListUrl, {\n            method: \"GET\",\n            headers: headers,\n            mode: \"cors\"\n        })\n            .then(response => {\n                if (response.ok) {\n                    return response.json();\n                } else {\n                    throw new Error(\"Can't fetch fund options ...\");\n                }\n            })\n            .then(data => {\n                for (var element in data) {\n                    let option_object = {\n                        name: data[element],\n                        isChecked: false\n                    };\n                    let new_array = this.state.optionList.concat(option_object);\n                    this.setState({\n                        optionList: new_array\n                    });\n                }\n                this.setState({ isLoading: false });\n            });\n    }\n\n    onAddingOption = option => {\n        const isChecked = option.target.checked;\n        const value = option.target.value;\n\n        this.setState(prevState => ({\n            optionList: prevState.optionList.map(option =>\n                option.name === value\n                    ? { ...option, isChecked: isChecked }\n                    : option\n            )\n        }));\n\n        if (isChecked)\n            this.setState(prevState => ({\n                optionsChecked: [...prevState.optionsChecked, value]\n            }));\n        else {\n            const newoptionsChecked = this.state.optionsChecked.filter(\n                option => option !== value\n            );\n            this.setState({ optionsChecked: newoptionsChecked });\n        }\n    };\n\n    render() {\n        if (this.state.error) {\n            return <p>{this.state.error.message}</p>;\n        }\n        if (this.state.isLoading) {\n            return (\n                <div className=\"loader\" id=\"loader-1\">\n                    <span className=\"sr-only\">Loading...</span>\n                </div>\n            );\n        }\n        const option_list = this.state.optionList.map(option => (\n            // const id = \"inlineCheckbox\" + i.toString();\n            <label key={uniqueId()} className=\"checkbox-inline col-md-4\">\n                <input\n                    type=\"checkbox\"\n                    value={option.name}\n                    checked={option.isChecked}\n                    onChange={this.onAddingOption}\n                />\n                {option.name}\n            </label>\n        ));\n        // var order_list = this.state.optionsChecked.map((option, i) =>\n        // <li key={uniqueId()} className=\"list-group-item\">\n        //   {option}\n        // </li>\n        // );\n\n        return (\n            <div id=\"giving-options\" className=\"giving-options\">\n                <h3>Giving Options</h3>\n                <div className=\"apperance\">\n                    <h4>Apperance</h4>\n                    <span className=\"help-block\" id=\"helpBlock\">\n                        Choose which funds are visible on the page\n                    </span>\n                    <div className=\"multi-selection-fund\">{option_list}</div>\n                    <br />\n                    <div className=\"ordering\">\n                        <h4>Ordering</h4>\n                        <span className=\"help-block\" id=\"helpBlock\">\n                            Choose which order the funds are displayed on the\n                            page\n                        </span>\n                        <div id=\"simpleList\" className=\"list-group\">\n                            <SortableList\n                                items={this.state.optionsChecked}\n                                onChange={options => {\n                                    this.setState({ optionsChecked: options });\n                                }}\n                            ></SortableList>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default FundSelection;\n"]},"metadata":{},"sourceType":"module"}