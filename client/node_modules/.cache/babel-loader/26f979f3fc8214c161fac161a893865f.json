{"ast":null,"code":"var _jsxFileName = \"/Users/kaiweiwu/Documents/page_designer/page-designer/src/test.js\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\"; // import sign_s3 from \"logoUpload\";\n\nvar aws = require(\"aws-sdk\");\n\nrequire(\"dotenv\").config(); // Configure dotenv to load in the .env file\n// Configure aws with your accessKeyId and your secretAccessKey\n\n\naws.config.update({\n  region: \"us-east-1\",\n  // Put your aws region here\n  accessKeyId: \"AKIAXKCRRSD3GJHJE65C\",\n  secretAccessKey: \"0lBmJkb6hl885URDMhm+llobNp8WeYLjftjmiy02\"\n});\nconst s3 = new aws.S3();\n\nasync function getPresignedUploadUrl(bucket, key) {\n  const url = await s3.getSignedUrl(\"putObject\", {\n    Bucket: bucket,\n    Key: key,\n    ContentType: \"image/*\",\n    Expires: 300\n  }).promise();\n  return url;\n}\n\nconst presignedUploadUrl = getPresignedUploadUrl(\"max-client-logos\", \"194/\"); //\n// const sign_s3 = (bucketName, req, res) => {\n//     const s3 = new aws.S3(); // Create a new instance of S3\n//     const fileName = req.body.fileName;\n//     const fileType = req.body.fileType;\n//     // Set up the payload of what we are sending to the S3 api\n//     const s3Params = {\n//         Bucket: bucketName,\n//         Key: fileName,\n//         Expires: 500,\n//         ContentType: fileType\n//     };\n//     // Make a request to the S3 API to get a signed URL which we can use to upload our file\n//     s3.getSignedUrl(\"putObject\", s3Params, (err, data) => {\n//         if (err) {\n//             console.log(err);\n//             res.json({ success: false, error: err });\n//         }\n//         // Data payload of what we are sending back, the url of the signedRequest and a URL where we can access the content after its saved.\n//         const returnData = {\n//             signedRequest: data,\n//             url: `https://${bucketName}.s3.amazonaws.com/${fileName}`\n//         };\n//         // Send it all back\n//         res.json({ success: true, data: { returnData } });\n//     });\n// };\n\nclass SketchExample extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = ev => {\n      this.setState({\n        success: false,\n        url: \"\"\n      });\n    };\n\n    this.handleUpload = ev => {\n      let file = this.uploadInput.files[0]; // Split the filename to get the name and type\n\n      let fileParts = this.uploadInput.files[0].name.split(\".\");\n      let fileName = fileParts[0];\n      let fileType = fileParts[1];\n      console.log(\"Preparing the upload\");\n      axios.post(presignedUploadUrl, {\n        fileName: fileName,\n        fileType: fileType\n      }).then(response => {\n        var returnData = response.data.data.returnData;\n        var signedRequest = returnData.signedRequest;\n        var url = returnData.url;\n        this.setState({\n          url: url\n        });\n        console.log(\"Recieved a signed request \" + signedRequest); // Put the fileType in the headers for the upload\n\n        var options = {\n          headers: {\n            \"Content-Type\": fileType\n          }\n        };\n        axios.put(signedRequest, file, options).then(result => {\n          console.log(\"Response from s3\");\n          this.setState({\n            success: true\n          });\n        }).catch(error => {\n          alert(\"ERROR \" + JSON.stringify(error));\n        });\n      }).catch(error => {\n        alert(JSON.stringify(error));\n      });\n    };\n\n    this.state = {\n      success: false,\n      url: \"\"\n    };\n  }\n\n  render() {\n    const SuccessMessage = () => React.createElement(\"div\", {\n      style: {\n        padding: 50\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      style: {\n        color: \"green\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \"SUCCESSFUL UPLOAD\"), React.createElement(\"a\", {\n      href: this.state.url,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"Access the file here\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }));\n\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(\"center\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"UPLOAD A FILE\"), this.state.success ? React.createElement(SuccessMessage, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }) : null, React.createElement(\"input\", {\n      onChange: this.handleChange,\n      ref: ref => {\n        this.uploadInput = ref;\n      },\n      type: \"file\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.handleUpload,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"UPLOAD\")));\n  }\n\n}\n\nexport default SketchExample;","map":{"version":3,"sources":["/Users/kaiweiwu/Documents/page_designer/page-designer/src/test.js"],"names":["React","Component","axios","aws","require","config","update","region","accessKeyId","secretAccessKey","s3","S3","getPresignedUploadUrl","bucket","key","url","getSignedUrl","Bucket","Key","ContentType","Expires","promise","presignedUploadUrl","SketchExample","constructor","props","handleChange","ev","setState","success","handleUpload","file","uploadInput","files","fileParts","name","split","fileName","fileType","console","log","post","then","response","returnData","data","signedRequest","options","headers","put","result","catch","error","alert","JSON","stringify","state","render","SuccessMessage","padding","color","ref"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\n// import sign_s3 from \"logoUpload\";\nvar aws = require(\"aws-sdk\");\nrequire(\"dotenv\").config(); // Configure dotenv to load in the .env file\n// Configure aws with your accessKeyId and your secretAccessKey\naws.config.update({\n    region: \"us-east-1\", // Put your aws region here\n    accessKeyId: \"AKIAXKCRRSD3GJHJE65C\",\n    secretAccessKey: \"0lBmJkb6hl885URDMhm+llobNp8WeYLjftjmiy02\"\n});\n\nconst s3 = new aws.S3();\n\nasync function getPresignedUploadUrl(bucket, key) {\n    const url = await s3\n        .getSignedUrl(\"putObject\", {\n            Bucket: bucket,\n            Key: key,\n            ContentType: \"image/*\",\n            Expires: 300\n        })\n        .promise();\n    return url;\n}\n\nconst presignedUploadUrl = getPresignedUploadUrl(\"max-client-logos\", \"194/\");\n//\n// const sign_s3 = (bucketName, req, res) => {\n//     const s3 = new aws.S3(); // Create a new instance of S3\n//     const fileName = req.body.fileName;\n//     const fileType = req.body.fileType;\n//     // Set up the payload of what we are sending to the S3 api\n//     const s3Params = {\n//         Bucket: bucketName,\n//         Key: fileName,\n//         Expires: 500,\n//         ContentType: fileType\n//     };\n//     // Make a request to the S3 API to get a signed URL which we can use to upload our file\n//     s3.getSignedUrl(\"putObject\", s3Params, (err, data) => {\n//         if (err) {\n//             console.log(err);\n//             res.json({ success: false, error: err });\n//         }\n//         // Data payload of what we are sending back, the url of the signedRequest and a URL where we can access the content after its saved.\n//         const returnData = {\n//             signedRequest: data,\n//             url: `https://${bucketName}.s3.amazonaws.com/${fileName}`\n//         };\n//         // Send it all back\n//         res.json({ success: true, data: { returnData } });\n//     });\n// };\n\nclass SketchExample extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            success: false,\n            url: \"\"\n        };\n    }\n\n    handleChange = ev => {\n        this.setState({ success: false, url: \"\" });\n    };\n    // Perform the upload\n    handleUpload = ev => {\n        let file = this.uploadInput.files[0];\n        // Split the filename to get the name and type\n        let fileParts = this.uploadInput.files[0].name.split(\".\");\n        let fileName = fileParts[0];\n        let fileType = fileParts[1];\n        console.log(\"Preparing the upload\");\n        axios\n            .post(presignedUploadUrl, {\n                fileName: fileName,\n                fileType: fileType\n            })\n            .then(response => {\n                var returnData = response.data.data.returnData;\n                var signedRequest = returnData.signedRequest;\n                var url = returnData.url;\n                this.setState({ url: url });\n                console.log(\"Recieved a signed request \" + signedRequest);\n\n                // Put the fileType in the headers for the upload\n                var options = {\n                    headers: {\n                        \"Content-Type\": fileType\n                    }\n                };\n                axios\n                    .put(signedRequest, file, options)\n                    .then(result => {\n                        console.log(\"Response from s3\");\n                        this.setState({ success: true });\n                    })\n                    .catch(error => {\n                        alert(\"ERROR \" + JSON.stringify(error));\n                    });\n            })\n            .catch(error => {\n                alert(JSON.stringify(error));\n            });\n    };\n\n    render() {\n        const SuccessMessage = () => (\n            <div style={{ padding: 50 }}>\n                <h3 style={{ color: \"green\" }}>SUCCESSFUL UPLOAD</h3>\n                <a href={this.state.url}>Access the file here</a>\n                <br />\n            </div>\n        );\n        return (\n            <div className=\"App\">\n                <center>\n                    <h1>UPLOAD A FILE</h1>\n                    {this.state.success ? <SuccessMessage /> : null}\n                    <input\n                        onChange={this.handleChange}\n                        ref={ref => {\n                            this.uploadInput = ref;\n                        }}\n                        type=\"file\"\n                    />\n                    <br />\n                    <button onClick={this.handleUpload}>UPLOAD</button>\n                </center>\n            </div>\n        );\n    }\n}\n\nexport default SketchExample;\n"]},"metadata":{},"sourceType":"module"}