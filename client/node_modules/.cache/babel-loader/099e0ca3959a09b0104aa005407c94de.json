{"ast":null,"code":"var _jsxFileName = \"/Users/kaiweiwu/Documents/page_designer/page-designer/src/test.js\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\"; // import sign_s3 from \"logoUpload\";\n\nvar aws = require(\"aws-sdk\");\n\nrequire(\"dotenv\").config(); // Configure dotenv to load in the .env file\n// Configure aws with your accessKeyId and your secretAccessKey\n\n\naws.config.update({\n  region: \"us-east-1\",\n  // Put your aws region here\n  accessKeyId: \"AKIAXKCRRSD3GJHJE65C\",\n  secretAccessKey: \"0lBmJkb6hl885URDMhm+llobNp8WeYLjftjmiy02\"\n});\n\nsign_s3 = (bucketName, req, res) => {\n  const s3 = new aws.S3(); // Create a new instance of S3\n\n  const fileName = req.body.fileName;\n  const fileType = req.body.fileType; // Set up the payload of what we are sending to the S3 api\n\n  const s3Params = {\n    Bucket: bucketName,\n    Key: fileName,\n    Expires: 500,\n    ContentType: fileType\n  }; // Make a request to the S3 API to get a signed URL which we can use to upload our file\n\n  s3.getSignedUrl(\"putObject\", s3Params, (err, data) => {\n    if (err) {\n      console.log(err);\n      res.json({\n        success: false,\n        error: err\n      });\n    } // Data payload of what we are sending back, the url of the signedRequest and a URL where we can access the content after its saved.\n\n\n    const returnData = {\n      signedRequest: data,\n      url: \"https://\".concat(bucketName, \".s3.amazonaws.com/\").concat(fileName)\n    }; // Send it all back\n\n    res.json({\n      success: true,\n      data: {\n        returnData\n      }\n    });\n  });\n};\n\nclass SketchExample extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = ev => {\n      this.setState({\n        success: false,\n        url: \"\"\n      });\n    };\n\n    this.handleUpload = ev => {\n      let file = this.uploadInput.files[0]; // Split the filename to get the name and type\n\n      let fileParts = this.uploadInput.files[0].name.split(\".\");\n      let fileName = fileParts[0];\n      let fileType = fileParts[1];\n      console.log(\"Preparing the upload\");\n      axios.post(\"http://localhost:3001/sign_s3\", {\n        fileName: fileName,\n        fileType: fileType\n      }).then(response => {\n        var returnData = response.data.data.returnData;\n        var signedRequest = returnData.signedRequest;\n        var url = returnData.url;\n        this.setState({\n          url: url\n        });\n        console.log(\"Recieved a signed request \" + signedRequest); // Put the fileType in the headers for the upload\n\n        var options = {\n          headers: {\n            \"Content-Type\": fileType\n          }\n        };\n        axios.put(signedRequest, file, options).then(result => {\n          console.log(\"Response from s3\");\n          this.setState({\n            success: true\n          });\n        }).catch(error => {\n          alert(\"ERROR \" + JSON.stringify(error));\n        });\n      }).catch(error => {\n        alert(JSON.stringify(error));\n      });\n    };\n\n    this.state = {\n      success: false,\n      url: \"\"\n    };\n  }\n\n  render() {\n    const SuccessMessage = () => React.createElement(\"div\", {\n      style: {\n        padding: 50\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      style: {\n        color: \"green\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, \"SUCCESSFUL UPLOAD\"), React.createElement(\"a\", {\n      href: this.state.url,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, \"Access the file here\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }));\n\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"center\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"UPLOAD A FILE\"), this.state.success ? React.createElement(SuccessMessage, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }) : null, React.createElement(\"input\", {\n      onChange: this.handleChange,\n      ref: ref => {\n        this.uploadInput = ref;\n      },\n      type: \"file\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.handleUpload,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, \"UPLOAD\")));\n  }\n\n}\n\nexport default SketchExample;","map":{"version":3,"sources":["/Users/kaiweiwu/Documents/page_designer/page-designer/src/test.js"],"names":["React","Component","axios","aws","require","config","update","region","accessKeyId","secretAccessKey","sign_s3","bucketName","req","res","s3","S3","fileName","body","fileType","s3Params","Bucket","Key","Expires","ContentType","getSignedUrl","err","data","console","log","json","success","error","returnData","signedRequest","url","SketchExample","constructor","props","handleChange","ev","setState","handleUpload","file","uploadInput","files","fileParts","name","split","post","then","response","options","headers","put","result","catch","alert","JSON","stringify","state","render","SuccessMessage","padding","color","ref"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\n// import sign_s3 from \"logoUpload\";\nvar aws = require(\"aws-sdk\");\nrequire(\"dotenv\").config(); // Configure dotenv to load in the .env file\n// Configure aws with your accessKeyId and your secretAccessKey\naws.config.update({\n    region: \"us-east-1\", // Put your aws region here\n    accessKeyId: \"AKIAXKCRRSD3GJHJE65C\",\n    secretAccessKey: \"0lBmJkb6hl885URDMhm+llobNp8WeYLjftjmiy02\"\n});\n\nsign_s3 = (bucketName, req, res) => {\n    const s3 = new aws.S3(); // Create a new instance of S3\n    const fileName = req.body.fileName;\n    const fileType = req.body.fileType;\n    // Set up the payload of what we are sending to the S3 api\n    const s3Params = {\n        Bucket: bucketName,\n        Key: fileName,\n        Expires: 500,\n        ContentType: fileType\n    };\n    // Make a request to the S3 API to get a signed URL which we can use to upload our file\n    s3.getSignedUrl(\"putObject\", s3Params, (err, data) => {\n        if (err) {\n            console.log(err);\n            res.json({ success: false, error: err });\n        }\n        // Data payload of what we are sending back, the url of the signedRequest and a URL where we can access the content after its saved.\n        const returnData = {\n            signedRequest: data,\n            url: `https://${bucketName}.s3.amazonaws.com/${fileName}`\n        };\n        // Send it all back\n        res.json({ success: true, data: { returnData } });\n    });\n};\n\nclass SketchExample extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            success: false,\n            url: \"\"\n        };\n    }\n\n    handleChange = ev => {\n        this.setState({ success: false, url: \"\" });\n    };\n    // Perform the upload\n    handleUpload = ev => {\n        let file = this.uploadInput.files[0];\n        // Split the filename to get the name and type\n        let fileParts = this.uploadInput.files[0].name.split(\".\");\n        let fileName = fileParts[0];\n        let fileType = fileParts[1];\n        console.log(\"Preparing the upload\");\n        axios\n            .post(\"http://localhost:3001/sign_s3\", {\n                fileName: fileName,\n                fileType: fileType\n            })\n            .then(response => {\n                var returnData = response.data.data.returnData;\n                var signedRequest = returnData.signedRequest;\n                var url = returnData.url;\n                this.setState({ url: url });\n                console.log(\"Recieved a signed request \" + signedRequest);\n\n                // Put the fileType in the headers for the upload\n                var options = {\n                    headers: {\n                        \"Content-Type\": fileType\n                    }\n                };\n                axios\n                    .put(signedRequest, file, options)\n                    .then(result => {\n                        console.log(\"Response from s3\");\n                        this.setState({ success: true });\n                    })\n                    .catch(error => {\n                        alert(\"ERROR \" + JSON.stringify(error));\n                    });\n            })\n            .catch(error => {\n                alert(JSON.stringify(error));\n            });\n    };\n\n    render() {\n        const SuccessMessage = () => (\n            <div style={{ padding: 50 }}>\n                <h3 style={{ color: \"green\" }}>SUCCESSFUL UPLOAD</h3>\n                <a href={this.state.url}>Access the file here</a>\n                <br />\n            </div>\n        );\n        return (\n            <div className=\"App\">\n                <center>\n                    <h1>UPLOAD A FILE</h1>\n                    {this.state.success ? <SuccessMessage /> : null}\n                    <input\n                        onChange={this.handleChange}\n                        ref={ref => {\n                            this.uploadInput = ref;\n                        }}\n                        type=\"file\"\n                    />\n                    <br />\n                    <button onClick={this.handleUpload}>UPLOAD</button>\n                </center>\n            </div>\n        );\n    }\n}\n\nexport default SketchExample;\n"]},"metadata":{},"sourceType":"module"}