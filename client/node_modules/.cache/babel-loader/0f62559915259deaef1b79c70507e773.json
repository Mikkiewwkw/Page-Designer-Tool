{"ast":null,"code":"import _slicedToArray from \"/Users/kaiweiwu/Documents/page_designer/page-designer/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/kaiweiwu/Documents/page_designer/page-designer/src/Dropzone.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport { Container, ListGroup, Button } from \"react-bootstrap\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\n\nconst getColor = props => {\n  if (props.isDragAccept) {\n    return \"#00e676\";\n  }\n\n  if (props.isDragReject) {\n    return \"#ff1744\";\n  }\n\n  if (props.isDragActive) {\n    return \"#2196f3\";\n  }\n\n  return \"#eeeeee\";\n};\n\nconst thumbsContainer = {\n  display: \"flex\",\n  flexDirection: \"row\",\n  flexWrap: \"wrap\",\n  marginTop: 16\n};\nconst thumb = {\n  display: \"inline-flex\",\n  borderRadius: 2,\n  border: \"1px solid #eaeaea\",\n  marginBottom: 8,\n  marginRight: 8,\n  width: 100,\n  height: 100,\n  padding: 4,\n  boxSizing: \"border-box\"\n};\nconst thumbInner = {\n  display: \"flex\",\n  minWidth: 0,\n  overflow: \"hidden\"\n};\nconst img = {\n  display: \"block\",\n  width: \"auto\",\n  height: \"100%\"\n};\n\nfunction Dropzone(props) {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        files = _useState2[0],\n        setFiles = _useState2[1];\n\n  const _useDropzone = useDropzone({\n    multiple: true,\n    accept: \"image/*\",\n    onDrop: acceptedFiles => {\n      setFiles(acceptedFiles.map(file => Object.assign(file, {\n        preview: URL.createObjectURL(file)\n      })));\n    }\n  }),\n        getRootProps = _useDropzone.getRootProps,\n        getInputProps = _useDropzone.getInputProps;\n\n  console.log(files); //with inner or not? inner will shrink the size\n\n  const thumbs = files.map(file => React.createElement(\"div\", {\n    style: thumb,\n    key: file.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: thumbInner,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: file.preview,\n    style: img,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  })))); // const thumbs = files.map(file => (\n  //     <div style={thumb} key={file.name}>\n  //         <img src={file.preview} style={img} />\n  //     </div>\n  // ));\n\n  const removefile = file => () => {\n    const newFiles = [...files];\n    newFiles.splice(newFiles.indexOf(file), 1);\n    setFiles(newFiles);\n  };\n\n  const removeAll = () => {\n    setFiles([]);\n  };\n\n  useEffect(() => () => {\n    // Make sure to revoke the data uris to avoid memory leaks\n    files.forEach(file => URL.revokeObjectURL(file.preview));\n  }, [files]);\n  const acceptedFilesItems = React.createElement(Container, {\n    style: {\n      marginTop: \"2rem\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, React.createElement(ListGroup, {\n    style: {\n      marginBottom: \"1rem\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, React.createElement(TransitionGroup, {\n    className: \"todo-list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, files.map(file => React.createElement(CSSTransition, {\n    key: id,\n    timeout: 500,\n    classNames: \"item\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, React.createElement(ListGroup.Item, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, React.createElement(Button, {\n    className: \"remove-btn\",\n    variant: \"danger\",\n    size: \"sm\",\n    onClick: removefile,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, \"\\xD7\"), text))))));\n  return React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, React.createElement(\"div\", Object.assign({}, getRootProps({\n    className: \"dropzone\"\n  }), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }), React.createElement(\"input\", Object.assign({}, getInputProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  })), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, \"Drag and drop some files here, or click to select files\"), React.createElement(\"em\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, \"(Only *.jpeg and *.png images will be accepted)\")), React.createElement(\"aside\", {\n    style: thumbsContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, thumbs), React.createElement(\"aside\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, acceptedFilesItems));\n}\n\nexport default Dropzone;","map":{"version":3,"sources":["/Users/kaiweiwu/Documents/page_designer/page-designer/src/Dropzone.js"],"names":["React","useEffect","useState","useDropzone","Container","ListGroup","Button","CSSTransition","TransitionGroup","getColor","props","isDragAccept","isDragReject","isDragActive","thumbsContainer","display","flexDirection","flexWrap","marginTop","thumb","borderRadius","border","marginBottom","marginRight","width","height","padding","boxSizing","thumbInner","minWidth","overflow","img","Dropzone","files","setFiles","multiple","accept","onDrop","acceptedFiles","map","file","Object","assign","preview","URL","createObjectURL","getRootProps","getInputProps","console","log","thumbs","name","removefile","newFiles","splice","indexOf","removeAll","forEach","revokeObjectURL","acceptedFilesItems","id","text","className"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport { Container, ListGroup, Button } from \"react-bootstrap\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\n\nconst getColor = props => {\n    if (props.isDragAccept) {\n        return \"#00e676\";\n    }\n    if (props.isDragReject) {\n        return \"#ff1744\";\n    }\n    if (props.isDragActive) {\n        return \"#2196f3\";\n    }\n    return \"#eeeeee\";\n};\n\nconst thumbsContainer = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexWrap: \"wrap\",\n    marginTop: 16\n};\n\nconst thumb = {\n    display: \"inline-flex\",\n    borderRadius: 2,\n    border: \"1px solid #eaeaea\",\n    marginBottom: 8,\n    marginRight: 8,\n    width: 100,\n    height: 100,\n    padding: 4,\n    boxSizing: \"border-box\"\n};\n\nconst thumbInner = {\n    display: \"flex\",\n    minWidth: 0,\n    overflow: \"hidden\"\n};\n\nconst img = {\n    display: \"block\",\n    width: \"auto\",\n    height: \"100%\"\n};\n\nfunction Dropzone(props) {\n    const [files, setFiles] = useState([]);\n    const { getRootProps, getInputProps } = useDropzone({\n        multiple: true,\n        accept: \"image/*\",\n        onDrop: acceptedFiles => {\n            setFiles(\n                acceptedFiles.map(file =>\n                    Object.assign(file, {\n                        preview: URL.createObjectURL(file)\n                    })\n                )\n            );\n        }\n    });\n\n    console.log(files);\n\n    //with inner or not? inner will shrink the size\n    const thumbs = files.map(file => (\n        <div style={thumb} key={file.name}>\n            <div style={thumbInner}>\n                <img src={file.preview} style={img} />\n            </div>\n        </div>\n    ));\n\n    // const thumbs = files.map(file => (\n    //     <div style={thumb} key={file.name}>\n    //         <img src={file.preview} style={img} />\n    //     </div>\n    // ));\n\n    const removefile = file => () => {\n        const newFiles = [...files];\n        newFiles.splice(newFiles.indexOf(file), 1);\n        setFiles(newFiles);\n    };\n\n    const removeAll = () => {\n        setFiles([]);\n    };\n\n    useEffect(\n        () => () => {\n            // Make sure to revoke the data uris to avoid memory leaks\n            files.forEach(file => URL.revokeObjectURL(file.preview));\n        },\n        [files]\n    );\n\n    const acceptedFilesItems = (\n        <Container style={{ marginTop: \"2rem\" }}>\n            <ListGroup style={{ marginBottom: \"1rem\" }}>\n                <TransitionGroup className=\"todo-list\">\n                    {files.map(file => (\n                        <CSSTransition key={id} timeout={500} classNames=\"item\">\n                            <ListGroup.Item>\n                                <Button\n                                    className=\"remove-btn\"\n                                    variant=\"danger\"\n                                    size=\"sm\"\n                                    onClick={removefile}\n                                >\n                                    &times;\n                                </Button>\n                                {text}\n                            </ListGroup.Item>\n                        </CSSTransition>\n                    ))}\n                </TransitionGroup>\n            </ListGroup>\n        </Container>\n    );\n\n    return (\n        <div className=\"container\">\n            <div {...getRootProps({ className: \"dropzone\" })}>\n                <input {...getInputProps()} />\n                <p>Drag and drop some files here, or click to select files</p>\n                <em>(Only *.jpeg and *.png images will be accepted)</em>\n            </div>\n            <aside style={thumbsContainer}>{thumbs}</aside>\n            <aside>{acceptedFilesItems}</aside>\n        </div>\n    );\n}\n\nexport default Dropzone;\n"]},"metadata":{},"sourceType":"module"}