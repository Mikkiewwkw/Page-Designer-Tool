{"ast":null,"code":"import _objectSpread from \"/Users/kaiweiwu/Documents/page_designer/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/kaiweiwu/Documents/page_designer/client/src/frequency.js\";\nimport React from \"react\";\nimport uniqueId from \"lodash/uniqueId\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nlet base64 = require(\"base-64\");\n\nlet url = \"https://test-api.mobileaxept.com/micro_service/page-properties\";\nlet username = \"spencer.grimes@mobileaxept.com\";\nlet password = \"Temp654321\";\nlet headers = {\n  Authorization: \"Basic \" + base64.encode(username + \":\" + password),\n  \"Content-Type\": \"application/json\"\n};\nconst propertyArray = [\"suppressRecurring\", \"onlyRecurring\"];\nconst length = propertyArray.length; // const propertyLibrary = {\n//     suppressRecurring: \"One-time\",\n//     onlyRecurring: \"Recurring\"\n// };\n\nclass Checkbox extends React.Component {\n  render() {\n    const _this$props = this.props,\n          isChecked = _this$props.isChecked,\n          onCheckboxChange = _this$props.onCheckboxChange,\n          name = _this$props.name,\n          value = _this$props.value;\n    return React.createElement(\"label\", {\n      key: uniqueId(),\n      className: \"checkbox-inline\",\n      htmlFor: \"frequency-selection\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      value: value,\n      checked: isChecked,\n      onChange: onCheckboxChange,\n      onBlur: onCheckboxChange,\n      type: \"checkbox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }), name);\n  }\n\n}\n\nclass FrequencyOptions extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.autoSaveFrequencyOptions = new_value => {\n      const client_code = this.props.clientCode;\n      const pageId = this.props.pageId;\n      const field = \"frequencyChoices\";\n      let body = {\n        client_code: client_code,\n        page_id: pageId,\n        field: field,\n        new_value: new_value\n      };\n      fetch(url, {\n        method: \"POST\",\n        headers: headers,\n        mode: \"cors\",\n        body: JSON.stringify(body)\n      }).then(response => {\n        if (response.ok) {\n          console.log(response);\n          return response.json();\n        } else {\n          throw new Error(\"Something went wrong ...\");\n        }\n      }).then(data => {\n        console.log(data);\n      }).catch(error => console.log(error));\n    };\n\n    this.state = {\n      frequencyOptions: [{\n        name: \"Weekly\",\n        isChecked: false,\n        value: \"-WEEKLY\"\n      }, {\n        name: \"Every Other Week\",\n        isChecked: false,\n        value: \"-EVERY-OTHER-WEEK-\"\n      }, {\n        name: \"Twice Monthly\",\n        isChecked: false,\n        value: \"-TWICE-MONTHLY\"\n      }, {\n        name: \"Monthly\",\n        isChecked: false,\n        value: \"-MONTHLY\"\n      }],\n      frequencyOptionsChecked: [],\n      totalFrequencyOptionsChecked: 0,\n      errorMessage: \"Must have at least \".concat(props.minCount, \" checkbox selected.\")\n    };\n    this.addFrequencyOptions = this.addFrequencyOptions.bind(this);\n  }\n\n  componentDidMount() {\n    const client_code = this.props.clientCode;\n    const pageId = this.props.pageId;\n    const field = \"frequencyChoices\";\n    let newUrl = url + \"?client_code=\" + client_code + \"&page_id=\" + pageId + \"&field=\" + field;\n    fetch(newUrl, {\n      method: \"GET\",\n      headers: headers,\n      mode: \"cors\"\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error(\"Something went wrong ...\");\n      }\n    }).then(data => {\n      const dataArray = data.value.split(\",\");\n      console.log(dataArray);\n      const length = dataArray.length;\n      this.setState({\n        totalFrequencyOptionsChecked: length\n      });\n\n      for (let i = 0; i < length; i++) {\n        this.setState(prevState => ({\n          frequencyOptions: prevState.frequencyOptions.map(frequency => frequency.value === dataArray[i] ? _objectSpread({}, frequency, {\n            isChecked: true\n          }) : frequency)\n        }));\n        const new_array = this.state.frequencyOptionsChecked.push(dataArray[i]);\n        console.log(new_array);\n        this.setState({\n          frequencyOptionsChecked: new_array\n        });\n      }\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (JSON.stringify(prevState.frequencyOptionsChecked) !== JSON.stringify(this.state.frequencyOptionsChecked)) {\n      console.log(\"update frequency options\");\n      console.log(this.state.frequencyOptionsChecked);\n      let new_string = this.state.frequencyOptionsChecked.join();\n      this.autoSaveFrequencyOptions(new_string);\n    }\n  }\n\n  addFrequencyOptions(event) {\n    const minCount = this.props.minCount;\n    let totalFrequencyOptionsChecked = this.state.totalFrequencyOptionsChecked;\n    const isChecked = event.target.checked;\n    const value = event.target.value;\n\n    if (event.type === \"change\") {\n      if (event.currentTarget.checked) {\n        totalFrequencyOptionsChecked += 1;\n        this.setState({\n          totalFrequencyOptionsChecked: totalFrequencyOptionsChecked\n        });\n      } else {\n        totalFrequencyOptionsChecked -= 1;\n        this.setState({\n          totalFrequencyOptionsChecked: totalFrequencyOptionsChecked\n        }, () => this.state.totalFrequencyOptionsChecked < 1 ? toast.error(this.state.errorMessage, {\n          autoClose: 5000\n        }) : null);\n      }\n    }\n\n    this.setState(prevState => ({\n      frequencyOptions: prevState.frequencyOptions.map(option => option.value === value ? _objectSpread({}, option, {\n        isChecked: isChecked\n      }) : option)\n    }));\n\n    if (isChecked) {\n      this.setState(prevState => ({\n        frequencyOptionsChecked: [...prevState.frequencyOptionsChecked, value]\n      }));\n    } else {\n      const newfrequencyOptionsChecked = this.state.frequencyOptionsChecked.filter(option => option !== value);\n      this.setState({\n        frequencyOptionsChecked: newfrequencyOptionsChecked\n      }, console.log(this.state.frequencyOptionsChecked));\n    }\n  }\n\n  render() {\n    const errorMessage = this.state.errorMessage;\n    return React.createElement(\"div\", {\n      className: \"frequency-option\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, \"Frequency Options\"), React.createElement(\"div\", {\n      className: \"multi-selection-frequency-option\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: this.state.totalFrequencyOptionsChecked < this.props.minCount ? \"errorMessageTransition\" : \"hiddenDiv\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, errorMessage), this.state.frequencyOptions.map(option => React.createElement(Checkbox, {\n      key: uniqueId(),\n      value: option.value,\n      isChecked: option.isChecked,\n      onCheckboxChange: this.addFrequencyOptions,\n      name: option.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nclass Frequency extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.autosaveFrequency = (field, new_value) => {\n      const client_code = this.props.clientCode;\n      const pageId = this.props.pageId;\n      let body = {\n        client_code: client_code,\n        page_id: pageId,\n        field: field,\n        new_value: new_value\n      };\n      fetch(url, {\n        method: \"POST\",\n        headers: headers,\n        mode: \"cors\",\n        body: JSON.stringify(body)\n      }).then(response => {\n        if (response.ok) {\n          console.log(response);\n          return response.json();\n        } else {\n          throw new Error(\"Something went wrong ...\");\n        }\n      }).then(data => {\n        console.log(data);\n      }).catch(error => console.log(error));\n    };\n\n    this.addFrequency = event => {\n      const isChecked = event.target.checked;\n      const value = event.target.value;\n      this.setState(prevState => ({\n        frequencyList: prevState.frequencyList.map(option => option.name === value ? _objectSpread({}, option, {\n          isChecked: isChecked\n        }) : option)\n      }));\n\n      if (isChecked) {\n        if (value === \"Recurring\") {\n          this.setState({\n            visible: true\n          });\n\n          if (this.state.frequencyList[0].isChecked) {\n            this.setState({\n              suppressRecurring: false\n            });\n            this.setState({\n              onlyRecurring: false\n            });\n          } else {\n            this.setState({\n              onlyRecurring: true\n            });\n          }\n        } else if (value === \"One-time\") {\n          if (this.state.frequencyList[1].isChecked) {\n            this.setState({\n              suppressRecurring: false\n            });\n            this.setState({\n              onlyRecurring: false\n            });\n          } else {\n            this.setState({\n              suppressRecurring: true\n            });\n          }\n        }\n      } else {\n        if (value === \"Recurring\") {\n          if (this.state.frequencyList[0].isChecked) {\n            this.setState({\n              visible: false\n            });\n            this.setState({\n              suppressRecurring: true\n            });\n          } else {\n            this.setState({\n              onlyRecurring: true\n            }); //Need a better way to solve this\n\n            console.log(\"Have to select one of the options\");\n            toast.error(\"Must select at least one frequency option\", {\n              autoClose: 5000\n            });\n          }\n        } else if (value === \"One-time\") {\n          if (this.state.frequencyList[1].isChecked) {\n            this.setState({\n              onlyRecurring: true\n            });\n          } else {\n            this.setState({\n              suppressRecurring: true\n            }); //Need a better way to solve this\n\n            console.log(\"Have to select one of the options\");\n            toast.error(\"Must select at least one frequency option\", {\n              autoClose: 5000\n            });\n          }\n        }\n      }\n    };\n\n    this.state = {\n      frequencyList: [{\n        name: \"One-time\",\n        isChecked: false\n      }, {\n        name: \"Recurring\",\n        isChecked: false\n      }],\n      // totalNumberCheckedFrequency: 0,\n      suppressRecurring: false,\n      onlyRecurring: false,\n      // frequencyChecked: [],\n      visible: false,\n      isLoading: false,\n      error: null\n    };\n  }\n\n  componentDidMount() {\n    const client_code = this.props.clientCode;\n    const pageId = this.props.pageId;\n    this.setState({\n      isLoading: true\n    });\n\n    for (let i = 0; i < length; i++) {\n      const field = propertyArray[i];\n      let newUrl = url + \"?client_code=\" + client_code + \"&page_id=\" + pageId + \"&field=\" + field; // console.log(newUrl);\n\n      fetch(newUrl, {\n        method: \"GET\",\n        headers: headers,\n        mode: \"cors\"\n      }).then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw new Error(\"Something went wrong ...\");\n        }\n      }).then(data => {\n        console.log(data);\n\n        if (data.prop_key.includes(\"suppressRecurring\")) {\n          this.setState({\n            suppressRecurring: data.value\n          });\n        } else if (data.prop_key.includes(\"onlyRecurring\")) {\n          this.setState({\n            onlyRecurring: data.value\n          });\n        }\n      }).catch(error => this.setState({\n        error,\n        isLoading: false\n      }));\n    } //not sync, need to figure this out\n\n\n    if (this.state.suppressRecurring === false) {\n      if (this.state.onlyRecurring === false) {\n        this.setState(prevState => ({\n          frequencyList: prevState.frequencyList.map(option => _objectSpread({}, option, {\n            isChecked: true\n          }))\n        }));\n        this.setState({\n          visible: true\n        });\n        this.setState({\n          totalNumberCheckedFrequency: 2\n        });\n      } else {\n        //onlyRecurring === true\n        this.setState(prevState => ({\n          frequencyList: prevState.frequencyList.map(option => option.name === \"Recurring\" ? _objectSpread({}, option, {\n            isChecked: true\n          }) : option)\n        }));\n        this.setState({\n          visible: true\n        });\n        this.setState({\n          totalNumberCheckedFrequency: 1\n        });\n      }\n    } else {\n      //suppressRecurring === true\n      this.setState(prevState => ({\n        frequencyList: prevState.frequencyList.map(option => option.name === \"One-time\" ? _objectSpread({}, option, {\n          isChecked: true\n        }) : option)\n      }));\n      this.setState({\n        totalNumberCheckedFrequency: 1\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    let new_value = null;\n    let field = null;\n\n    if (prevState.suppressRecurring !== this.state.suppressRecurring) {\n      new_value = this.state.suppressRecurring;\n      field = \"suppressRecurring\";\n      this.autosaveFrequency(field, new_value);\n    } else if (prevState.onlyRecurring !== this.state.onlyRecurring) {\n      new_value = this.state.onlyRecurring;\n      field = \"onlyRecurring\";\n      this.autosaveFrequency(field, new_value);\n    }\n  }\n\n  render() {\n    const frequency_list = this.state.frequencyList.map(frequency => React.createElement(\"label\", {\n      key: uniqueId(),\n      className: \"checkbox-inline\",\n      htmlFor: \"frequency-selection\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 445\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"checkbox\",\n      value: frequency.name,\n      checked: frequency.isChecked,\n      onChange: this.addFrequency,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450\n      },\n      __self: this\n    }), frequency.name)); // let renderOptions = recurring.isChecked ? <Frequency_options minCount={1} /> : null;\n\n    return React.createElement(\"div\", {\n      className: \"frequency\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 462\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463\n      },\n      __self: this\n    }, \"Frequency\"), React.createElement(\"span\", {\n      className: \"help-block\",\n      id: \"helpBlock\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464\n      },\n      __self: this\n    }, \"Choose which frequency option are available to the user\"), React.createElement(\"form\", {\n      \"data-toggle\": \"validator\",\n      role: \"form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 467\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"multi-selection-frequency\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 468\n      },\n      __self: this\n    }, frequency_list, React.createElement(ToastContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 470\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: this.state.visible ? \"frequencyTransition\" : \"hiddenDiv\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 471\n      },\n      __self: this\n    }, React.createElement(FrequencyOptions, {\n      minCount: 1,\n      clientCode: \"194\",\n      pageId: \"null\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 478\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default Frequency;","map":{"version":3,"sources":["/Users/kaiweiwu/Documents/page_designer/client/src/frequency.js"],"names":["React","uniqueId","ToastContainer","toast","base64","require","url","username","password","headers","Authorization","encode","propertyArray","length","Checkbox","Component","render","props","isChecked","onCheckboxChange","name","value","FrequencyOptions","constructor","autoSaveFrequencyOptions","new_value","client_code","clientCode","pageId","field","body","page_id","fetch","method","mode","JSON","stringify","then","response","ok","console","log","json","Error","data","catch","error","state","frequencyOptions","frequencyOptionsChecked","totalFrequencyOptionsChecked","errorMessage","minCount","addFrequencyOptions","bind","componentDidMount","newUrl","dataArray","split","setState","i","prevState","map","frequency","new_array","push","componentDidUpdate","prevProps","new_string","join","event","target","checked","type","currentTarget","autoClose","option","newfrequencyOptionsChecked","filter","Frequency","autosaveFrequency","addFrequency","frequencyList","visible","suppressRecurring","onlyRecurring","isLoading","prop_key","includes","totalNumberCheckedFrequency","frequency_list"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport uniqueId from \"lodash/uniqueId\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nlet base64 = require(\"base-64\");\nlet url = \"https://test-api.mobileaxept.com/micro_service/page-properties\";\nlet username = \"spencer.grimes@mobileaxept.com\";\nlet password = \"Temp654321\";\n\nlet headers = {\n    Authorization: \"Basic \" + base64.encode(username + \":\" + password),\n    \"Content-Type\": \"application/json\"\n};\n\nconst propertyArray = [\"suppressRecurring\", \"onlyRecurring\"];\nconst length = propertyArray.length;\n// const propertyLibrary = {\n//     suppressRecurring: \"One-time\",\n//     onlyRecurring: \"Recurring\"\n// };\n\nclass Checkbox extends React.Component {\n    render() {\n        const { isChecked, onCheckboxChange, name, value } = this.props;\n\n        return (\n            <label\n                key={uniqueId()}\n                className=\"checkbox-inline\"\n                htmlFor=\"frequency-selection\"\n            >\n                <input\n                    value={value}\n                    checked={isChecked}\n                    onChange={onCheckboxChange}\n                    onBlur={onCheckboxChange}\n                    type=\"checkbox\"\n                />\n                {name}\n            </label>\n        );\n    }\n}\n\nclass FrequencyOptions extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            frequencyOptions: [\n                { name: \"Weekly\", isChecked: false, value: \"-WEEKLY\" },\n                {\n                    name: \"Every Other Week\",\n                    isChecked: false,\n                    value: \"-EVERY-OTHER-WEEK-\"\n                },\n                {\n                    name: \"Twice Monthly\",\n                    isChecked: false,\n                    value: \"-TWICE-MONTHLY\"\n                },\n                { name: \"Monthly\", isChecked: false, value: \"-MONTHLY\" }\n            ],\n            frequencyOptionsChecked: [],\n            totalFrequencyOptionsChecked: 0,\n            errorMessage: `Must have at least ${props.minCount} checkbox selected.`\n        };\n        this.addFrequencyOptions = this.addFrequencyOptions.bind(this);\n    }\n\n    componentDidMount() {\n        const client_code = this.props.clientCode;\n        const pageId = this.props.pageId;\n        const field = \"frequencyChoices\";\n        let newUrl =\n            url +\n            \"?client_code=\" +\n            client_code +\n            \"&page_id=\" +\n            pageId +\n            \"&field=\" +\n            field;\n        fetch(newUrl, {\n            method: \"GET\",\n            headers: headers,\n            mode: \"cors\"\n        })\n            .then(response => {\n                if (response.ok) {\n                    return response.json();\n                } else {\n                    throw new Error(\"Something went wrong ...\");\n                }\n            })\n            .then(data => {\n                const dataArray = data.value.split(\",\");\n                console.log(dataArray);\n                const length = dataArray.length;\n\n                this.setState({ totalFrequencyOptionsChecked: length });\n                for (let i = 0; i < length; i++) {\n                    this.setState(prevState => ({\n                        frequencyOptions: prevState.frequencyOptions.map(\n                            frequency =>\n                                frequency.value === dataArray[i]\n                                    ? { ...frequency, isChecked: true }\n                                    : frequency\n                        )\n                    }));\n                    const new_array = this.state.frequencyOptionsChecked.push(\n                        dataArray[i]\n                    );\n                    console.log(new_array);\n                    this.setState({ frequencyOptionsChecked: new_array });\n                }\n            });\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (\n            JSON.stringify(prevState.frequencyOptionsChecked) !==\n            JSON.stringify(this.state.frequencyOptionsChecked)\n        ) {\n            console.log(\"update frequency options\");\n            console.log(this.state.frequencyOptionsChecked);\n            let new_string = this.state.frequencyOptionsChecked.join();\n            this.autoSaveFrequencyOptions(new_string);\n        }\n    }\n\n    autoSaveFrequencyOptions = new_value => {\n        const client_code = this.props.clientCode;\n        const pageId = this.props.pageId;\n        const field = \"frequencyChoices\";\n        let body = {\n            client_code: client_code,\n            page_id: pageId,\n            field: field,\n            new_value: new_value\n        };\n\n        fetch(url, {\n            method: \"POST\",\n            headers: headers,\n            mode: \"cors\",\n            body: JSON.stringify(body)\n        })\n            .then(response => {\n                if (response.ok) {\n                    console.log(response);\n                    return response.json();\n                } else {\n                    throw new Error(\"Something went wrong ...\");\n                }\n            })\n            .then(data => {\n                console.log(data);\n            })\n            .catch(error => console.log(error));\n    };\n\n    addFrequencyOptions(event) {\n        const { minCount } = this.props;\n        let { totalFrequencyOptionsChecked } = this.state;\n        const isChecked = event.target.checked;\n        const value = event.target.value;\n\n        if (event.type === \"change\") {\n            if (event.currentTarget.checked) {\n                totalFrequencyOptionsChecked += 1;\n                this.setState({\n                    totalFrequencyOptionsChecked: totalFrequencyOptionsChecked\n                });\n            } else {\n                totalFrequencyOptionsChecked -= 1;\n                this.setState(\n                    {\n                        totalFrequencyOptionsChecked: totalFrequencyOptionsChecked\n                    },\n                    () =>\n                        this.state.totalFrequencyOptionsChecked < 1\n                            ? toast.error(this.state.errorMessage, {\n                                autoClose: 5000\n                            })\n                            : null\n                );\n            }\n        }\n\n        this.setState(prevState => ({\n            frequencyOptions: prevState.frequencyOptions.map(option =>\n                option.value === value\n                    ? { ...option, isChecked: isChecked }\n                    : option\n            )\n        }));\n\n        if (isChecked) {\n            this.setState(prevState => ({\n                frequencyOptionsChecked: [\n                    ...prevState.frequencyOptionsChecked,\n                    value\n                ]\n            }));\n        } else {\n            const newfrequencyOptionsChecked = this.state.frequencyOptionsChecked.filter(\n                option => option !== value\n            );\n            this.setState(\n                {\n                    frequencyOptionsChecked: newfrequencyOptionsChecked\n                },\n                console.log(this.state.frequencyOptionsChecked)\n            );\n        }\n    }\n\n    render() {\n        const { errorMessage } = this.state;\n\n        return (\n            <div className=\"frequency-option\">\n                <h4>Frequency Options</h4>\n                <div className=\"multi-selection-frequency-option\">\n                    <div>\n                        <p\n                            className={\n                                this.state.totalFrequencyOptionsChecked <\n                                this.props.minCount\n                                    ? \"errorMessageTransition\"\n                                    : \"hiddenDiv\"\n                            }\n                        >\n                            {errorMessage}\n                        </p>\n                        {this.state.frequencyOptions.map(option => (\n                            <Checkbox\n                                key={uniqueId()}\n                                value={option.value}\n                                isChecked={option.isChecked}\n                                onCheckboxChange={this.addFrequencyOptions}\n                                name={option.name}\n                            />\n                        ))}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass Frequency extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            frequencyList: [\n                { name: \"One-time\", isChecked: false },\n                { name: \"Recurring\", isChecked: false }\n            ],\n            // totalNumberCheckedFrequency: 0,\n            suppressRecurring: false,\n            onlyRecurring: false,\n            // frequencyChecked: [],\n            visible: false,\n            isLoading: false,\n            error: null\n        };\n    }\n\n    componentDidMount() {\n        const client_code = this.props.clientCode;\n        const pageId = this.props.pageId;\n        this.setState({ isLoading: true });\n        for (let i = 0; i < length; i++) {\n            const field = propertyArray[i];\n            let newUrl =\n                url +\n                \"?client_code=\" +\n                client_code +\n                \"&page_id=\" +\n                pageId +\n                \"&field=\" +\n                field;\n            // console.log(newUrl);\n            fetch(newUrl, {\n                method: \"GET\",\n                headers: headers,\n                mode: \"cors\"\n            })\n                .then(response => {\n                    if (response.ok) {\n                        return response.json();\n                    } else {\n                        throw new Error(\"Something went wrong ...\");\n                    }\n                })\n                .then(data => {\n                    console.log(data);\n                    if (data.prop_key.includes(\"suppressRecurring\")) {\n                        this.setState({ suppressRecurring: data.value });\n                    } else if (data.prop_key.includes(\"onlyRecurring\")) {\n                        this.setState({ onlyRecurring: data.value });\n                    }\n                })\n\n                .catch(error => this.setState({ error, isLoading: false }));\n        }\n        //not sync, need to figure this out\n        if (this.state.suppressRecurring === false) {\n            if (this.state.onlyRecurring === false) {\n                this.setState(prevState => ({\n                    frequencyList: prevState.frequencyList.map(option => ({\n                        ...option,\n                        isChecked: true\n                    }))\n                }));\n                this.setState({ visible: true });\n                this.setState({ totalNumberCheckedFrequency: 2 });\n            } else {\n                //onlyRecurring === true\n                this.setState(prevState => ({\n                    frequencyList: prevState.frequencyList.map(option =>\n                        option.name === \"Recurring\"\n                            ? { ...option, isChecked: true }\n                            : option\n                    )\n                }));\n                this.setState({ visible: true });\n                this.setState({ totalNumberCheckedFrequency: 1 });\n            }\n        } else {\n            //suppressRecurring === true\n            this.setState(prevState => ({\n                frequencyList: prevState.frequencyList.map(option =>\n                    option.name === \"One-time\"\n                        ? { ...option, isChecked: true }\n                        : option\n                )\n            }));\n            this.setState({ totalNumberCheckedFrequency: 1 });\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        let new_value = null;\n        let field = null;\n        if (prevState.suppressRecurring !== this.state.suppressRecurring) {\n            new_value = this.state.suppressRecurring;\n            field = \"suppressRecurring\";\n            this.autosaveFrequency(field, new_value);\n        } else if (prevState.onlyRecurring !== this.state.onlyRecurring) {\n            new_value = this.state.onlyRecurring;\n            field = \"onlyRecurring\";\n            this.autosaveFrequency(field, new_value);\n        }\n    }\n\n    autosaveFrequency = (field, new_value) => {\n        const client_code = this.props.clientCode;\n        const pageId = this.props.pageId;\n        let body = {\n            client_code: client_code,\n            page_id: pageId,\n            field: field,\n            new_value: new_value\n        };\n\n        fetch(url, {\n            method: \"POST\",\n            headers: headers,\n            mode: \"cors\",\n            body: JSON.stringify(body)\n        })\n            .then(response => {\n                if (response.ok) {\n                    console.log(response);\n                    return response.json();\n                } else {\n                    throw new Error(\"Something went wrong ...\");\n                }\n            })\n            .then(data => {\n                console.log(data);\n            })\n            .catch(error => console.log(error));\n    };\n\n    addFrequency = event => {\n        const isChecked = event.target.checked;\n        const value = event.target.value;\n\n        this.setState(prevState => ({\n            frequencyList: prevState.frequencyList.map(option =>\n                option.name === value\n                    ? { ...option, isChecked: isChecked }\n                    : option\n            )\n        }));\n\n        if (isChecked) {\n            if (value === \"Recurring\") {\n                this.setState({ visible: true });\n                if (this.state.frequencyList[0].isChecked) {\n                    this.setState({ suppressRecurring: false });\n                    this.setState({ onlyRecurring: false });\n                } else {\n                    this.setState({ onlyRecurring: true });\n                }\n            } else if (value === \"One-time\") {\n                if (this.state.frequencyList[1].isChecked) {\n                    this.setState({ suppressRecurring: false });\n                    this.setState({ onlyRecurring: false });\n                } else {\n                    this.setState({ suppressRecurring: true });\n                }\n            }\n        } else {\n            if (value === \"Recurring\") {\n                if (this.state.frequencyList[0].isChecked) {\n                    this.setState({ visible: false });\n                    this.setState({ suppressRecurring: true });\n                } else {\n                    this.setState({ onlyRecurring: true }); //Need a better way to solve this\n                    console.log(\"Have to select one of the options\");\n                    toast.error(\"Must select at least one frequency option\", {\n                        autoClose: 5000\n                    });\n                }\n            } else if (value === \"One-time\") {\n                if (this.state.frequencyList[1].isChecked) {\n                    this.setState({ onlyRecurring: true });\n                } else {\n                    this.setState({ suppressRecurring: true }); //Need a better way to solve this\n                    console.log(\"Have to select one of the options\");\n                    toast.error(\"Must select at least one frequency option\", {\n                        autoClose: 5000\n                    });\n                }\n            }\n        }\n    };\n\n    render() {\n        const frequency_list = this.state.frequencyList.map(frequency => (\n            <label\n                key={uniqueId()}\n                className=\"checkbox-inline\"\n                htmlFor=\"frequency-selection\"\n            >\n                <input\n                    type=\"checkbox\"\n                    value={frequency.name}\n                    checked={frequency.isChecked}\n                    onChange={this.addFrequency}\n                />\n                {frequency.name}\n            </label>\n        ));\n\n        // let renderOptions = recurring.isChecked ? <Frequency_options minCount={1} /> : null;\n        return (\n            <div className=\"frequency\">\n                <h4>Frequency</h4>\n                <span className=\"help-block\" id=\"helpBlock\">\n                    Choose which frequency option are available to the user\n                </span>\n                <form data-toggle=\"validator\" role=\"form\">\n                    <div className=\"multi-selection-frequency\">\n                        {frequency_list}\n                        <ToastContainer />\n                        <div\n                            className={\n                                this.state.visible\n                                    ? \"frequencyTransition\"\n                                    : \"hiddenDiv\"\n                            }\n                        >\n                            <FrequencyOptions\n                                minCount={1}\n                                clientCode=\"194\"\n                                pageId=\"null\"\n                            />\n                        </div>\n                    </div>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default Frequency;\n"]},"metadata":{},"sourceType":"module"}