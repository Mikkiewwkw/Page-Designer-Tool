{"ast":null,"code":"var AWS = require(\"aws-sdk\");\n\nAWS.config.update({\n  accessKeyId: \"AKIAXKCRRSD3GJHJE65C\",\n  secretAccessKey: \"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\",\n  region: \"us-west-2\"\n});\nconst s3 = new AWS.S3();\n\nfunction listAllKeys(params, outPutArray) {\n  s3.listObjectsV2(params, function (err, data) {\n    if (err) {\n      console.log(err, err.stack);\n    } else {\n      var contents = data.Contents;\n      contents.forEach(function (content) {\n        outPutArray.push(content.Key);\n        console.log(\"1\", outPutArray);\n      });\n\n      if (data.IsTruncated) {\n        params.ContinuationToken = data.NextContinuationToken;\n        console.log(\"There are more keys coming up\");\n        listAllKeys(params, outPutArray);\n      }\n    }\n  });\n  console.log(\"2\", outPutArray);\n}\n\nconst downloadS3 = (prefix, bucketName) => {\n  var allKeys = [];\n  const params = {\n    Bucket: bucketName,\n    Delimiter: \"/\",\n    Prefix: prefix,\n    StartAfter: prefix\n  };\n  listAllKeys(params, allKeys);\n  console.log(\"yes\", allKeys[\"0\"]);\n  var nodesArray = [].slice.call(allKeys);\n  console.log(\"elements\", nodesArray); // allKeys.map(key => s3.getSignedUrl('getObject', {Bucket:bucketName,Key:key}, function (err, url) {\n  //     return url;\n  // });\n  //\n  //   var urlparams = {Bucket: 'max-client-logos', Key: allKeys[0]};\n  //   s3.getSignedUrl('getObject', urlparams, function (err, url) {\n  //     console.log('Your generated pre-signed URL is', url);\n  // });\n  //   let url = allKeys.map((key) => (s3.getSignedUrl('getObject', {\n  //     Bucket:\"max-client-logos\",\n  //     Key:key\n  //   }, function(err, url) {\n  //     console.log('Your generated pre-signed URL is', url);\n  //   }\n  // )));\n\n  return nodesArray;\n};\n\nexport default downloadS3;","map":{"version":3,"sources":["/Users/kaiweiwu/Documents/page_designer/page-designer/src/s3config.js"],"names":["AWS","require","config","update","accessKeyId","secretAccessKey","region","s3","S3","listAllKeys","params","outPutArray","listObjectsV2","err","data","console","log","stack","contents","Contents","forEach","content","push","Key","IsTruncated","ContinuationToken","NextContinuationToken","downloadS3","prefix","bucketName","allKeys","Bucket","Delimiter","Prefix","StartAfter","nodesArray","slice","call"],"mappings":"AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,SAAD,CAAjB;;AACAD,GAAG,CAACE,MAAJ,CAAWC,MAAX,CAAkB;AACdC,EAAAA,WAAW,EAAE,sBADC;AAEdC,EAAAA,eAAe,EAAE,0CAFH;AAGdC,EAAAA,MAAM,EAAE;AAHM,CAAlB;AAKA,MAAMC,EAAE,GAAG,IAAIP,GAAG,CAACQ,EAAR,EAAX;;AAEA,SAASC,WAAT,CAAqBC,MAArB,EAA6BC,WAA7B,EAA0C;AACtCJ,EAAAA,EAAE,CAACK,aAAH,CAAiBF,MAAjB,EAAyB,UAASG,GAAT,EAAcC,IAAd,EAAoB;AACzC,QAAID,GAAJ,EAAS;AACLE,MAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ,EAAiBA,GAAG,CAACI,KAArB;AACH,KAFD,MAEO;AACH,UAAIC,QAAQ,GAAGJ,IAAI,CAACK,QAApB;AACAD,MAAAA,QAAQ,CAACE,OAAT,CAAiB,UAASC,OAAT,EAAkB;AAC/BV,QAAAA,WAAW,CAACW,IAAZ,CAAiBD,OAAO,CAACE,GAAzB;AACAR,QAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ,EAAiBL,WAAjB;AACH,OAHD;;AAKA,UAAIG,IAAI,CAACU,WAAT,EAAsB;AAClBd,QAAAA,MAAM,CAACe,iBAAP,GAA2BX,IAAI,CAACY,qBAAhC;AACAX,QAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AACAP,QAAAA,WAAW,CAACC,MAAD,EAASC,WAAT,CAAX;AACH;AACJ;AACJ,GAhBD;AAiBAI,EAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ,EAAiBL,WAAjB;AACH;;AAED,MAAMgB,UAAU,GAAG,CAACC,MAAD,EAASC,UAAT,KAAwB;AACvC,MAAIC,OAAO,GAAG,EAAd;AACA,QAAMpB,MAAM,GAAG;AACXqB,IAAAA,MAAM,EAAEF,UADG;AAEXG,IAAAA,SAAS,EAAE,GAFA;AAGXC,IAAAA,MAAM,EAAEL,MAHG;AAIXM,IAAAA,UAAU,EAAEN;AAJD,GAAf;AAOAnB,EAAAA,WAAW,CAACC,MAAD,EAASoB,OAAT,CAAX;AACAf,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBc,OAAO,CAAC,GAAD,CAA1B;AACA,MAAIK,UAAU,GAAG,GAAGC,KAAH,CAASC,IAAT,CAAcP,OAAd,CAAjB;AACAf,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBmB,UAAxB,EAZuC,CAcvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAOA,UAAP;AACH,CA9BD;;AAgCA,eAAeR,UAAf","sourcesContent":["var AWS = require(\"aws-sdk\");\nAWS.config.update({\n    accessKeyId: \"AKIAXKCRRSD3GJHJE65C\",\n    secretAccessKey: \"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\",\n    region: \"us-west-2\"\n});\nconst s3 = new AWS.S3();\n\nfunction listAllKeys(params, outPutArray) {\n    s3.listObjectsV2(params, function(err, data) {\n        if (err) {\n            console.log(err, err.stack);\n        } else {\n            var contents = data.Contents;\n            contents.forEach(function(content) {\n                outPutArray.push(content.Key);\n                console.log(\"1\", outPutArray);\n            });\n\n            if (data.IsTruncated) {\n                params.ContinuationToken = data.NextContinuationToken;\n                console.log(\"There are more keys coming up\");\n                listAllKeys(params, outPutArray);\n            }\n        }\n    });\n    console.log(\"2\", outPutArray);\n}\n\nconst downloadS3 = (prefix, bucketName) => {\n    var allKeys = [];\n    const params = {\n        Bucket: bucketName,\n        Delimiter: \"/\",\n        Prefix: prefix,\n        StartAfter: prefix\n    };\n\n    listAllKeys(params, allKeys);\n    console.log(\"yes\", allKeys[\"0\"]);\n    var nodesArray = [].slice.call(allKeys);\n    console.log(\"elements\", nodesArray);\n\n    // allKeys.map(key => s3.getSignedUrl('getObject', {Bucket:bucketName,Key:key}, function (err, url) {\n    //     return url;\n    // });\n    //\n    //   var urlparams = {Bucket: 'max-client-logos', Key: allKeys[0]};\n    //   s3.getSignedUrl('getObject', urlparams, function (err, url) {\n    //     console.log('Your generated pre-signed URL is', url);\n    // });\n    //   let url = allKeys.map((key) => (s3.getSignedUrl('getObject', {\n    //     Bucket:\"max-client-logos\",\n    //     Key:key\n    //   }, function(err, url) {\n    //     console.log('Your generated pre-signed URL is', url);\n    //   }\n    // )));\n    return nodesArray;\n};\n\nexport default downloadS3;\n"]},"metadata":{},"sourceType":"module"}