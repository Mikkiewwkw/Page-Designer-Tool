{"ast":null,"code":"/*!\n * multiparty\n * Copyright(c) 2013 Felix Geisend√∂rfer\n * Copyright(c) 2014 Andrew Kelley\n * Copyright(c) 2014 Douglas Christopher Wilson\n * MIT Licensed\n */\n'use strict';\n\nvar createError = require('http-errors');\n\nvar uid = require('uid-safe');\n\nvar stream = require('stream');\n\nvar util = require('util');\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar os = require('os');\n\nvar Buffer = require('safe-buffer').Buffer;\n\nvar StringDecoder = require('string_decoder').StringDecoder;\n\nvar fdSlicer = require('fd-slicer');\n\nvar START = 0;\nvar START_BOUNDARY = 1;\nvar HEADER_FIELD_START = 2;\nvar HEADER_FIELD = 3;\nvar HEADER_VALUE_START = 4;\nvar HEADER_VALUE = 5;\nvar HEADER_VALUE_ALMOST_DONE = 6;\nvar HEADERS_ALMOST_DONE = 7;\nvar PART_DATA_START = 8;\nvar PART_DATA = 9;\nvar CLOSE_BOUNDARY = 10;\nvar END = 11;\nvar LF = 10;\nvar CR = 13;\nvar SPACE = 32;\nvar HYPHEN = 45;\nvar COLON = 58;\nvar A = 97;\nvar Z = 122;\nvar CONTENT_TYPE_RE = /^multipart\\/(?:form-data|related)(?:;|$)/i;\nvar CONTENT_TYPE_PARAM_RE = /;\\s*([^=]+)=(?:\"([^\"]+)\"|([^;]+))/gi;\nvar FILE_EXT_RE = /(\\.[_\\-a-zA-Z0-9]{0,16})[\\S\\s]*/;\nvar LAST_BOUNDARY_SUFFIX_LEN = 4; // --\\r\\n\n\nexports.Form = Form;\nutil.inherits(Form, stream.Writable);\n\nfunction Form(options) {\n  var opts = options || {};\n  var self = this;\n  stream.Writable.call(self);\n  self.error = null;\n  self.autoFields = !!opts.autoFields;\n  self.autoFiles = !!opts.autoFiles;\n  self.maxFields = opts.maxFields || 1000;\n  self.maxFieldsSize = opts.maxFieldsSize || 2 * 1024 * 1024;\n  self.maxFilesSize = opts.maxFilesSize || Infinity;\n  self.uploadDir = opts.uploadDir || os.tmpdir();\n  self.encoding = opts.encoding || 'utf8';\n  self.bytesReceived = 0;\n  self.bytesExpected = null;\n  self.openedFiles = [];\n  self.totalFieldSize = 0;\n  self.totalFieldCount = 0;\n  self.totalFileSize = 0;\n  self.flushing = 0;\n  self.backpressure = false;\n  self.writeCbs = [];\n  self.emitQueue = [];\n  self.on('newListener', function (eventName) {\n    if (eventName === 'file') {\n      self.autoFiles = true;\n    } else if (eventName === 'field') {\n      self.autoFields = true;\n    }\n  });\n}\n\nForm.prototype.parse = function (req, cb) {\n  var called = false;\n  var self = this;\n  var waitend = true;\n\n  if (cb) {\n    // if the user supplies a callback, this implies autoFields and autoFiles\n    self.autoFields = true;\n    self.autoFiles = true; // wait for request to end before calling cb\n\n    var end = function (done) {\n      if (called) return;\n      called = true; // wait for req events to fire\n\n      process.nextTick(function () {\n        if (waitend && req.readable) {\n          // dump rest of request\n          req.resume();\n          req.once('end', done);\n          return;\n        }\n\n        done();\n      });\n    };\n\n    var fields = {};\n    var files = {};\n    self.on('error', function (err) {\n      end(function () {\n        cb(err);\n      });\n    });\n    self.on('field', function (name, value) {\n      var fieldsArray = fields[name] || (fields[name] = []);\n      fieldsArray.push(value);\n    });\n    self.on('file', function (name, file) {\n      var filesArray = files[name] || (files[name] = []);\n      filesArray.push(file);\n    });\n    self.on('close', function () {\n      end(function () {\n        cb(null, fields, files);\n      });\n    });\n  }\n\n  self.handleError = handleError;\n  self.bytesExpected = getBytesExpected(req.headers);\n  req.on('end', onReqEnd);\n  req.on('error', function (err) {\n    waitend = false;\n    handleError(err);\n  });\n  req.on('aborted', onReqAborted);\n  var state = req._readableState;\n\n  if (req._decoder || state && (state.encoding || state.decoder)) {\n    // this is a binary protocol\n    // if an encoding is set, input is likely corrupted\n    validationError(new Error('request encoding must not be set'));\n    return;\n  }\n\n  var contentType = req.headers['content-type'];\n\n  if (!contentType) {\n    validationError(createError(415, 'missing content-type header'));\n    return;\n  }\n\n  var m = CONTENT_TYPE_RE.exec(contentType);\n\n  if (!m) {\n    validationError(createError(415, 'unsupported content-type'));\n    return;\n  }\n\n  var boundary;\n  CONTENT_TYPE_PARAM_RE.lastIndex = m.index + m[0].length - 1;\n\n  while (m = CONTENT_TYPE_PARAM_RE.exec(contentType)) {\n    if (m[1].toLowerCase() !== 'boundary') continue;\n    boundary = m[2] || m[3];\n    break;\n  }\n\n  if (!boundary) {\n    validationError(createError(400, 'content-type missing boundary'));\n    return;\n  }\n\n  setUpParser(self, boundary);\n  req.pipe(self);\n\n  function onReqAborted() {\n    waitend = false;\n    self.emit('aborted');\n    handleError(new Error(\"Request aborted\"));\n  }\n\n  function onReqEnd() {\n    waitend = false;\n  }\n\n  function handleError(err) {\n    var first = !self.error;\n\n    if (first) {\n      self.error = err;\n      req.removeListener('aborted', onReqAborted);\n      req.removeListener('end', onReqEnd);\n\n      if (self.destStream) {\n        errorEventQueue(self, self.destStream, err);\n      }\n    }\n\n    cleanupOpenFiles(self);\n\n    if (first) {\n      self.emit('error', err);\n    }\n  }\n\n  function validationError(err) {\n    // handle error on next tick for event listeners to attach\n    process.nextTick(handleError.bind(null, err));\n  }\n};\n\nForm.prototype._write = function (buffer, encoding, cb) {\n  if (this.error) return;\n  var self = this;\n  var i = 0;\n  var len = buffer.length;\n  var prevIndex = self.index;\n  var index = self.index;\n  var state = self.state;\n  var lookbehind = self.lookbehind;\n  var boundary = self.boundary;\n  var boundaryChars = self.boundaryChars;\n  var boundaryLength = self.boundary.length;\n  var boundaryEnd = boundaryLength - 1;\n  var bufferLength = buffer.length;\n  var c;\n  var cl;\n\n  for (i = 0; i < len; i++) {\n    c = buffer[i];\n\n    switch (state) {\n      case START:\n        index = 0;\n        state = START_BOUNDARY;\n\n      /* falls through */\n\n      case START_BOUNDARY:\n        if (index === boundaryLength - 2 && c === HYPHEN) {\n          index = 1;\n          state = CLOSE_BOUNDARY;\n          break;\n        } else if (index === boundaryLength - 2) {\n          if (c !== CR) return self.handleError(createError(400, 'Expected CR Received ' + c));\n          index++;\n          break;\n        } else if (index === boundaryLength - 1) {\n          if (c !== LF) return self.handleError(createError(400, 'Expected LF Received ' + c));\n          index = 0;\n          self.onParsePartBegin();\n          state = HEADER_FIELD_START;\n          break;\n        }\n\n        if (c !== boundary[index + 2]) index = -2;\n        if (c === boundary[index + 2]) index++;\n        break;\n\n      case HEADER_FIELD_START:\n        state = HEADER_FIELD;\n        self.headerFieldMark = i;\n        index = 0;\n\n      /* falls through */\n\n      case HEADER_FIELD:\n        if (c === CR) {\n          self.headerFieldMark = null;\n          state = HEADERS_ALMOST_DONE;\n          break;\n        }\n\n        index++;\n        if (c === HYPHEN) break;\n\n        if (c === COLON) {\n          if (index === 1) {\n            // empty header field\n            self.handleError(createError(400, 'Empty header field'));\n            return;\n          }\n\n          self.onParseHeaderField(buffer.slice(self.headerFieldMark, i));\n          self.headerFieldMark = null;\n          state = HEADER_VALUE_START;\n          break;\n        }\n\n        cl = lower(c);\n\n        if (cl < A || cl > Z) {\n          self.handleError(createError(400, 'Expected alphabetic character, received ' + c));\n          return;\n        }\n\n        break;\n\n      case HEADER_VALUE_START:\n        if (c === SPACE) break;\n        self.headerValueMark = i;\n        state = HEADER_VALUE;\n\n      /* falls through */\n\n      case HEADER_VALUE:\n        if (c === CR) {\n          self.onParseHeaderValue(buffer.slice(self.headerValueMark, i));\n          self.headerValueMark = null;\n          self.onParseHeaderEnd();\n          state = HEADER_VALUE_ALMOST_DONE;\n        }\n\n        break;\n\n      case HEADER_VALUE_ALMOST_DONE:\n        if (c !== LF) return self.handleError(createError(400, 'Expected LF Received ' + c));\n        state = HEADER_FIELD_START;\n        break;\n\n      case HEADERS_ALMOST_DONE:\n        if (c !== LF) return self.handleError(createError(400, 'Expected LF Received ' + c));\n        var err = self.onParseHeadersEnd(i + 1);\n        if (err) return self.handleError(err);\n        state = PART_DATA_START;\n        break;\n\n      case PART_DATA_START:\n        state = PART_DATA;\n        self.partDataMark = i;\n\n      /* falls through */\n\n      case PART_DATA:\n        prevIndex = index;\n\n        if (index === 0) {\n          // boyer-moore derrived algorithm to safely skip non-boundary data\n          i += boundaryEnd;\n\n          while (i < bufferLength && !(buffer[i] in boundaryChars)) {\n            i += boundaryLength;\n          }\n\n          i -= boundaryEnd;\n          c = buffer[i];\n        }\n\n        if (index < boundaryLength) {\n          if (boundary[index] === c) {\n            if (index === 0) {\n              self.onParsePartData(buffer.slice(self.partDataMark, i));\n              self.partDataMark = null;\n            }\n\n            index++;\n          } else {\n            index = 0;\n          }\n        } else if (index === boundaryLength) {\n          index++;\n\n          if (c === CR) {\n            // CR = part boundary\n            self.partBoundaryFlag = true;\n          } else if (c === HYPHEN) {\n            index = 1;\n            state = CLOSE_BOUNDARY;\n            break;\n          } else {\n            index = 0;\n          }\n        } else if (index - 1 === boundaryLength) {\n          if (self.partBoundaryFlag) {\n            index = 0;\n\n            if (c === LF) {\n              self.partBoundaryFlag = false;\n              self.onParsePartEnd();\n              self.onParsePartBegin();\n              state = HEADER_FIELD_START;\n              break;\n            }\n          } else {\n            index = 0;\n          }\n        }\n\n        if (index > 0) {\n          // when matching a possible boundary, keep a lookbehind reference\n          // in case it turns out to be a false lead\n          lookbehind[index - 1] = c;\n        } else if (prevIndex > 0) {\n          // if our boundary turned out to be rubbish, the captured lookbehind\n          // belongs to partData\n          self.onParsePartData(lookbehind.slice(0, prevIndex));\n          prevIndex = 0;\n          self.partDataMark = i; // reconsider the current character even so it interrupted the sequence\n          // it could be the beginning of a new sequence\n\n          i--;\n        }\n\n        break;\n\n      case CLOSE_BOUNDARY:\n        if (c !== HYPHEN) return self.handleError(createError(400, 'Expected HYPHEN Received ' + c));\n\n        if (index === 1) {\n          self.onParsePartEnd();\n          state = END;\n        } else if (index > 1) {\n          return self.handleError(new Error(\"Parser has invalid state.\"));\n        }\n\n        index++;\n        break;\n\n      case END:\n        break;\n\n      default:\n        self.handleError(new Error(\"Parser has invalid state.\"));\n        return;\n    }\n  }\n\n  if (self.headerFieldMark != null) {\n    self.onParseHeaderField(buffer.slice(self.headerFieldMark));\n    self.headerFieldMark = 0;\n  }\n\n  if (self.headerValueMark != null) {\n    self.onParseHeaderValue(buffer.slice(self.headerValueMark));\n    self.headerValueMark = 0;\n  }\n\n  if (self.partDataMark != null) {\n    self.onParsePartData(buffer.slice(self.partDataMark));\n    self.partDataMark = 0;\n  }\n\n  self.index = index;\n  self.state = state;\n  self.bytesReceived += buffer.length;\n  self.emit('progress', self.bytesReceived, self.bytesExpected);\n\n  if (self.backpressure) {\n    self.writeCbs.push(cb);\n  } else {\n    cb();\n  }\n};\n\nForm.prototype.onParsePartBegin = function () {\n  clearPartVars(this);\n};\n\nForm.prototype.onParseHeaderField = function (b) {\n  this.headerField += this.headerFieldDecoder.write(b);\n};\n\nForm.prototype.onParseHeaderValue = function (b) {\n  this.headerValue += this.headerValueDecoder.write(b);\n};\n\nForm.prototype.onParseHeaderEnd = function () {\n  this.headerField = this.headerField.toLowerCase();\n  this.partHeaders[this.headerField] = this.headerValue;\n  var m;\n\n  if (this.headerField === 'content-disposition') {\n    if (m = this.headerValue.match(/\\bname=\"([^\"]+)\"/i)) {\n      this.partName = m[1];\n    }\n\n    this.partFilename = parseFilename(this.headerValue);\n  } else if (this.headerField === 'content-transfer-encoding') {\n    this.partTransferEncoding = this.headerValue.toLowerCase();\n  }\n\n  this.headerFieldDecoder = new StringDecoder(this.encoding);\n  this.headerField = '';\n  this.headerValueDecoder = new StringDecoder(this.encoding);\n  this.headerValue = '';\n};\n\nForm.prototype.onParsePartData = function (b) {\n  if (this.partTransferEncoding === 'base64') {\n    this.backpressure = !this.destStream.write(b.toString('ascii'), 'base64');\n  } else {\n    this.backpressure = !this.destStream.write(b);\n  }\n};\n\nForm.prototype.onParsePartEnd = function () {\n  if (this.destStream) {\n    flushWriteCbs(this);\n    var s = this.destStream;\n    process.nextTick(function () {\n      s.end();\n    });\n  }\n\n  clearPartVars(this);\n};\n\nForm.prototype.onParseHeadersEnd = function (offset) {\n  var self = this;\n\n  switch (self.partTransferEncoding) {\n    case 'binary':\n    case '7bit':\n    case '8bit':\n      self.partTransferEncoding = 'binary';\n      break;\n\n    case 'base64':\n      break;\n\n    default:\n      return createError(400, 'unknown transfer-encoding: ' + self.partTransferEncoding);\n  }\n\n  self.totalFieldCount += 1;\n\n  if (self.totalFieldCount > self.maxFields) {\n    return createError(413, 'maxFields ' + self.maxFields + ' exceeded.');\n  }\n\n  self.destStream = new stream.PassThrough();\n  self.destStream.on('drain', function () {\n    flushWriteCbs(self);\n  });\n  self.destStream.headers = self.partHeaders;\n  self.destStream.name = self.partName;\n  self.destStream.filename = self.partFilename;\n  self.destStream.byteOffset = self.bytesReceived + offset;\n  var partContentLength = self.destStream.headers['content-length'];\n  self.destStream.byteCount = partContentLength ? parseInt(partContentLength, 10) : self.bytesExpected ? self.bytesExpected - self.destStream.byteOffset - self.boundary.length - LAST_BOUNDARY_SUFFIX_LEN : undefined;\n\n  if (self.destStream.filename == null && self.autoFields) {\n    handleField(self, self.destStream);\n  } else if (self.destStream.filename != null && self.autoFiles) {\n    handleFile(self, self.destStream);\n  } else {\n    handlePart(self, self.destStream);\n  }\n};\n\nfunction flushWriteCbs(self) {\n  self.writeCbs.forEach(function (cb) {\n    process.nextTick(cb);\n  });\n  self.writeCbs = [];\n  self.backpressure = false;\n}\n\nfunction getBytesExpected(headers) {\n  var contentLength = headers['content-length'];\n\n  if (contentLength) {\n    return parseInt(contentLength, 10);\n  } else if (headers['transfer-encoding'] == null) {\n    return 0;\n  } else {\n    return null;\n  }\n}\n\nfunction beginFlush(self) {\n  self.flushing += 1;\n}\n\nfunction endFlush(self) {\n  self.flushing -= 1;\n\n  if (self.flushing < 0) {\n    // if this happens this is a critical bug in multiparty and this stack trace\n    // will help us figure it out.\n    self.handleError(new Error(\"unexpected endFlush\"));\n    return;\n  }\n\n  maybeClose(self);\n}\n\nfunction maybeClose(self) {\n  if (self.flushing > 0 || self.error) return; // go through the emit queue in case any field, file, or part events are\n  // waiting to be emitted\n\n  holdEmitQueue(self)(function () {\n    // nextTick because the user is listening to part 'end' events and we are\n    // using part 'end' events to decide when to emit 'close'. we add our 'end'\n    // handler before the user gets a chance to add theirs. So we make sure\n    // their 'end' event fires before we emit the 'close' event.\n    // this is covered by test/standalone/test-issue-36\n    process.nextTick(function () {\n      self.emit('close');\n    });\n  });\n}\n\nfunction cleanupOpenFiles(self) {\n  self.openedFiles.forEach(function (internalFile) {\n    // since fd slicer autoClose is true, destroying the only write stream\n    // is guaranteed by the API to close the fd\n    internalFile.ws.destroy();\n    fs.unlink(internalFile.publicFile.path, function (err) {\n      if (err) self.handleError(err);\n    });\n  });\n  self.openedFiles = [];\n}\n\nfunction holdEmitQueue(self, eventEmitter) {\n  var item = {\n    cb: null,\n    ee: eventEmitter,\n    err: null\n  };\n  self.emitQueue.push(item);\n  return function (cb) {\n    item.cb = cb;\n    flushEmitQueue(self);\n  };\n}\n\nfunction errorEventQueue(self, eventEmitter, err) {\n  var items = self.emitQueue.filter(function (item) {\n    return item.ee === eventEmitter;\n  });\n\n  if (items.length === 0) {\n    eventEmitter.emit('error', err);\n    return;\n  }\n\n  items.forEach(function (item) {\n    item.err = err;\n  });\n}\n\nfunction flushEmitQueue(self) {\n  while (self.emitQueue.length > 0 && self.emitQueue[0].cb) {\n    var item = self.emitQueue.shift(); // invoke the callback\n\n    item.cb();\n\n    if (item.err) {\n      // emit the delayed error\n      item.ee.emit('error', item.err);\n    }\n  }\n}\n\nfunction handlePart(self, partStream) {\n  beginFlush(self);\n  var emitAndReleaseHold = holdEmitQueue(self, partStream);\n  partStream.on('end', function () {\n    endFlush(self);\n  });\n  emitAndReleaseHold(function () {\n    self.emit('part', partStream);\n  });\n}\n\nfunction handleFile(self, fileStream) {\n  if (self.error) return;\n  var publicFile = {\n    fieldName: fileStream.name,\n    originalFilename: fileStream.filename,\n    path: uploadPath(self.uploadDir, fileStream.filename),\n    headers: fileStream.headers,\n    size: 0\n  };\n  var internalFile = {\n    publicFile: publicFile,\n    ws: null\n  };\n  beginFlush(self); // flush to write stream\n\n  var emitAndReleaseHold = holdEmitQueue(self, fileStream);\n  fileStream.on('error', function (err) {\n    self.handleError(err);\n  });\n  fs.open(publicFile.path, 'wx', function (err, fd) {\n    if (err) return self.handleError(err);\n    var slicer = fdSlicer.createFromFd(fd, {\n      autoClose: true\n    }); // end option here guarantees that no more than that amount will be written\n    // or else an error will be emitted\n\n    internalFile.ws = slicer.createWriteStream({\n      end: self.maxFilesSize - self.totalFileSize\n    }); // if an error ocurred while we were waiting for fs.open we handle that\n    // cleanup now\n\n    self.openedFiles.push(internalFile);\n    if (self.error) return cleanupOpenFiles(self);\n    var prevByteCount = 0;\n    internalFile.ws.on('error', function (err) {\n      self.handleError(err.code === 'ETOOBIG' ? createError(413, err.message, {\n        code: err.code\n      }) : err);\n    });\n    internalFile.ws.on('progress', function () {\n      publicFile.size = internalFile.ws.bytesWritten;\n      var delta = publicFile.size - prevByteCount;\n      self.totalFileSize += delta;\n      prevByteCount = publicFile.size;\n    });\n    slicer.on('close', function () {\n      if (self.error) return;\n      emitAndReleaseHold(function () {\n        self.emit('file', fileStream.name, publicFile);\n      });\n      endFlush(self);\n    });\n    fileStream.pipe(internalFile.ws);\n  });\n}\n\nfunction handleField(self, fieldStream) {\n  var value = '';\n  var decoder = new StringDecoder(self.encoding);\n  beginFlush(self);\n  var emitAndReleaseHold = holdEmitQueue(self, fieldStream);\n  fieldStream.on('error', function (err) {\n    self.handleError(err);\n  });\n  fieldStream.on('readable', function () {\n    var buffer = fieldStream.read();\n    if (!buffer) return;\n    self.totalFieldSize += buffer.length;\n\n    if (self.totalFieldSize > self.maxFieldsSize) {\n      self.handleError(createError(413, 'maxFieldsSize ' + self.maxFieldsSize + ' exceeded'));\n      return;\n    }\n\n    value += decoder.write(buffer);\n  });\n  fieldStream.on('end', function () {\n    emitAndReleaseHold(function () {\n      self.emit('field', fieldStream.name, value);\n    });\n    endFlush(self);\n  });\n}\n\nfunction clearPartVars(self) {\n  self.partHeaders = {};\n  self.partName = null;\n  self.partFilename = null;\n  self.partTransferEncoding = 'binary';\n  self.destStream = null;\n  self.headerFieldDecoder = new StringDecoder(self.encoding);\n  self.headerField = \"\";\n  self.headerValueDecoder = new StringDecoder(self.encoding);\n  self.headerValue = \"\";\n}\n\nfunction setUpParser(self, boundary) {\n  self.boundary = Buffer.alloc(boundary.length + 4);\n  self.boundary.write('\\r\\n--', 0, boundary.length + 4, 'ascii');\n  self.boundary.write(boundary, 4, boundary.length, 'ascii');\n  self.lookbehind = Buffer.alloc(self.boundary.length + 8);\n  self.state = START;\n  self.boundaryChars = {};\n\n  for (var i = 0; i < self.boundary.length; i++) {\n    self.boundaryChars[self.boundary[i]] = true;\n  }\n\n  self.index = null;\n  self.partBoundaryFlag = false;\n  beginFlush(self);\n  self.on('finish', function () {\n    if (self.state !== END) {\n      self.handleError(createError(400, 'stream ended unexpectedly'));\n    }\n\n    endFlush(self);\n  });\n}\n\nfunction uploadPath(baseDir, filename) {\n  var ext = path.extname(filename).replace(FILE_EXT_RE, '$1');\n  var name = uid.sync(18) + ext;\n  return path.join(baseDir, name);\n}\n\nfunction parseFilename(headerValue) {\n  var m = headerValue.match(/\\bfilename=\"(.*?)\"($|; )/i);\n\n  if (!m) {\n    m = headerValue.match(/\\bfilename\\*=utf-8\\'\\'(.*?)($|; )/i);\n\n    if (m) {\n      m[1] = decodeURI(m[1]);\n    } else {\n      return;\n    }\n  }\n\n  var filename = m[1];\n  filename = filename.replace(/%22|\\\\\"/g, '\"');\n  filename = filename.replace(/&#([\\d]{4});/g, function (m, code) {\n    return String.fromCharCode(code);\n  });\n  return filename.substr(filename.lastIndexOf('\\\\') + 1);\n}\n\nfunction lower(c) {\n  return c | 0x20;\n}","map":null,"metadata":{},"sourceType":"script"}