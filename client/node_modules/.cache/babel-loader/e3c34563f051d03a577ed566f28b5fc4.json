{"ast":null,"code":"var _jsxFileName = \"/Users/kaiweiwu/Documents/page_designer/client/src/Logo.js\";\nimport React from \"react\";\nimport uniqueId from \"lodash/uniqueId\";\nimport downloadS3 from \"./s3config\"; // import S3FileUpload from \"react-s3\";\n// import { uploadFile } from \"react-s3\";\n// import axios from \"axios\";\n\nimport Dropzone from \"./Dropzone\";\n\nrequire(\"dotenv\").config(); //need this\n\n\nlet base64 = require(\"base-64\");\n\nlet url = \"https://test-api.mobileaxept.com/micro_service/page-properties\";\nlet username = \"spencer.grimes@mobileaxept.com\";\nlet password = \"Temp654321\";\nlet headers = {\n  Authorization: \"Basic \" + base64.encode(username + \":\" + password),\n  \"Content-Type\": \"application/json\"\n};\n\nvar AWS = require(\"aws-sdk\");\n\nAWS.config.update({\n  accessKeyId: \"AKIAXKCRRSD3GJHJE65C\",\n  secretAccessKey: \"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\",\n  region: \"us-west-2\"\n});\nconst s3 = new AWS.S3();\n\nclass Logo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = option => {\n      const value = option.target.value;\n      this.setState({\n        choice: value\n      });\n    };\n\n    this.getBackgroundColor = () => {\n      const client_code = this.props.clientCode;\n      const pageId = this.props.pageId;\n      const field = \"style.main-background-color\";\n      let newUrl = url + \"?client_code=\" + client_code + \"&page_id=\" + pageId + \"&field=\" + field;\n      fetch(newUrl, {\n        method: \"GET\",\n        headers: headers,\n        mode: \"cors\"\n      }).then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw new Error(\"Something went wrong ...\");\n        }\n      }).then(data => {\n        console.log(data);\n        this.setState({\n          backgroundColor: data.value\n        });\n      }).catch(error => this.setState({\n        error: error,\n        isLoading: false\n      }));\n    };\n\n    this.handleClick = () => {\n      this.setState(prevState => ({\n        showDropZone: !prevState.showDropZone\n      }));\n    };\n\n    this.state = {\n      showDropZone: false,\n      // backgroundColor: null,\n      choice: \"\",\n      LogoOptions: [],\n      error: null,\n      isLoading: false //Need to somehow set up the initial state so that the user can see the current stage of the logo\n\n    };\n  }\n\n  async componentDidMount() {\n    this.setState({\n      isLoading: true\n    });\n\n    try {\n      const result = await downloadS3(this.props.prefix, this.props.bucketName);\n      await this.getBackgroundColor();\n      this.setState({\n        options: result,\n        isLoading: false\n      });\n    } catch (error) {\n      this.setState({\n        error: error,\n        isLoading: false\n      });\n    }\n  }\n\n  render() {\n    if (this.state.error) {\n      return React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, this.state.error.message);\n    }\n\n    if (this.state.isLoading) {\n      return React.createElement(\"div\", {\n        className: \"loader\",\n        id: \"loader-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"sr-only\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, \"Loading...\"));\n    }\n\n    var list = this.state.options;\n    const allURL = list.map(key => s3.getSignedUrl(\"getObject\", {\n      Bucket: this.props.bucketName,\n      Key: key,\n      Expires: 300\n    }));\n    const logoList = allURL.map(url => React.createElement(\"div\", {\n      key: uniqueId(),\n      className: \"container col-md-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      className: \"radio-inline\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"radio\",\n      name: \"inlineRadioOptions\",\n      value: url,\n      onChange: this.handleChnage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      className: \"logoImage\",\n      src: url,\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }))));\n    const backgroundColor = {\n      background: this.state.backgroundColor\n    };\n    return React.createElement(\"div\", {\n      id: \"logo\",\n      className: \"logo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, \"Logo\"), React.createElement(\"span\", {\n      className: \"help-block\",\n      id: \"helpBlock\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, \"Choose page logo\"), React.createElement(\"div\", {\n      className: \"logo-options\",\n      style: backgroundColor,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, logoList), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }), React.createElement(\"form\", {\n      className: \"logo-upload form-group row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-sm-10 col-md-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      name: \"button\",\n      className: \"btn btn-primary\",\n      type: \"submit\",\n      onClick: this.handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, \"Add a new logo\"))), React.createElement(Dropzone, {\n      prefix: this.props.prefix,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Logo;","map":{"version":3,"sources":["/Users/kaiweiwu/Documents/page_designer/client/src/Logo.js"],"names":["React","uniqueId","downloadS3","Dropzone","require","config","base64","url","username","password","headers","Authorization","encode","AWS","update","accessKeyId","secretAccessKey","region","s3","S3","Logo","Component","constructor","props","handleChange","option","value","target","setState","choice","getBackgroundColor","client_code","clientCode","pageId","field","newUrl","fetch","method","mode","then","response","ok","json","Error","data","console","log","backgroundColor","catch","error","isLoading","handleClick","prevState","showDropZone","state","LogoOptions","componentDidMount","result","prefix","bucketName","options","render","message","list","allURL","map","key","getSignedUrl","Bucket","Key","Expires","logoList","handleChnage","background"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport uniqueId from \"lodash/uniqueId\";\nimport downloadS3 from \"./s3config\";\n// import S3FileUpload from \"react-s3\";\n// import { uploadFile } from \"react-s3\";\n// import axios from \"axios\";\nimport Dropzone from \"./Dropzone\";\nrequire(\"dotenv\").config(); //need this\n\nlet base64 = require(\"base-64\");\nlet url = \"https://test-api.mobileaxept.com/micro_service/page-properties\";\nlet username = \"spencer.grimes@mobileaxept.com\";\nlet password = \"Temp654321\";\nlet headers = {\n    Authorization: \"Basic \" + base64.encode(username + \":\" + password),\n    \"Content-Type\": \"application/json\"\n};\n\nvar AWS = require(\"aws-sdk\");\nAWS.config.update({\n    accessKeyId: \"AKIAXKCRRSD3GJHJE65C\",\n    secretAccessKey: \"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\",\n    region: \"us-west-2\"\n});\nconst s3 = new AWS.S3();\n\nclass Logo extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            showDropZone: false,\n            // backgroundColor: null,\n            choice: \"\",\n            LogoOptions: [],\n            error: null,\n            isLoading: false //Need to somehow set up the initial state so that the user can see the current stage of the logo\n        };\n    }\n\n    handleChange = option => {\n        const value = option.target.value;\n        this.setState({ choice: value });\n    };\n\n    async componentDidMount() {\n        this.setState({ isLoading: true });\n        try {\n            const result = await downloadS3(\n                this.props.prefix,\n                this.props.bucketName\n            );\n            await this.getBackgroundColor();\n            this.setState({ options: result, isLoading: false });\n        } catch (error) {\n            this.setState({ error: error, isLoading: false });\n        }\n    }\n\n    getBackgroundColor = () => {\n        const client_code = this.props.clientCode;\n        const pageId = this.props.pageId;\n        const field = \"style.main-background-color\";\n        let newUrl =\n            url +\n            \"?client_code=\" +\n            client_code +\n            \"&page_id=\" +\n            pageId +\n            \"&field=\" +\n            field;\n        fetch(newUrl, {\n            method: \"GET\",\n            headers: headers,\n            mode: \"cors\"\n        })\n            .then(response => {\n                if (response.ok) {\n                    return response.json();\n                } else {\n                    throw new Error(\"Something went wrong ...\");\n                }\n            })\n            .then(data => {\n                console.log(data);\n                this.setState({ backgroundColor: data.value });\n            })\n            .catch(error => this.setState({ error: error, isLoading: false }));\n    };\n\n    handleClick = () => {\n        this.setState(prevState => ({ showDropZone: !prevState.showDropZone }));\n    };\n\n    render() {\n        if (this.state.error) {\n            return <p>{this.state.error.message}</p>;\n        }\n        if (this.state.isLoading) {\n            return (\n                <div className=\"loader\" id=\"loader-1\">\n                    <span className=\"sr-only\">Loading...</span>\n                </div>\n            );\n        }\n\n        var list = this.state.options;\n        const allURL = list.map(key =>\n            s3.getSignedUrl(\"getObject\", {\n                Bucket: this.props.bucketName,\n                Key: key,\n                Expires: 300\n            })\n        );\n\n        const logoList = allURL.map(url => (\n            <div key={uniqueId()} className=\"container col-md-12\">\n                <label className=\"radio-inline\">\n                    <input\n                        type=\"radio\"\n                        name=\"inlineRadioOptions\"\n                        value={url}\n                        onChange={this.handleChnage}\n                    />\n                    <img className=\"logoImage\" src={url} alt=\"\" />\n                </label>\n            </div>\n        ));\n\n        const backgroundColor = {\n            background: this.state.backgroundColor\n        };\n        return (\n            <div id=\"logo\" className=\"logo\">\n                <h3>Logo</h3>\n                <span className=\"help-block\" id=\"helpBlock\">\n                    Choose page logo\n                </span>\n                <div className=\"logo-options\" style={backgroundColor}>\n                    {logoList}\n                </div>\n                <br />\n                <form className=\"logo-upload form-group row\">\n                    <div className=\"col-sm-10 col-md-12\">\n                        <button\n                            name=\"button\"\n                            className=\"btn btn-primary\"\n                            type=\"submit\"\n                            onClick={this.handleClick}\n                        >\n                            Add a new logo\n                        </button>\n                    </div>\n                </form>\n                <Dropzone prefix={this.props.prefix} />\n            </div>\n        );\n    }\n}\n\nexport default Logo;\n"]},"metadata":{},"sourceType":"module"}