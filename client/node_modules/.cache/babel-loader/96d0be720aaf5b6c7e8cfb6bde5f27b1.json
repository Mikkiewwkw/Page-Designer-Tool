{"ast":null,"code":"import _objectSpread from \"/Users/kaiweiwu/Documents/page_designer/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/kaiweiwu/Documents/page_designer/client/src/frequency.js\";\nimport React from \"react\";\nimport uniqueId from \"lodash/uniqueId\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nlet base64 = require(\"base-64\");\n\nlet url = \"https://test-api.mobileaxept.com/micro_service/page-properties\";\nlet username = \"spencer.grimes@mobileaxept.com\";\nlet password = \"Temp654321\";\nlet headers = {\n  Authorization: \"Basic \" + base64.encode(username + \":\" + password),\n  \"Content-Type\": \"application/json\"\n};\nconst propertyArray = [\"suppressRecurring\", \"onlyRecurring\"];\nconst length = propertyArray.length; // const propertyLibrary = {\n//     suppressRecurring: \"One-time\",\n//     onlyRecurring: \"Recurring\"\n// };\n\nclass Checkbox extends React.Component {\n  render() {\n    const _this$props = this.props,\n          isChecked = _this$props.isChecked,\n          onCheckboxChange = _this$props.onCheckboxChange,\n          name = _this$props.name,\n          value = _this$props.value;\n    return React.createElement(\"label\", {\n      key: uniqueId(),\n      className: \"checkbox-inline\",\n      htmlFor: \"frequency-selection\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      value: value,\n      checked: isChecked,\n      onChange: onCheckboxChange,\n      onBlur: onCheckboxChange,\n      type: \"checkbox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }), name);\n  }\n\n}\n\nclass FrequencyOptions extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      frequencyOptions: [{\n        name: \"Weekly\",\n        isChecked: false\n      }, {\n        name: \"Monthly\",\n        isChecked: false\n      }, {\n        name: \"Twice Montly\",\n        isChecked: false\n      }, {\n        name: \"Every Other Week\",\n        isChecked: false\n      }],\n      frequencyOptionsChecked: [],\n      totalFrequencyOptionsChecked: 0,\n      errorMessage: \"Must have at least \".concat(props.minCount, \" checkbox selected.\")\n    };\n    this.addFrequencyOptions = this.addFrequencyOptions.bind(this);\n  }\n\n  addFrequencyOptions(event) {\n    const minCount = this.props.minCount;\n    let totalFrequencyOptionsChecked = this.state.totalFrequencyOptionsChecked;\n    const isChecked = event.target.checked;\n    const value = event.target.value;\n\n    if (event.type === \"change\") {\n      if (event.currentTarget.checked) {\n        totalFrequencyOptionsChecked += 1;\n        this.setState({\n          totalFrequencyOptionsChecked: totalFrequencyOptionsChecked\n        });\n      } else {\n        totalFrequencyOptionsChecked -= 1;\n        this.setState({\n          totalFrequencyOptionsChecked: totalFrequencyOptionsChecked\n        }, () => this.state.totalFrequencyOptionsChecked < 1 ? toast.error(this.state.errorMessage, {\n          autoClose: 5000\n        }) : null);\n      }\n    }\n\n    this.setState(prevState => ({\n      frequencyOptions: prevState.frequencyOptions.map(option => option.name === value ? _objectSpread({}, option, {\n        isChecked: isChecked\n      }) : option)\n    }));\n\n    if (isChecked) {\n      this.setState(prevState => ({\n        frequencyOptionsChecked: [...prevState.frequencyOptionsChecked, value]\n      }));\n    } else {\n      const newfrequencyOptionsChecked = this.state.frequencyOptionsChecked.filter(option => option !== value);\n      this.setState({\n        frequencyOptionsChecked: newfrequencyOptionsChecked\n      });\n    }\n  }\n\n  render() {\n    const errorMessage = this.state.errorMessage; // let errorMessage = this.state.errorMessage !== \"\" ? <p>{errorMessage}</p> : null;\n    // if(!this.props.isRecurringChecked){\n    //   return null;\n    // }\n\n    return React.createElement(\"div\", {\n      className: \"frequency-option\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, \"Frequency Options\"), React.createElement(\"div\", {\n      className: \"multi-selection-frequency-option\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: this.state.totalFrequencyOptionsChecked < this.props.minCount ? \"errorMessageTransition\" : \"hiddenDiv\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, errorMessage), this.state.frequencyOptions.map(option => React.createElement(Checkbox, {\n      key: uniqueId(),\n      value: option.name,\n      isChecked: option.isChecked,\n      onCheckboxChange: this.addFrequencyOptions,\n      name: option.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nclass Frequency extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.autosaveFrequency = (field, new_value) => {\n      const client_code = this.props.clientCode;\n      const pageId = this.props.pageId;\n      let body = {\n        client_code: client_code,\n        page_id: pageId,\n        field: field,\n        new_value: new_value\n      };\n      fetch(url, {\n        method: \"POST\",\n        headers: headers,\n        mode: \"cors\",\n        body: JSON.stringify(body)\n      }).then(response => {\n        if (response.ok) {\n          console.log(response);\n          return response.json();\n        } else {\n          throw new Error(\"Something went wrong ...\");\n        }\n      }).then(data => {\n        console.log(data);\n      }).catch(error => console.log(error));\n    };\n\n    this.addFrequency = event => {\n      const isChecked = event.target.checked;\n      const value = event.target.value;\n      this.setState(prevState => ({\n        frequencyList: prevState.frequencyList.map(option => option.name === value ? _objectSpread({}, option, {\n          isChecked: isChecked\n        }) : option)\n      }));\n\n      if (isChecked) {\n        if (value === \"Recurring\") {\n          this.setState({\n            visible: true\n          });\n\n          if (this.state.frequencyList[0].isChecked) {\n            this.setState({\n              suppressRecurring: false\n            });\n            this.setState({\n              onlyRecurring: false\n            });\n          } else {\n            this.setState({\n              onlyRecurring: true\n            });\n          }\n        } else if (value === \"One-time\") {\n          if (this.state.frequencyList[1].isChecked) {\n            this.setState({\n              suppressRecurring: false\n            });\n            this.setState({\n              onlyRecurring: false\n            });\n          } else {\n            this.setState({\n              suppressRecurring: true\n            });\n          }\n        }\n      } else {\n        if (value === \"Recurring\") {\n          if (this.state.frequencyList[0].isChecked) {\n            this.setState({\n              visible: false\n            });\n            this.setState({\n              suppressRecurring: true\n            });\n          } else {\n            this.setState({\n              onlyRecurring: true\n            }); //Need a better way to solve this\n\n            console.log(\"Have to select one of the options\");\n            toast.error(\"Must select at least one frequency option\", {\n              autoClose: 5000\n            });\n          }\n        } else if (value === \"One-time\") {\n          if (this.state.frequencyList[1].isChecked) {\n            this.setState({\n              onlyRecurring: true\n            });\n          } else {\n            this.setState({\n              suppressRecurring: true\n            }); //Need a better way to solve this\n\n            console.log(\"Have to select one of the options\");\n            toast.error(\"Must select at least one frequency option\", {\n              autoClose: 5000\n            });\n          }\n        }\n      }\n    };\n\n    this.state = {\n      frequencyList: [{\n        name: \"One-time\",\n        isChecked: false\n      }, {\n        name: \"Recurring\",\n        isChecked: false\n      }],\n      // totalNumberCheckedFrequency: 0,\n      suppressRecurring: false,\n      onlyRecurring: false,\n      // frequencyChecked: [],\n      visible: false,\n      isLoading: false,\n      error: null\n    };\n  }\n\n  componentDidMount() {\n    const client_code = this.props.clientCode;\n    const pageId = this.props.pageId;\n    this.setState({\n      isLoading: true\n    });\n\n    for (let i = 0; i < length; i++) {\n      const field = propertyArray[i];\n      let newUrl = url + \"?client_code=\" + client_code + \"&page_id=\" + pageId + \"&field=\" + field; // console.log(newUrl);\n\n      fetch(newUrl, {\n        method: \"GET\",\n        headers: headers,\n        mode: \"cors\"\n      }).then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw new Error(\"Something went wrong ...\");\n        }\n      }).then(data => {\n        console.log(data);\n\n        if (data.prop_key.includes(\"suppressRecurring\")) {\n          this.setState({\n            suppressRecurring: data.value\n          });\n        } else if (data.prop_key.includes(\"onlyRecurring\")) {\n          this.setState({\n            onlyRecurring: data.value\n          });\n        }\n      }).catch(error => this.setState({\n        error,\n        isLoading: false\n      }));\n    }\n\n    if (this.state.suppressRecurring === false) {\n      if (this.state.onlyRecurring === false) {\n        this.setState(prevState => ({\n          frequencyList: prevState.frequencyList.map(option => _objectSpread({}, option, {\n            isChecked: true\n          }))\n        }));\n        this.setState({\n          visible: true\n        });\n        this.setState({\n          totalNumberCheckedFrequency: 2\n        });\n      } else {\n        //onlyRecurring === true\n        this.setState(prevState => ({\n          frequencyList: prevState.frequencyList.map(option => option.name === \"Recurring\" ? _objectSpread({}, option, {\n            isChecked: true\n          }) : option)\n        }));\n        this.setState({\n          visible: true\n        });\n        this.setState({\n          totalNumberCheckedFrequency: 1\n        });\n      }\n    } else {\n      //suppressRecurring === true\n      this.setState(prevState => ({\n        frequencyList: prevState.frequencyList.map(option => option.name === \"One-time\" ? _objectSpread({}, option, {\n          isChecked: true\n        }) : option)\n      }));\n      this.setState({\n        totalNumberCheckedFrequency: 1\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    let new_value = null;\n    let field = null;\n\n    if (prevState.suppressRecurring !== this.state.suppressRecurring) {\n      new_value = this.state.suppressRecurring;\n      field = \"suppressRecurring\";\n      this.autosaveFrequency(field, new_value);\n    } else if (prevState.onlyRecurring !== this.state.onlyRecurring) {\n      new_value = this.state.onlyRecurring;\n      field = \"onlyRecurring\";\n      this.autosaveFrequency(field, new_value);\n    }\n  }\n\n  render() {\n    const frequency_list = this.state.frequencyList.map(frequency => React.createElement(\"label\", {\n      key: uniqueId(),\n      className: \"checkbox-inline\",\n      htmlFor: \"frequency-selection\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"checkbox\",\n      value: frequency.name,\n      checked: frequency.isChecked,\n      onChange: this.addFrequency,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352\n      },\n      __self: this\n    }), frequency.name)); // let renderOptions = recurring.isChecked ? <Frequency_options minCount={1} /> : null;\n\n    return React.createElement(\"div\", {\n      className: \"frequency\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365\n      },\n      __self: this\n    }, \"Frequency\"), React.createElement(\"span\", {\n      className: \"help-block\",\n      id: \"helpBlock\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366\n      },\n      __self: this\n    }, \"Choose which frequency option are available to the user\"), React.createElement(\"form\", {\n      \"data-toggle\": \"validator\",\n      role: \"form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"multi-selection-frequency\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370\n      },\n      __self: this\n    }, frequency_list, React.createElement(ToastContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: this.state.visible ? \"frequencyTransition\" : \"hiddenDiv\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373\n      },\n      __self: this\n    }, React.createElement(FrequencyOptions, {\n      minCount: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default Frequency;","map":{"version":3,"sources":["/Users/kaiweiwu/Documents/page_designer/client/src/frequency.js"],"names":["React","uniqueId","ToastContainer","toast","base64","require","url","username","password","headers","Authorization","encode","propertyArray","length","Checkbox","Component","render","props","isChecked","onCheckboxChange","name","value","FrequencyOptions","constructor","state","frequencyOptions","frequencyOptionsChecked","totalFrequencyOptionsChecked","errorMessage","minCount","addFrequencyOptions","bind","event","target","checked","type","currentTarget","setState","error","autoClose","prevState","map","option","newfrequencyOptionsChecked","filter","Frequency","autosaveFrequency","field","new_value","client_code","clientCode","pageId","body","page_id","fetch","method","mode","JSON","stringify","then","response","ok","console","log","json","Error","data","catch","addFrequency","frequencyList","visible","suppressRecurring","onlyRecurring","isLoading","componentDidMount","i","newUrl","prop_key","includes","totalNumberCheckedFrequency","componentDidUpdate","prevProps","frequency_list","frequency"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport uniqueId from \"lodash/uniqueId\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nlet base64 = require(\"base-64\");\nlet url = \"https://test-api.mobileaxept.com/micro_service/page-properties\";\nlet username = \"spencer.grimes@mobileaxept.com\";\nlet password = \"Temp654321\";\n\nlet headers = {\n    Authorization: \"Basic \" + base64.encode(username + \":\" + password),\n    \"Content-Type\": \"application/json\"\n};\n\nconst propertyArray = [\"suppressRecurring\", \"onlyRecurring\"];\nconst length = propertyArray.length;\n// const propertyLibrary = {\n//     suppressRecurring: \"One-time\",\n//     onlyRecurring: \"Recurring\"\n// };\n\nclass Checkbox extends React.Component {\n    render() {\n        const { isChecked, onCheckboxChange, name, value } = this.props;\n\n        return (\n            <label\n                key={uniqueId()}\n                className=\"checkbox-inline\"\n                htmlFor=\"frequency-selection\"\n            >\n                <input\n                    value={value}\n                    checked={isChecked}\n                    onChange={onCheckboxChange}\n                    onBlur={onCheckboxChange}\n                    type=\"checkbox\"\n                />\n                {name}\n            </label>\n        );\n    }\n}\n\nclass FrequencyOptions extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            frequencyOptions: [\n                { name: \"Weekly\", isChecked: false },\n                { name: \"Monthly\", isChecked: false },\n                { name: \"Twice Montly\", isChecked: false },\n                { name: \"Every Other Week\", isChecked: false }\n            ],\n            frequencyOptionsChecked: [],\n            totalFrequencyOptionsChecked: 0,\n            errorMessage: `Must have at least ${props.minCount} checkbox selected.`\n        };\n        this.addFrequencyOptions = this.addFrequencyOptions.bind(this);\n    }\n\n    addFrequencyOptions(event) {\n        const { minCount } = this.props;\n        let { totalFrequencyOptionsChecked } = this.state;\n        const isChecked = event.target.checked;\n        const value = event.target.value;\n\n        if (event.type === \"change\") {\n            if (event.currentTarget.checked) {\n                totalFrequencyOptionsChecked += 1;\n                this.setState({\n                    totalFrequencyOptionsChecked: totalFrequencyOptionsChecked\n                });\n            } else {\n                totalFrequencyOptionsChecked -= 1;\n                this.setState(\n                    {\n                        totalFrequencyOptionsChecked: totalFrequencyOptionsChecked\n                    },\n                    () =>\n                        this.state.totalFrequencyOptionsChecked < 1\n                            ? toast.error(this.state.errorMessage, {\n                                autoClose: 5000\n                            })\n                            : null\n                );\n            }\n        }\n\n        this.setState(prevState => ({\n            frequencyOptions: prevState.frequencyOptions.map(option =>\n                option.name === value\n                    ? { ...option, isChecked: isChecked }\n                    : option\n            )\n        }));\n\n        if (isChecked) {\n            this.setState(prevState => ({\n                frequencyOptionsChecked: [\n                    ...prevState.frequencyOptionsChecked,\n                    value\n                ]\n            }));\n        } else {\n            const newfrequencyOptionsChecked = this.state.frequencyOptionsChecked.filter(\n                option => option !== value\n            );\n            this.setState({\n                frequencyOptionsChecked: newfrequencyOptionsChecked\n            });\n        }\n    }\n\n    render() {\n        const { errorMessage } = this.state;\n        // let errorMessage = this.state.errorMessage !== \"\" ? <p>{errorMessage}</p> : null;\n\n        // if(!this.props.isRecurringChecked){\n        //   return null;\n        // }\n\n        return (\n            <div className=\"frequency-option\">\n                <h4>Frequency Options</h4>\n                <div className=\"multi-selection-frequency-option\">\n                    <div>\n                        <p\n                            className={\n                                this.state.totalFrequencyOptionsChecked <\n                                this.props.minCount\n                                    ? \"errorMessageTransition\"\n                                    : \"hiddenDiv\"\n                            }\n                        >\n                            {errorMessage}\n                        </p>\n                        {this.state.frequencyOptions.map(option => (\n                            <Checkbox\n                                key={uniqueId()}\n                                value={option.name}\n                                isChecked={option.isChecked}\n                                onCheckboxChange={this.addFrequencyOptions}\n                                name={option.name}\n                            />\n                        ))}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass Frequency extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            frequencyList: [\n                { name: \"One-time\", isChecked: false },\n                { name: \"Recurring\", isChecked: false }\n            ],\n            // totalNumberCheckedFrequency: 0,\n            suppressRecurring: false,\n            onlyRecurring: false,\n            // frequencyChecked: [],\n            visible: false,\n            isLoading: false,\n            error: null\n        };\n    }\n\n    componentDidMount() {\n        const client_code = this.props.clientCode;\n        const pageId = this.props.pageId;\n        this.setState({ isLoading: true });\n        for (let i = 0; i < length; i++) {\n            const field = propertyArray[i];\n            let newUrl =\n                url +\n                \"?client_code=\" +\n                client_code +\n                \"&page_id=\" +\n                pageId +\n                \"&field=\" +\n                field;\n            // console.log(newUrl);\n            fetch(newUrl, {\n                method: \"GET\",\n                headers: headers,\n                mode: \"cors\"\n            })\n                .then(response => {\n                    if (response.ok) {\n                        return response.json();\n                    } else {\n                        throw new Error(\"Something went wrong ...\");\n                    }\n                })\n                .then(data => {\n                    console.log(data);\n                    if (data.prop_key.includes(\"suppressRecurring\")) {\n                        this.setState({ suppressRecurring: data.value });\n                    } else if (data.prop_key.includes(\"onlyRecurring\")) {\n                        this.setState({ onlyRecurring: data.value });\n                    }\n                })\n\n                .catch(error => this.setState({ error, isLoading: false }));\n        }\n        if (this.state.suppressRecurring === false) {\n            if (this.state.onlyRecurring === false) {\n                this.setState(prevState => ({\n                    frequencyList: prevState.frequencyList.map(option => ({\n                        ...option,\n                        isChecked: true\n                    }))\n                }));\n                this.setState({ visible: true });\n                this.setState({ totalNumberCheckedFrequency: 2 });\n            } else {\n                //onlyRecurring === true\n                this.setState(prevState => ({\n                    frequencyList: prevState.frequencyList.map(option =>\n                        option.name === \"Recurring\"\n                            ? { ...option, isChecked: true }\n                            : option\n                    )\n                }));\n                this.setState({ visible: true });\n                this.setState({ totalNumberCheckedFrequency: 1 });\n            }\n        } else {\n            //suppressRecurring === true\n            this.setState(prevState => ({\n                frequencyList: prevState.frequencyList.map(option =>\n                    option.name === \"One-time\"\n                        ? { ...option, isChecked: true }\n                        : option\n                )\n            }));\n            this.setState({ totalNumberCheckedFrequency: 1 });\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        let new_value = null;\n        let field = null;\n        if (prevState.suppressRecurring !== this.state.suppressRecurring) {\n            new_value = this.state.suppressRecurring;\n            field = \"suppressRecurring\";\n            this.autosaveFrequency(field, new_value);\n        } else if (prevState.onlyRecurring !== this.state.onlyRecurring) {\n            new_value = this.state.onlyRecurring;\n            field = \"onlyRecurring\";\n            this.autosaveFrequency(field, new_value);\n        }\n    }\n\n    autosaveFrequency = (field, new_value) => {\n        const client_code = this.props.clientCode;\n        const pageId = this.props.pageId;\n        let body = {\n            client_code: client_code,\n            page_id: pageId,\n            field: field,\n            new_value: new_value\n        };\n\n        fetch(url, {\n            method: \"POST\",\n            headers: headers,\n            mode: \"cors\",\n            body: JSON.stringify(body)\n        })\n            .then(response => {\n                if (response.ok) {\n                    console.log(response);\n                    return response.json();\n                } else {\n                    throw new Error(\"Something went wrong ...\");\n                }\n            })\n            .then(data => {\n                console.log(data);\n            })\n            .catch(error => console.log(error));\n    };\n\n    addFrequency = event => {\n        const isChecked = event.target.checked;\n        const value = event.target.value;\n\n        this.setState(prevState => ({\n            frequencyList: prevState.frequencyList.map(option =>\n                option.name === value\n                    ? { ...option, isChecked: isChecked }\n                    : option\n            )\n        }));\n\n        if (isChecked) {\n            if (value === \"Recurring\") {\n                this.setState({ visible: true });\n                if (this.state.frequencyList[0].isChecked) {\n                    this.setState({ suppressRecurring: false });\n                    this.setState({ onlyRecurring: false });\n                } else {\n                    this.setState({ onlyRecurring: true });\n                }\n            } else if (value === \"One-time\") {\n                if (this.state.frequencyList[1].isChecked) {\n                    this.setState({ suppressRecurring: false });\n                    this.setState({ onlyRecurring: false });\n                } else {\n                    this.setState({ suppressRecurring: true });\n                }\n            }\n        } else {\n            if (value === \"Recurring\") {\n                if (this.state.frequencyList[0].isChecked) {\n                    this.setState({ visible: false });\n                    this.setState({ suppressRecurring: true });\n                } else {\n                    this.setState({ onlyRecurring: true }); //Need a better way to solve this\n                    console.log(\"Have to select one of the options\");\n                    toast.error(\"Must select at least one frequency option\", {\n                        autoClose: 5000\n                    });\n                }\n            } else if (value === \"One-time\") {\n                if (this.state.frequencyList[1].isChecked) {\n                    this.setState({ onlyRecurring: true });\n                } else {\n                    this.setState({ suppressRecurring: true }); //Need a better way to solve this\n                    console.log(\"Have to select one of the options\");\n                    toast.error(\"Must select at least one frequency option\", {\n                        autoClose: 5000\n                    });\n                }\n            }\n        }\n    };\n\n    render() {\n        const frequency_list = this.state.frequencyList.map(frequency => (\n            <label\n                key={uniqueId()}\n                className=\"checkbox-inline\"\n                htmlFor=\"frequency-selection\"\n            >\n                <input\n                    type=\"checkbox\"\n                    value={frequency.name}\n                    checked={frequency.isChecked}\n                    onChange={this.addFrequency}\n                />\n                {frequency.name}\n            </label>\n        ));\n\n        // let renderOptions = recurring.isChecked ? <Frequency_options minCount={1} /> : null;\n        return (\n            <div className=\"frequency\">\n                <h4>Frequency</h4>\n                <span className=\"help-block\" id=\"helpBlock\">\n                    Choose which frequency option are available to the user\n                </span>\n                <form data-toggle=\"validator\" role=\"form\">\n                    <div className=\"multi-selection-frequency\">\n                        {frequency_list}\n                        <ToastContainer />\n                        <div\n                            className={\n                                this.state.visible\n                                    ? \"frequencyTransition\"\n                                    : \"hiddenDiv\"\n                            }\n                        >\n                            <FrequencyOptions minCount={1} />\n                        </div>\n                    </div>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default Frequency;\n"]},"metadata":{},"sourceType":"module"}