{"ast":null,"code":"var AWS = require(\"aws-sdk\");\n\nconst s3 = new AWS.S3();\ns3.config.update({\n  accessKeyId: \"AKIAXKCRRSD3GJHJE65C\",\n  secretAccessKey: \"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\",\n  region: \"us-west-2\"\n});\n\nasync function listAllKeys(params, outputArray) {\n  try {\n    const response = await s3.listObjectsV2(params).promise();\n    response.Contents.forEach(obj => outputArray.push(obj.Key));\n\n    if (response.IsTruncated) {\n      const newParams = Object.assign({}, params);\n      newParams.ContinuationToken = response.NextContinuationToken;\n      await listAllKeys(newParams, outputArray); // RECURSIVE CALL\n    }\n  } catch (error) {\n    throw error;\n  } // s3.listObjectsV2(params, function(err, data) {\n  //     if (err) {\n  //         console.log(err, err.stack);\n  //     } else {\n  //         var contents = data.Contents;\n  //         contents.forEach(function(content) {\n  //             allKeys.push(content.Key);\n  //             console.log(\"1\", allKeys);\n  //         });\n  //\n  //         if (data.IsTruncated) {\n  //             params.ContinuationToken = data.NextContinuationToken;\n  //             console.log(\"There are more keys coming up\");\n  //             listAllKeys();\n  //         }\n  //     }\n  // });\n\n}\n\nexport const downloadS3 = async (prefix, bucketName) => {\n  const allKeys = [];\n  const params = {\n    Bucket: bucketName,\n    Delimiter: \"/\",\n    Prefix: prefix,\n    StartAfter: prefix\n  };\n  await listAllKeys(params, allKeys); // var nodesArray = [].slice.call(allKeys);\n  // console.log(typeof nodesArray);\n  // console.log(\"elements\", nodesArray);\n  // allKeys.map(key => s3.getSignedUrl('getObject', {Bucket:bucketName,Key:key}, function (err, url) {\n  //     return url;\n  // });\n  //\n  //   var urlparams = {Bucket: 'max-client-logos', Key: allKeys[0]};\n  //   s3.getSignedUrl('getObject', urlparams, function (err, url) {\n  //     console.log('Your generated pre-signed URL is', url);\n  // });\n  //   let url = allKeys.map((key) => (s3.getSignedUrl('getObject', {\n  //     Bucket:\"max-client-logos\",\n  //     Key:key\n  //   }, function(err, url) {\n  //     console.log('Your generated pre-signed URL is', url);\n  //   }\n  // )));\n\n  return allKeys;\n};","map":{"version":3,"sources":["/Users/kaiweiwu/Documents/page_designer/page-designer/src/s3config.js"],"names":["AWS","require","s3","S3","config","update","accessKeyId","secretAccessKey","region","listAllKeys","params","outputArray","response","listObjectsV2","promise","Contents","forEach","obj","push","Key","IsTruncated","newParams","Object","assign","ContinuationToken","NextContinuationToken","error","downloadS3","prefix","bucketName","allKeys","Bucket","Delimiter","Prefix","StartAfter"],"mappings":"AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,SAAD,CAAjB;;AACA,MAAMC,EAAE,GAAG,IAAIF,GAAG,CAACG,EAAR,EAAX;AACAD,EAAE,CAACE,MAAH,CAAUC,MAAV,CAAiB;AACbC,EAAAA,WAAW,EAAE,sBADA;AAEbC,EAAAA,eAAe,EAAE,0CAFJ;AAGbC,EAAAA,MAAM,EAAE;AAHK,CAAjB;;AAMA,eAAeC,WAAf,CAA2BC,MAA3B,EAAmCC,WAAnC,EAAgD;AAC5C,MAAI;AACA,UAAMC,QAAQ,GAAG,MAAMV,EAAE,CAACW,aAAH,CAAiBH,MAAjB,EAAyBI,OAAzB,EAAvB;AACAF,IAAAA,QAAQ,CAACG,QAAT,CAAkBC,OAAlB,CAA0BC,GAAG,IAAIN,WAAW,CAACO,IAAZ,CAAiBD,GAAG,CAACE,GAArB,CAAjC;;AAEA,QAAIP,QAAQ,CAACQ,WAAb,EAA0B;AACtB,YAAMC,SAAS,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBb,MAAlB,CAAlB;AACAW,MAAAA,SAAS,CAACG,iBAAV,GAA8BZ,QAAQ,CAACa,qBAAvC;AACA,YAAMhB,WAAW,CAACY,SAAD,EAAYV,WAAZ,CAAjB,CAHsB,CAGqB;AAC9C;AACJ,GATD,CASE,OAAOe,KAAP,EAAc;AACZ,UAAMA,KAAN;AACH,GAZ2C,CAa5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACH;;AAED,OAAO,MAAMC,UAAU,GAAG,OAAOC,MAAP,EAAeC,UAAf,KAA8B;AACpD,QAAMC,OAAO,GAAG,EAAhB;AACA,QAAMpB,MAAM,GAAG;AACXqB,IAAAA,MAAM,EAAEF,UADG;AAEXG,IAAAA,SAAS,EAAE,GAFA;AAGXC,IAAAA,MAAM,EAAEL,MAHG;AAIXM,IAAAA,UAAU,EAAEN;AAJD,GAAf;AAOA,QAAMnB,WAAW,CAACC,MAAD,EAASoB,OAAT,CAAjB,CAToD,CAUpD;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAOA,OAAP;AACH,CA9BM","sourcesContent":["var AWS = require(\"aws-sdk\");\nconst s3 = new AWS.S3();\ns3.config.update({\n    accessKeyId: \"AKIAXKCRRSD3GJHJE65C\",\n    secretAccessKey: \"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\",\n    region: \"us-west-2\"\n});\n\nasync function listAllKeys(params, outputArray) {\n    try {\n        const response = await s3.listObjectsV2(params).promise();\n        response.Contents.forEach(obj => outputArray.push(obj.Key));\n\n        if (response.IsTruncated) {\n            const newParams = Object.assign({}, params);\n            newParams.ContinuationToken = response.NextContinuationToken;\n            await listAllKeys(newParams, outputArray); // RECURSIVE CALL\n        }\n    } catch (error) {\n        throw error;\n    }\n    // s3.listObjectsV2(params, function(err, data) {\n    //     if (err) {\n    //         console.log(err, err.stack);\n    //     } else {\n    //         var contents = data.Contents;\n    //         contents.forEach(function(content) {\n    //             allKeys.push(content.Key);\n    //             console.log(\"1\", allKeys);\n    //         });\n    //\n    //         if (data.IsTruncated) {\n    //             params.ContinuationToken = data.NextContinuationToken;\n    //             console.log(\"There are more keys coming up\");\n    //             listAllKeys();\n    //         }\n    //     }\n    // });\n}\n\nexport const downloadS3 = async (prefix, bucketName) => {\n    const allKeys = [];\n    const params = {\n        Bucket: bucketName,\n        Delimiter: \"/\",\n        Prefix: prefix,\n        StartAfter: prefix\n    };\n\n    await listAllKeys(params, allKeys);\n    // var nodesArray = [].slice.call(allKeys);\n    // console.log(typeof nodesArray);\n    // console.log(\"elements\", nodesArray);\n\n    // allKeys.map(key => s3.getSignedUrl('getObject', {Bucket:bucketName,Key:key}, function (err, url) {\n    //     return url;\n    // });\n    //\n    //   var urlparams = {Bucket: 'max-client-logos', Key: allKeys[0]};\n    //   s3.getSignedUrl('getObject', urlparams, function (err, url) {\n    //     console.log('Your generated pre-signed URL is', url);\n    // });\n    //   let url = allKeys.map((key) => (s3.getSignedUrl('getObject', {\n    //     Bucket:\"max-client-logos\",\n    //     Key:key\n    //   }, function(err, url) {\n    //     console.log('Your generated pre-signed URL is', url);\n    //   }\n    // )));\n    return allKeys;\n};\n"]},"metadata":{},"sourceType":"module"}