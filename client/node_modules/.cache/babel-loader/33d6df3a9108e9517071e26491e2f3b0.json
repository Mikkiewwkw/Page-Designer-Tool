{"ast":null,"code":"var AWS = require('aws-sdk');\n\nconst downloadS3 = (prefix, bucketName) => {\n  const s3 = new AWS.S3();\n  let allKeys = [];\n  s3.config.update({\n    accessKeyId: 'AKIAXKCRRSD3GJHJE65C',\n    secretAccessKey: '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',\n    region: 'us-west-2'\n  });\n  const params = {\n    Bucket: bucketName,\n    Delimiter: '/',\n    Prefix: prefix,\n    StartAfter: prefix\n  };\n\n  function listAllKeys() {\n    let elements = [];\n    s3.listObjectsV2(params, (err, data) => {\n      if (err) {\n        console.log(err, err.stack);\n      } else {\n        var contents = data.Contents;\n        contents.forEach(function (content) {\n          allKeys.push(content.Key);\n        });\n\n        if (data.IsTruncated) {\n          params.ContinuationToken = data.NextContinuationToken;\n          console.log(\"There are more keys coming up\");\n          listAllKeys();\n        }\n      }\n    }); // console.log(allKeys.length);\n\n    elements = Array.from(allKeys);\n    console.log(elements);\n  }\n\n  let keyList = listAllKeys(); // allKeys.map(key => s3.getSignedUrl('getObject', {Bucket:bucketName,Key:key}, function (err, url) {\n  //     return url;\n  // });\n  //\n  //   var urlparams = {Bucket: 'max-client-logos', Key: allKeys[0]};\n  //   s3.getSignedUrl('getObject', urlparams, function (err, url) {\n  //     console.log('Your generated pre-signed URL is', url);\n  // });\n  //   let url = allKeys.map((key) => (s3.getSignedUrl('getObject', {\n  //     Bucket:\"max-client-logos\",\n  //     Key:key\n  //   }, function(err, url) {\n  //     console.log('Your generated pre-signed URL is', url);\n  //   }\n  // )));\n\n  return keyList;\n};\n\nexport default downloadS3;","map":{"version":3,"sources":["/Users/kaiweiwu/Documents/page_designer/page-designer/src/s3config.js"],"names":["AWS","require","downloadS3","prefix","bucketName","s3","S3","allKeys","config","update","accessKeyId","secretAccessKey","region","params","Bucket","Delimiter","Prefix","StartAfter","listAllKeys","elements","listObjectsV2","err","data","console","log","stack","contents","Contents","forEach","content","push","Key","IsTruncated","ContinuationToken","NextContinuationToken","Array","from","keyList"],"mappings":"AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,SAAD,CAAjB;;AAEA,MAAMC,UAAU,GAAG,CAACC,MAAD,EAASC,UAAT,KAAwB;AACzC,QAAMC,EAAE,GAAG,IAAIL,GAAG,CAACM,EAAR,EAAX;AACA,MAAIC,OAAO,GAAG,EAAd;AACAF,EAAAA,EAAE,CAACG,MAAH,CAAUC,MAAV,CAAiB;AACfC,IAAAA,WAAW,EAAC,sBADG;AAEfC,IAAAA,eAAe,EAAC,0CAFD;AAGfC,IAAAA,MAAM,EAAC;AAHQ,GAAjB;AAMA,QAAMC,MAAM,GAAG;AACbC,IAAAA,MAAM,EAAEV,UADK;AAEbW,IAAAA,SAAS,EAAE,GAFE;AAGbC,IAAAA,MAAM,EAAEb,MAHK;AAIbc,IAAAA,UAAU,EAAEd;AAJC,GAAf;;AAOA,WAASe,WAAT,GAAsB;AACpB,QAAIC,QAAQ,GAAG,EAAf;AACAd,IAAAA,EAAE,CAACe,aAAH,CAAiBP,MAAjB,EAAyB,CAACQ,GAAD,EAAMC,IAAN,KAAe;AACtC,UAAID,GAAJ,EAAS;AACPE,QAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ,EAAgBA,GAAG,CAACI,KAApB;AACD,OAFD,MAGI;AACF,YAAIC,QAAQ,GAAGJ,IAAI,CAACK,QAApB;AACAD,QAAAA,QAAQ,CAACE,OAAT,CAAiB,UAAUC,OAAV,EAAmB;AAChCtB,UAAAA,OAAO,CAACuB,IAAR,CAAaD,OAAO,CAACE,GAArB;AACH,SAFD;;AAIA,YAAIT,IAAI,CAACU,WAAT,EAAsB;AAClBnB,UAAAA,MAAM,CAACoB,iBAAP,GAA2BX,IAAI,CAACY,qBAAhC;AACAX,UAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AACAN,UAAAA,WAAW;AACd;AACF;AACF,KAhBD,EAFoB,CAmBpB;;AACAC,IAAAA,QAAQ,GAAGgB,KAAK,CAACC,IAAN,CAAW7B,OAAX,CAAX;AACAgB,IAAAA,OAAO,CAACC,GAAR,CAAYL,QAAZ;AACD;;AACD,MAAIkB,OAAO,GAAGnB,WAAW,EAAzB,CAvCyC,CAyCzC;AACA;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOmB,OAAP;AACD,CAzDD;;AA2DA,eAAenC,UAAf","sourcesContent":["var AWS = require('aws-sdk');\n\nconst downloadS3 = (prefix, bucketName) => {\n  const s3 = new AWS.S3();\n  let allKeys = [];\n  s3.config.update({\n    accessKeyId:'AKIAXKCRRSD3GJHJE65C',\n    secretAccessKey:'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',\n    region:'us-west-2'\n  });\n\n  const params = {\n    Bucket: bucketName,\n    Delimiter: '/',\n    Prefix: prefix,\n    StartAfter: prefix\n  };\n\n  function listAllKeys(){\n    let elements = [];\n    s3.listObjectsV2(params, (err, data) => {\n      if (err) {\n        console.log(err,err.stack);\n      }\n      else{\n        var contents = data.Contents;\n        contents.forEach(function (content) {\n            allKeys.push(content.Key);\n        });\n\n        if (data.IsTruncated) {\n            params.ContinuationToken = data.NextContinuationToken;\n            console.log(\"There are more keys coming up\");\n            listAllKeys();\n        }\n      }\n    })\n    // console.log(allKeys.length);\n    elements = Array.from(allKeys);\n    console.log(elements);\n  }\n  let keyList = listAllKeys();\n\n  // allKeys.map(key => s3.getSignedUrl('getObject', {Bucket:bucketName,Key:key}, function (err, url) {\n  //     return url;\n  // });\n//\n//   var urlparams = {Bucket: 'max-client-logos', Key: allKeys[0]};\n//   s3.getSignedUrl('getObject', urlparams, function (err, url) {\n//     console.log('Your generated pre-signed URL is', url);\n// });\n//   let url = allKeys.map((key) => (s3.getSignedUrl('getObject', {\n//     Bucket:\"max-client-logos\",\n//     Key:key\n//   }, function(err, url) {\n//     console.log('Your generated pre-signed URL is', url);\n//   }\n// )));\n  return keyList;\n}\n\nexport default downloadS3;\n"]},"metadata":{},"sourceType":"module"}