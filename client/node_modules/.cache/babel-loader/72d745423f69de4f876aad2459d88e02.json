{"ast":null,"code":"import _objectSpread from \"/Users/kaiweiwu/Documents/page_designer/page-designer/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/kaiweiwu/Documents/page_designer/page-designer/src/frequency.js\";\nimport React from \"react\";\nimport uniqueId from 'lodash/uniqueId';\n\nclass Frequency extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.addFrequency = option => {\n      const isChecked = option.target.checked;\n      const value = option.target.value;\n      this.setState(prevState => ({\n        frequencyList: prevState.frequencyList.map(option => option.name === value ? _objectSpread({}, option, {\n          isChecked: isChecked\n        }) : option)\n      }));\n\n      if (isChecked) {\n        this.setState(prevState => ({\n          frequencyChecked: [...prevState.frequencyChecked, value]\n        })); // if(value === \"Recurring\"){\n        //   renderOptions();\n        // }\n      } else {\n        const newfrequencyChecked = this.state.optionsChecked.filter(option => option !== value);\n        this.setState({\n          frequencyChecked: newfrequencyChecked\n        });\n      }\n    };\n\n    this.renderOptions = () => {\n      const frequency_options_list = this.state.frequencyOptions.map(frequency_option => React.createElement(\"label\", {\n        key: uniqueId(),\n        className: \"checkbox-inline\",\n        htmlFor: \"fund-selection\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"checkbox\",\n        checked: frequency_option.isChecked,\n        value: frequency_option.name,\n        onChange: this.addFrequencyOptions,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }), frequency_option.name));\n      return React.createElement(\"div\", {\n        className: \"frequency-option\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, \"Frequency Options\"), React.createElement(\"div\", {\n        className: \"multi-selection-frequency-option\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, frequency_options_list));\n    };\n\n    this.addFrequencyOptions = frequency_option => {\n      let totalFrequencyOptionsChecked = this.state.totalFrequencyOptionsChecked;\n      const isChecked = frequency_option.target.checked;\n      const minCount = 1;\n      const value = frequency_option.target.value;\n      this.setState(prevState => ({\n        frequencyOptions: prevState.frequencyOptions.map(option => option.name === value ? _objectSpread({}, option, {\n          isChecked: isChecked\n        }) : option)\n      }));\n\n      if (isChecked) {\n        this.setState(prevState => ({\n          frequencyOptionsChecked: [...prevState.frequencyOptionsChecked, value]\n        }));\n        totalFrequencyOptionsChecked += 1;\n      } else {\n        const newfrequencyOptionsChecked = this.state.frequencyOptionsChecked.filter(option => option !== value);\n        this.setState({\n          frequencyOptionsChecked: newfrequencyOptionsChecked\n        });\n        totalFrequencyOptionsChecked -= 1;\n      } //Error in selectoin count\n\n\n      if (totalFrequencyOptionsChecked < minCount) {\n        // Is below min\n        this.setState({\n          errorMessage: \"Must have at least \".concat(minCount, \" checkboxe selected.\"),\n          totalFrequencyOptionsChecked\n        });\n      } else {\n        // Valid\n        this.setState({\n          errorMessage: '',\n          totalFrequencyOptionsChecked: totalFrequencyOptionsChecked\n        });\n      }\n\n      return React.createElement(\"section\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, this.state.errorMessage));\n    };\n\n    this.state = {\n      frequencyList: [{\n        name: \"One-time\",\n        isChecked: false\n      }, {\n        name: \"Recurring\",\n        isChecked: false\n      }],\n      frequencyChecked: [],\n      frequencyOptions: [{\n        name: \"Weekly\",\n        isChecked: false\n      }, {\n        name: \"Monthly\",\n        isChecked: false\n      }, {\n        name: \"Twice Montly\",\n        isChecked: false\n      }, {\n        name: \"Every Other Week\",\n        isChecked: false\n      }],\n      frequencyOptionsChecked: [],\n      totalFrequencyOptionsChecked: 0,\n      errorMessage: \"\"\n    };\n  }\n\n  render() {\n    const onetime = this.state.frequencyList[0];\n    const recurring = this.state.frequencyList[1]; // const frequency_list = this.state.frequencyList.map((frequency) => (\n    //   if (frequency.name === \"Recurring\") {\n    //     <label key={uniqueId()} className=\"checkbox-inline\" htmlFor=\"fund-selection\">\n    //       <input type=\"checkbox\" value={frequency.name} checked={frequency.checked} onClick={this.renderOptions} onChange={this.addFrequency} />{frequency.name}\n    //     </label>\n    //   }\n    //   else{\n    //     <label key={uniqueId()} className=\"checkbox-inline\" htmlFor=\"fund-selection\">\n    //       <input type=\"checkbox\" value={frequency.name} checked={frequency.checked} onChange={this.addFrequency} />{frequency.name}\n    //     </label>\n    //   }\n    // ));\n\n    return React.createElement(\"div\", {\n      className: \"frequency\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \"Frequency\"), React.createElement(\"span\", {\n      className: \"help-block\",\n      id: \"helpBlock\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"Choose which frequency option are available to the user\"), React.createElement(\"div\", {\n      className: \"multi-selection-frequency\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      key: uniqueId(),\n      className: \"checkbox-inline\",\n      htmlFor: \"fund-selection\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"checkbox\",\n      value: onetime.name,\n      checked: onetime.checked,\n      onChange: this.addFrequency,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }), onetime.name), React.createElement(\"label\", {\n      key: uniqueId(),\n      className: \"checkbox-inline\",\n      htmlFor: \"fund-selection\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"checkbox\",\n      value: recurring.name,\n      checked: recurring.checked,\n      onClick: this.renderOptions,\n      onChange: this.addFrequency,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }), recurring.name)));\n  }\n\n}\n\nexport default Frequency;","map":{"version":3,"sources":["/Users/kaiweiwu/Documents/page_designer/page-designer/src/frequency.js"],"names":["React","uniqueId","Frequency","Component","constructor","props","addFrequency","option","isChecked","target","checked","value","setState","prevState","frequencyList","map","name","frequencyChecked","newfrequencyChecked","state","optionsChecked","filter","renderOptions","frequency_options_list","frequencyOptions","frequency_option","addFrequencyOptions","totalFrequencyOptionsChecked","minCount","frequencyOptionsChecked","newfrequencyOptionsChecked","errorMessage","render","onetime","recurring"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport uniqueId from 'lodash/uniqueId';\n\n\n\nclass Frequency extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      frequencyList : [{name:\"One-time\", isChecked: false}, {name:\"Recurring\",isChecked:false}],\n      frequencyChecked : [],\n      frequencyOptions : [{name:\"Weekly\", isChecked: false}, {name:\"Monthly\",isChecked:false}, {name:\"Twice Montly\", isChecked: false}, {name:\"Every Other Week\",isChecked:false}],\n      frequencyOptionsChecked : [],\n      totalFrequencyOptionsChecked : 0,\n      errorMessage : \"\"\n    }\n  }\n\n    addFrequency = (option) => {\n      const isChecked = option.target.checked;\n      const value = option.target.value;\n\n      this.setState(prevState => ({ frequencyList: prevState.frequencyList.map(option => option.name === value ? { ...option, isChecked: isChecked } : option) }));\n\n      if (isChecked){\n          this.setState(prevState => ({frequencyChecked: [...prevState.frequencyChecked, value] }));\n          // if(value === \"Recurring\"){\n          //   renderOptions();\n          // }\n      }\n      else {\n          const newfrequencyChecked = this.state.optionsChecked.filter(option => option !== value);\n          this.setState({ frequencyChecked: newfrequencyChecked });\n      }\n    }\n\n    renderOptions = () => {\n      const frequency_options_list = this.state.frequencyOptions.map((frequency_option) =>\n        <label key={uniqueId()} className=\"checkbox-inline\" htmlFor=\"fund-selection\">\n          <input type=\"checkbox\" checked={frequency_option.isChecked} value={frequency_option.name} onChange={this.addFrequencyOptions} />{frequency_option.name}\n        </label>\n      );\n\n      return (\n        <div className=\"frequency-option\">\n          <h4>Frequency Options</h4>\n          <div className=\"multi-selection-frequency-option\">\n            {frequency_options_list}\n          </div>\n        </div>\n      )\n  }\n\n    addFrequencyOptions = (frequency_option) => {\n      let {totalFrequencyOptionsChecked} = this.state;\n      const isChecked = frequency_option.target.checked;\n      const minCount = 1;\n      const value = frequency_option.target.value;\n\n      this.setState(prevState => ({ frequencyOptions: prevState.frequencyOptions.map(option => option.name === value ? { ...option, isChecked: isChecked } : option) }));\n\n      if(isChecked){\n        this.setState(prevState => ({frequencyOptionsChecked: [...prevState.frequencyOptionsChecked, value] }));\n        totalFrequencyOptionsChecked += 1;\n      }\n      else {\n        const newfrequencyOptionsChecked = this.state.frequencyOptionsChecked.filter(option => option !== value)\n        this.setState({ frequencyOptionsChecked: newfrequencyOptionsChecked });\n        totalFrequencyOptionsChecked -= 1;\n      }\n\n      //Error in selectoin count\n      if (totalFrequencyOptionsChecked < minCount){\n        // Is below min\n        this.setState({\n          errorMessage: `Must have at least ${minCount} checkboxe selected.`,\n          totalFrequencyOptionsChecked,\n        });\n      }\n      else {\n      // Valid\n      this.setState({\n        errorMessage: '',\n        totalFrequencyOptionsChecked:totalFrequencyOptionsChecked,\n      });\n    }\n      return(\n        <section>\n          <p>{this.state.errorMessage}</p>\n        </section>\n      )\n  }\n\n    render(){\n      const onetime = this.state.frequencyList[0];\n      const recurring = this.state.frequencyList[1];\n      // const frequency_list = this.state.frequencyList.map((frequency) => (\n      //   if (frequency.name === \"Recurring\") {\n      //     <label key={uniqueId()} className=\"checkbox-inline\" htmlFor=\"fund-selection\">\n      //       <input type=\"checkbox\" value={frequency.name} checked={frequency.checked} onClick={this.renderOptions} onChange={this.addFrequency} />{frequency.name}\n      //     </label>\n      //   }\n      //   else{\n      //     <label key={uniqueId()} className=\"checkbox-inline\" htmlFor=\"fund-selection\">\n      //       <input type=\"checkbox\" value={frequency.name} checked={frequency.checked} onChange={this.addFrequency} />{frequency.name}\n      //     </label>\n      //   }\n      // ));\n\n      return (\n        <div className=\"frequency\">\n          <h4>Frequency</h4>\n          <span className=\"help-block\" id=\"helpBlock\">Choose which frequency option are available to the user</span>\n          <div className=\"multi-selection-frequency\">\n            <label key={uniqueId()} className=\"checkbox-inline\" htmlFor=\"fund-selection\">\n              <input type=\"checkbox\" value={onetime.name} checked={onetime.checked} onChange={this.addFrequency} />{onetime.name}\n            </label>\n            <label key={uniqueId()} className=\"checkbox-inline\" htmlFor=\"fund-selection\">\n              <input type=\"checkbox\" value={recurring.name} checked={recurring.checked} onClick={this.renderOptions} onChange={this.addFrequency} />{recurring.name}\n            </label>\n          </div>\n        </div>\n      )\n    }\n}\n\nexport default Frequency;\n"]},"metadata":{},"sourceType":"module"}