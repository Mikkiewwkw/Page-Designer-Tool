{"ast":null,"code":"import _objectSpread from \"/Users/kaiweiwu/Documents/page_designer/page-designer/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/kaiweiwu/Documents/page_designer/page-designer/src/OrderingList.js\";\nimport React from \"react\"; // class OrderingList extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       optionList:[{name:\"Option 1\", isChecked:false},{name:\"Option 2\", isChecked:false},{name:\"Option 3\", isChecked:false}, {name:\"Option 4\", isChecked: true}],\n//       optionChecked:[],\n//     }\n//   }\n//\n//   AddingOption = (option) => {\n//     const isAdded = option.target.checked;\n//     const value = option.target.value;\n//\n//     this.setState(prevState => ({optionList: prevState.optionList.map(option => option.name === value ? {...option, isChecked: isAdded} : option)}));\n//\n//     if (isAdded)\n//     {\n//       this.setState(prevState => ({itemChecked: [...prevState.optionChecked, value]}));\n//     }\n//     else {\n//       const newAddedOptions = this.state.optionChecked.filter(option => option !== value);\n//       this.setState({optionChecked: newAddedOptions});\n//     }\n//   }\n//\n//     render(){\n//       const {optionList} = this.state;\n//       const option_list = optionList.map((index,i) =>\n//         <label key={i+1} className=\"checkbox-inline\">\n//           <input type=\"checkbox\" id=\"inlineCheckbox\" checked={this.state.optionList[i].isChecked}  value={index.name} onChange={this.AddingOption} />Option {i+1}\n//         </label>\n//       );\n//       return(\n//         <div className=\"multi-selection-fund\">\n//           {option_list}\n//           <div>\n//             Added Options: {this.state.optionChecked.join(', ')}\n//           </div>\n//           <script>$(console.log({this.state.optionChecked}))</script>\n//         </div>\n//       )\n//     }\n// }\n\nclass OrderingList extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onAddingOption = item => {\n      const isChecked = item.target.checked;\n      const value = item.target.value;\n      this.setState(prevState => ({\n        optionList: prevState.optionList.map(option => option.name === value ? _objectSpread({}, option, {\n          isChecked: isChecked\n        }) : option)\n      }));\n      if (isChecked) this.setState(prevState => ({\n        optionsChecked: [...prevState.optionsChecked, value]\n      }));else {\n        const newoptionsChecked = this.state.optionsChecked.filter(option => option !== value);\n        this.setState({\n          optionsChecked: newoptionsChecked\n        });\n      }\n    };\n\n    this.state = {\n      optionList: [{\n        name: \"Option 1\",\n        isChecked: false\n      }, {\n        name: \"Option 2\",\n        isChecked: false\n      }, {\n        name: \"Option 3\",\n        isChecked: false\n      }],\n      optionsChecked: []\n    };\n  }\n\n  render() {\n    const optionList = this.state.optionList;\n    const option_list = optionList.map((index, i) => React.createElement(\"label\", {\n      class: \"checkbox-inline\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"checkbox\",\n      value: index.name,\n      checked: this.state.optionList[i].isChecked,\n      onChange: this.onAddingOption,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }), \"Option \", i + 1));\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, option_list, React.createElement(\"div\", {\n      style: {\n        marginTop: \"20px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"Added options: \", this.state.optionsChecked.join(', ')));\n  }\n\n}\n\nexport default OrderingList;","map":{"version":3,"sources":["/Users/kaiweiwu/Documents/page_designer/page-designer/src/OrderingList.js"],"names":["React","OrderingList","Component","constructor","props","onAddingOption","item","isChecked","target","checked","value","setState","prevState","optionList","map","option","name","optionsChecked","newoptionsChecked","state","filter","render","option_list","index","i","marginTop","join"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,YAAN,SAA2BD,KAAK,CAACE,SAAjC,CAA2C;AACzCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;;AADgB,SAQlBC,cARkB,GAQAC,IAAD,IAAU;AACzB,YAAMC,SAAS,GAAGD,IAAI,CAACE,MAAL,CAAYC,OAA9B;AACA,YAAMC,KAAK,GAAGJ,IAAI,CAACE,MAAL,CAAYE,KAA1B;AAEA,WAAKC,QAAL,CAAcC,SAAS,KAAK;AAAEC,QAAAA,UAAU,EAAED,SAAS,CAACC,UAAV,CAAqBC,GAArB,CAAyBC,MAAM,IAAIA,MAAM,CAACC,IAAP,KAAgBN,KAAhB,qBAA6BK,MAA7B;AAAqCR,UAAAA,SAAS,EAAEA;AAAhD,aAA8DQ,MAAjG;AAAd,OAAL,CAAvB;AAEA,UAAIR,SAAJ,EACE,KAAKI,QAAL,CAAcC,SAAS,KAAK;AAACK,QAAAA,cAAc,EAAE,CAAC,GAAGL,SAAS,CAACK,cAAd,EAA8BP,KAA9B;AAAjB,OAAL,CAAvB,EADF,KAEK;AACH,cAAMQ,iBAAiB,GAAG,KAAKC,KAAL,CAAWF,cAAX,CAA0BG,MAA1B,CAAiCL,MAAM,IAAIA,MAAM,KAAKL,KAAtD,CAA1B;AACA,aAAKC,QAAL,CAAc;AAAEM,UAAAA,cAAc,EAAEC;AAAlB,SAAd;AACD;AACF,KApBiB;;AAEhB,SAAKC,KAAL,GAAa;AACXN,MAAAA,UAAU,EAAE,CAAC;AAAEG,QAAAA,IAAI,EAAE,UAAR;AAAoBT,QAAAA,SAAS,EAAE;AAA/B,OAAD,EAAyC;AAAES,QAAAA,IAAI,EAAE,UAAR;AAAoBT,QAAAA,SAAS,EAAE;AAA/B,OAAzC,EAAiF;AAAES,QAAAA,IAAI,EAAE,UAAR;AAAoBT,QAAAA,SAAS,EAAE;AAA/B,OAAjF,CADD;AAEXU,MAAAA,cAAc,EAAE;AAFL,KAAb;AAID;;AAgBDI,EAAAA,MAAM,GAAG;AAAA,UACCR,UADD,GACgB,KAAKM,KADrB,CACCN,UADD;AAEP,UAAMS,WAAW,GAAGT,UAAU,CAACC,GAAX,CAAe,CAACS,KAAD,EAAQC,CAAR,KACjC;AAAO,MAAA,KAAK,EAAC,iBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAO,MAAA,IAAI,EAAC,UAAZ;AAAuB,MAAA,KAAK,EAAED,KAAK,CAACP,IAApC;AAA0C,MAAA,OAAO,EAAE,KAAKG,KAAL,CAAWN,UAAX,CAAsBW,CAAtB,EAAyBjB,SAA5E;AAAuF,MAAA,QAAQ,EAAE,KAAKF,cAAtG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,aACkImB,CAAC,GAAC,CADpI,CADkB,CAApB;AAMA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGF,WADH,EAEE;AAAK,MAAA,KAAK,EAAE;AAAEG,QAAAA,SAAS,EAAE;AAAb,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAmD,KAAKN,KAAL,CAAWF,cAAX,CAA0BS,IAA1B,CAA+B,IAA/B,CAAnD,CAFF,CADF;AAMD;;AArCwC;;AAyC3C,eAAezB,YAAf","sourcesContent":["import React from \"react\";\n\n// class OrderingList extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       optionList:[{name:\"Option 1\", isChecked:false},{name:\"Option 2\", isChecked:false},{name:\"Option 3\", isChecked:false}, {name:\"Option 4\", isChecked: true}],\n//       optionChecked:[],\n//     }\n//   }\n//\n//   AddingOption = (option) => {\n//     const isAdded = option.target.checked;\n//     const value = option.target.value;\n//\n//     this.setState(prevState => ({optionList: prevState.optionList.map(option => option.name === value ? {...option, isChecked: isAdded} : option)}));\n//\n//     if (isAdded)\n//     {\n//       this.setState(prevState => ({itemChecked: [...prevState.optionChecked, value]}));\n//     }\n//     else {\n//       const newAddedOptions = this.state.optionChecked.filter(option => option !== value);\n//       this.setState({optionChecked: newAddedOptions});\n//     }\n//   }\n//\n//     render(){\n//       const {optionList} = this.state;\n//       const option_list = optionList.map((index,i) =>\n//         <label key={i+1} className=\"checkbox-inline\">\n//           <input type=\"checkbox\" id=\"inlineCheckbox\" checked={this.state.optionList[i].isChecked}  value={index.name} onChange={this.AddingOption} />Option {i+1}\n//         </label>\n//       );\n//       return(\n//         <div className=\"multi-selection-fund\">\n//           {option_list}\n//           <div>\n//             Added Options: {this.state.optionChecked.join(', ')}\n//           </div>\n//           <script>$(console.log({this.state.optionChecked}))</script>\n//         </div>\n//       )\n//     }\n// }\n\nclass OrderingList extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      optionList: [{ name: \"Option 1\", isChecked: false }, { name: \"Option 2\", isChecked: false }, { name: \"Option 3\", isChecked: false }],\n      optionsChecked: []\n    }\n  }\n\n  onAddingOption = (item) => {\n    const isChecked = item.target.checked;\n    const value = item.target.value;\n\n    this.setState(prevState => ({ optionList: prevState.optionList.map(option => option.name === value ? { ...option, isChecked: isChecked } : option) }));\n\n    if (isChecked)\n      this.setState(prevState => ({optionsChecked: [...prevState.optionsChecked, value] }));\n    else {\n      const newoptionsChecked = this.state.optionsChecked.filter(option => option !== value)\n      this.setState({ optionsChecked: newoptionsChecked });\n    }\n  }\n\n  render() {\n    const { optionList } = this.state;\n    const option_list = optionList.map((index, i) =>\n      <label class=\"checkbox-inline\">\n        <input type=\"checkbox\" value={index.name} checked={this.state.optionList[i].isChecked} onChange={this.onAddingOption} />Option {i+1}\n      </label>\n    );\n\n    return (\n      <div>\n        {option_list}\n        <div style={{ marginTop: \"20px\" }}>Added options: {this.state.optionsChecked.join(', ')}</div>\n      </div>\n    )\n  }\n}\n\n\nexport default OrderingList;\n"]},"metadata":{},"sourceType":"module"}