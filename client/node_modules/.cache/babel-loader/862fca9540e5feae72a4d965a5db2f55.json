{"ast":null,"code":"import _objectSpread from \"/Users/kaiweiwu/Documents/page_designer/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/kaiweiwu/Documents/page_designer/client/src/frequency.js\";\nimport React from \"react\";\nimport uniqueId from \"lodash/uniqueId\";\n\nclass Checkbox extends React.Component {\n  render() {\n    const _this$props = this.props,\n          isChecked = _this$props.isChecked,\n          onCheckboxChange = _this$props.onCheckboxChange,\n          name = _this$props.name,\n          value = _this$props.value;\n    return React.createElement(\"label\", {\n      key: uniqueId(),\n      className: \"checkbox-inline\",\n      htmlFor: \"frequency-selection\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 9\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      value: value,\n      checked: isChecked,\n      onChange: onCheckboxChange,\n      onBlur: onCheckboxChange,\n      type: \"checkbox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    }), name);\n  }\n\n}\n\nclass FrequencyOptions extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      frequencyOptions: [{\n        name: \"Weekly\",\n        isChecked: false\n      }, {\n        name: \"Monthly\",\n        isChecked: false\n      }, {\n        name: \"Twice Montly\",\n        isChecked: false\n      }, {\n        name: \"Every Other Week\",\n        isChecked: false\n      }],\n      frequencyOptionsChecked: [],\n      totalFrequencyOptionsChecked: 0,\n      errorMessage: \"Must have at least \".concat(props.minCount, \" checkboxe selected.\")\n    };\n    this.addFrequencyOptions = this.addFrequencyOptions.bind(this);\n  }\n\n  addFrequencyOptions(event) {\n    const minCount = this.props.minCount;\n    let totalFrequencyOptionsChecked = this.state.totalFrequencyOptionsChecked;\n    const isChecked = event.target.checked;\n    const value = event.target.value;\n\n    if (event.type === \"change\") {\n      if (event.currentTarget.checked) {\n        totalFrequencyOptionsChecked += 1;\n        this.setState({\n          totalFrequencyOptionsChecked: totalFrequencyOptionsChecked\n        });\n      } else {\n        totalFrequencyOptionsChecked -= 1;\n        this.setState({\n          totalFrequencyOptionsChecked: totalFrequencyOptionsChecked\n        });\n      }\n    }\n\n    this.setState(prevState => ({\n      frequencyOptions: prevState.frequencyOptions.map(option => option.name === value ? _objectSpread({}, option, {\n        isChecked: isChecked\n      }) : option)\n    }));\n\n    if (isChecked) {\n      this.setState(prevState => ({\n        frequencyOptionsChecked: [...prevState.frequencyOptionsChecked, value]\n      }));\n    } else {\n      const newfrequencyOptionsChecked = this.state.frequencyOptionsChecked.filter(option => option !== value);\n      this.setState({\n        frequencyOptionsChecked: newfrequencyOptionsChecked\n      });\n    } //Error in selectoin count\n    // if (totalFrequencyOptionsChecked < minCount) {\n    //     // Is below min\n    //     this.setState({\n    //         // errorMessage: `Must have at least ${minCount} checkboxe selected.`,\n    //         totalFrequencyOptionsChecked: totalFrequencyOptionsChecked\n    //     });\n    // } else {\n    //     // Valid\n    //     this.setState({\n    //         // errorMessage: \"\",\n    //         totalFrequencyOptionsChecked: totalFrequencyOptionsChecked\n    //     });\n    // }\n\n  }\n\n  render() {\n    const errorMessage = this.state.errorMessage; // let errorMessage = this.state.errorMessage !== \"\" ? <p>{errorMessage}</p> : null;\n    // if(!this.props.isRecurringChecked){\n    //   return null;\n    // }\n\n    return React.createElement(\"div\", {\n      className: \"frequency-option\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"Frequency Options\"), React.createElement(\"div\", {\n      className: \"multi-selection-frequency-option\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: this.state.totalFrequencyOptionsChecked < this.state.props ? \"errorMessageTransition\" : \"hiddenDiv\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, errorMessage), this.state.frequencyOptions.map(option => React.createElement(Checkbox, {\n      key: uniqueId(),\n      value: option.name,\n      isChecked: option.isChecked,\n      onCheckboxChange: this.addFrequencyOptions,\n      name: option.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nclass Frequency extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.addFrequency = option => {\n      const isChecked = option.target.checked;\n      const value = option.target.value;\n      this.setState(prevState => ({\n        frequencyList: prevState.frequencyList.map(option => option.name === value ? _objectSpread({}, option, {\n          isChecked: isChecked\n        }) : option)\n      }));\n\n      if (isChecked) {\n        this.setState(prevState => ({\n          frequencyChecked: [...prevState.frequencyChecked, value]\n        }));\n      } else {\n        const newfrequencyChecked = this.state.frequencyChecked.filter(option => option !== value);\n        this.setState({\n          frequencyChecked: newfrequencyChecked\n        });\n      }\n    };\n\n    this.handleClick = () => {\n      this.setState(prev => ({\n        visible: !prev.visible\n      }));\n    };\n\n    this.state = {\n      frequencyList: [{\n        name: \"One-time\",\n        isChecked: false\n      }, {\n        name: \"Recurring\",\n        isChecked: false\n      }],\n      frequencyChecked: [],\n      visible: false\n    };\n  }\n\n  render() {\n    const onetime = this.state.frequencyList[0];\n    const recurring = this.state.frequencyList[1]; // let renderOptions = recurring.isChecked ? <Frequency_options minCount={1} /> : null;\n\n    return React.createElement(\"div\", {\n      className: \"frequency\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, \"Frequency\"), React.createElement(\"span\", {\n      className: \"help-block\",\n      id: \"helpBlock\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, \"Choose which frequency option are available to the user\"), React.createElement(\"div\", {\n      className: \"multi-selection-frequency\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      key: uniqueId(),\n      className: \"checkbox-inline\",\n      htmlFor: \"frequency-selection\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"checkbox\",\n      value: onetime.name,\n      checked: onetime.isChecked,\n      onChange: this.addFrequency,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }), onetime.name), React.createElement(\"label\", {\n      key: uniqueId(),\n      className: \"checkbox-inline\",\n      htmlFor: \"frequency-selection\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      id: \"recurring\",\n      type: \"checkbox\",\n      value: recurring.name,\n      checked: recurring.isChecked,\n      onChange: this.addFrequency,\n      onClick: this.handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }), recurring.name), React.createElement(\"div\", {\n      className: this.state.visible ? \"frequencyTransition\" : \"hiddenDiv\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, React.createElement(FrequencyOptions, {\n      minCount: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    })))); // if(recurring.isChecked){\n    //   return (\n    //     <div className=\"frequency\">\n    //       <h4>Frequency</h4>\n    //       <span className=\"help-block\" id=\"helpBlock\">Choose which frequency option are available to the user</span>\n    //       <div className=\"multi-selection-frequency\">\n    //         <label key={uniqueId()} className=\"checkbox-inline\" htmlFor=\"frequency-selection\">\n    //           <input type=\"checkbox\" value={onetime.name} checked={onetime.isChecked} onChange={this.addFrequency} />{onetime.name}\n    //         </label>\n    //         <label key={uniqueId()} className=\"checkbox-inline\" htmlFor=\"frequency-selection\">\n    //           <input type=\"checkbox\" value={recurring.name} checked={recurring.isChecked} onChange={this.addFrequency} onClick={this.renderOptions}/>{recurring.name}\n    //         </label>\n    //         <div className=\"frequencyTransition\">\n    //           <Frequency_options minCount={1} />\n    //         </div>\n    //       </div>\n    //     </div>\n    //   );\n    // }\n    // else{\n    //   return (\n    //     <div className=\"frequency\">\n    //       <h4>Frequency</h4>\n    //       <span className=\"help-block\" id=\"helpBlock\">Choose which frequency option are available to the user</span>\n    //       <div className=\"multi-selection-frequency\">\n    //         <label key={uniqueId()} className=\"checkbox-inline\" htmlFor=\"frequency-selection\">\n    //           <input type=\"checkbox\" value={onetime.name} checked={onetime.isChecked} onChange={this.addFrequency} />{onetime.name}\n    //         </label>\n    //         <label key={uniqueId()} className=\"checkbox-inline\" htmlFor=\"frequency-selection\">\n    //           <input type=\"checkbox\" value={recurring.name} checked={recurring.isChecked} onChange={this.addFrequency} onClick={this.renderOptions}/>{recurring.name}\n    //         </label>\n    //       </div>\n    //     </div>\n    //   );\n    // }\n    // const frequency_list = this.state.frequencyList.map((frequency) => (\n    //   if (frequency.name === \"Recurring\") {\n    //     <label key={uniqueId()} className=\"checkbox-inline\" htmlFor=\"fund-selection\">\n    //       <input type=\"checkbox\" value={frequency.name} checked={frequency.checked} onClick={this.renderOptions} onChange={this.addFrequency} />{frequency.name}\n    //     </label>\n    //   }\n    //   else{\n    //     <label key={uniqueId()} className=\"checkbox-inline\" htmlFor=\"fund-selection\">\n    //       <input type=\"checkbox\" value={frequency.name} checked={frequency.checked} onChange={this.addFrequency} />{frequency.name}\n    //     </label>\n    //   }\n    // ));\n  }\n\n}\n\nexport default Frequency;","map":{"version":3,"sources":["/Users/kaiweiwu/Documents/page_designer/client/src/frequency.js"],"names":["React","uniqueId","Checkbox","Component","render","props","isChecked","onCheckboxChange","name","value","FrequencyOptions","constructor","state","frequencyOptions","frequencyOptionsChecked","totalFrequencyOptionsChecked","errorMessage","minCount","addFrequencyOptions","bind","event","target","checked","type","currentTarget","setState","prevState","map","option","newfrequencyOptionsChecked","filter","Frequency","addFrequency","frequencyList","frequencyChecked","newfrequencyChecked","handleClick","prev","visible","onetime","recurring"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport uniqueId from \"lodash/uniqueId\";\n\nclass Checkbox extends React.Component {\n    render() {\n        const { isChecked, onCheckboxChange, name, value } = this.props;\n\n        return (\n            <label\n                key={uniqueId()}\n                className=\"checkbox-inline\"\n                htmlFor=\"frequency-selection\"\n            >\n                <input\n                    value={value}\n                    checked={isChecked}\n                    onChange={onCheckboxChange}\n                    onBlur={onCheckboxChange}\n                    type=\"checkbox\"\n                />\n                {name}\n            </label>\n        );\n    }\n}\n\nclass FrequencyOptions extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            frequencyOptions: [\n                { name: \"Weekly\", isChecked: false },\n                { name: \"Monthly\", isChecked: false },\n                { name: \"Twice Montly\", isChecked: false },\n                { name: \"Every Other Week\", isChecked: false }\n            ],\n            frequencyOptionsChecked: [],\n            totalFrequencyOptionsChecked: 0,\n            errorMessage: `Must have at least ${props.minCount} checkboxe selected.`\n        };\n        this.addFrequencyOptions = this.addFrequencyOptions.bind(this);\n    }\n\n    addFrequencyOptions(event) {\n        const { minCount } = this.props;\n        let { totalFrequencyOptionsChecked } = this.state;\n        const isChecked = event.target.checked;\n        const value = event.target.value;\n\n        if (event.type === \"change\") {\n            if (event.currentTarget.checked) {\n                totalFrequencyOptionsChecked += 1;\n                this.setState({\n                    totalFrequencyOptionsChecked: totalFrequencyOptionsChecked\n                });\n            } else {\n                totalFrequencyOptionsChecked -= 1;\n                this.setState({\n                    totalFrequencyOptionsChecked: totalFrequencyOptionsChecked\n                });\n            }\n        }\n\n        this.setState(prevState => ({\n            frequencyOptions: prevState.frequencyOptions.map(option =>\n                option.name === value\n                    ? { ...option, isChecked: isChecked }\n                    : option\n            )\n        }));\n\n        if (isChecked) {\n            this.setState(prevState => ({\n                frequencyOptionsChecked: [\n                    ...prevState.frequencyOptionsChecked,\n                    value\n                ]\n            }));\n        } else {\n            const newfrequencyOptionsChecked = this.state.frequencyOptionsChecked.filter(\n                option => option !== value\n            );\n            this.setState({\n                frequencyOptionsChecked: newfrequencyOptionsChecked\n            });\n        }\n\n        //Error in selectoin count\n        // if (totalFrequencyOptionsChecked < minCount) {\n        //     // Is below min\n        //     this.setState({\n        //         // errorMessage: `Must have at least ${minCount} checkboxe selected.`,\n        //         totalFrequencyOptionsChecked: totalFrequencyOptionsChecked\n        //     });\n        // } else {\n        //     // Valid\n        //     this.setState({\n        //         // errorMessage: \"\",\n        //         totalFrequencyOptionsChecked: totalFrequencyOptionsChecked\n        //     });\n        // }\n    }\n    render() {\n        const { errorMessage } = this.state;\n        // let errorMessage = this.state.errorMessage !== \"\" ? <p>{errorMessage}</p> : null;\n\n        // if(!this.props.isRecurringChecked){\n        //   return null;\n        // }\n\n        return (\n            <div className=\"frequency-option\">\n                <h4>Frequency Options</h4>\n                <div className=\"multi-selection-frequency-option\">\n                    <div>\n                        <p\n                            className={\n                                this.state.totalFrequencyOptionsChecked <\n                                this.state.props\n                                    ? \"errorMessageTransition\"\n                                    : \"hiddenDiv\"\n                            }\n                        >\n                            {errorMessage}\n                        </p>\n                        {this.state.frequencyOptions.map(option => (\n                            <Checkbox\n                                key={uniqueId()}\n                                value={option.name}\n                                isChecked={option.isChecked}\n                                onCheckboxChange={this.addFrequencyOptions}\n                                name={option.name}\n                            />\n                        ))}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass Frequency extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            frequencyList: [\n                { name: \"One-time\", isChecked: false },\n                { name: \"Recurring\", isChecked: false }\n            ],\n            frequencyChecked: [],\n            visible: false\n        };\n    }\n\n    addFrequency = option => {\n        const isChecked = option.target.checked;\n        const value = option.target.value;\n\n        this.setState(prevState => ({\n            frequencyList: prevState.frequencyList.map(option =>\n                option.name === value\n                    ? { ...option, isChecked: isChecked }\n                    : option\n            )\n        }));\n\n        if (isChecked) {\n            this.setState(prevState => ({\n                frequencyChecked: [...prevState.frequencyChecked, value]\n            }));\n        } else {\n            const newfrequencyChecked = this.state.frequencyChecked.filter(\n                option => option !== value\n            );\n            this.setState({ frequencyChecked: newfrequencyChecked });\n        }\n    };\n\n    handleClick = () => {\n        this.setState(prev => ({ visible: !prev.visible }));\n    };\n\n    render() {\n        const onetime = this.state.frequencyList[0];\n        const recurring = this.state.frequencyList[1];\n\n        // let renderOptions = recurring.isChecked ? <Frequency_options minCount={1} /> : null;\n        return (\n            <div className=\"frequency\">\n                <h4>Frequency</h4>\n                <span className=\"help-block\" id=\"helpBlock\">\n                    Choose which frequency option are available to the user\n                </span>\n                <div className=\"multi-selection-frequency\">\n                    <label\n                        key={uniqueId()}\n                        className=\"checkbox-inline\"\n                        htmlFor=\"frequency-selection\"\n                    >\n                        <input\n                            type=\"checkbox\"\n                            value={onetime.name}\n                            checked={onetime.isChecked}\n                            onChange={this.addFrequency}\n                        />\n                        {onetime.name}\n                    </label>\n                    <label\n                        key={uniqueId()}\n                        className=\"checkbox-inline\"\n                        htmlFor=\"frequency-selection\"\n                    >\n                        <input\n                            id=\"recurring\"\n                            type=\"checkbox\"\n                            value={recurring.name}\n                            checked={recurring.isChecked}\n                            onChange={this.addFrequency}\n                            onClick={this.handleClick}\n                        />\n                        {recurring.name}\n                    </label>\n                    <div\n                        className={\n                            this.state.visible\n                                ? \"frequencyTransition\"\n                                : \"hiddenDiv\"\n                        }\n                    >\n                        <FrequencyOptions minCount={1} />\n                    </div>\n                </div>\n            </div>\n        );\n\n        // if(recurring.isChecked){\n        //   return (\n        //     <div className=\"frequency\">\n        //       <h4>Frequency</h4>\n        //       <span className=\"help-block\" id=\"helpBlock\">Choose which frequency option are available to the user</span>\n        //       <div className=\"multi-selection-frequency\">\n        //         <label key={uniqueId()} className=\"checkbox-inline\" htmlFor=\"frequency-selection\">\n        //           <input type=\"checkbox\" value={onetime.name} checked={onetime.isChecked} onChange={this.addFrequency} />{onetime.name}\n        //         </label>\n        //         <label key={uniqueId()} className=\"checkbox-inline\" htmlFor=\"frequency-selection\">\n        //           <input type=\"checkbox\" value={recurring.name} checked={recurring.isChecked} onChange={this.addFrequency} onClick={this.renderOptions}/>{recurring.name}\n        //         </label>\n        //         <div className=\"frequencyTransition\">\n        //           <Frequency_options minCount={1} />\n        //         </div>\n        //       </div>\n        //     </div>\n        //   );\n        // }\n        // else{\n        //   return (\n        //     <div className=\"frequency\">\n        //       <h4>Frequency</h4>\n        //       <span className=\"help-block\" id=\"helpBlock\">Choose which frequency option are available to the user</span>\n        //       <div className=\"multi-selection-frequency\">\n        //         <label key={uniqueId()} className=\"checkbox-inline\" htmlFor=\"frequency-selection\">\n        //           <input type=\"checkbox\" value={onetime.name} checked={onetime.isChecked} onChange={this.addFrequency} />{onetime.name}\n        //         </label>\n        //         <label key={uniqueId()} className=\"checkbox-inline\" htmlFor=\"frequency-selection\">\n        //           <input type=\"checkbox\" value={recurring.name} checked={recurring.isChecked} onChange={this.addFrequency} onClick={this.renderOptions}/>{recurring.name}\n        //         </label>\n        //       </div>\n        //     </div>\n        //   );\n        // }\n\n        // const frequency_list = this.state.frequencyList.map((frequency) => (\n        //   if (frequency.name === \"Recurring\") {\n        //     <label key={uniqueId()} className=\"checkbox-inline\" htmlFor=\"fund-selection\">\n        //       <input type=\"checkbox\" value={frequency.name} checked={frequency.checked} onClick={this.renderOptions} onChange={this.addFrequency} />{frequency.name}\n        //     </label>\n        //   }\n        //   else{\n        //     <label key={uniqueId()} className=\"checkbox-inline\" htmlFor=\"fund-selection\">\n        //       <input type=\"checkbox\" value={frequency.name} checked={frequency.checked} onChange={this.addFrequency} />{frequency.name}\n        //     </label>\n        //   }\n        // ));\n    }\n}\n\nexport default Frequency;\n"]},"metadata":{},"sourceType":"module"}