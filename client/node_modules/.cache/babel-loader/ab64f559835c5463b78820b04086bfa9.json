{"ast":null,"code":"var aws = require(\"aws-sdk\");\n\nrequire(\"dotenv\").config(); // Configure dotenv to load in the .env file\n// Configure aws with your accessKeyId and your secretAccessKey\n\n\nconst express = require(\"express\");\n\nconst app = express();\n\nconst fs = require(\"fs\");\n\nconst fileType = require(\"file-type\");\n\nconst bluebird = require(\"bluebird\");\n\nconst multiparty = require(\"multiparty\");\n\naws.config.update({\n  region: \"us-east-1\",\n  // Put your aws region here\n  accessKeyId: \"AKIAXKCRRSD3GJHJE65C\",\n  secretAccessKey: \"0lBmJkb6hl885URDMhm+llobNp8WeYLjftjmiy02\"\n});\nAWS.config.setPromisesDependency(bluebird);\nvar s3 = new AWS.S3();\n\nconst uploads3 = async (prefix, bucketName, fileName) => {\n  var presignedPUTURL = await s3.getSignedUrl(\"putObject\", {\n    Bucket: bucketName,\n    Key: fileName,\n    //filename\n    Prefix: prefix,\n    Expires: 300 //time to expire in seconds\n\n  });\n  return presignedPUTURL;\n}; // abstracts function to upload a file returning a promise\n\n\nconst uploadFile = (buffer, name, type) => {\n  const params = {\n    ACL: \"public-read\",\n    Body: buffer,\n    Bucket: \"max-client-logos\",\n    ContentType: type.mime,\n    Key: \"\".concat(name, \".\").concat(type.ext)\n  };\n  return s3.upload(params).promise();\n}; // Define POST route\n\n\napp.post(\"/test-upload\", (request, response) => {\n  const form = new multiparty.Form();\n  form.parse(request, async (error, fields, files) => {\n    if (error) throw new Error(error);\n\n    try {\n      const path = files.file[0].path;\n      const buffer = fs.readFileSync(path);\n      const type = fileType(buffer);\n      const timestamp = Date.now().toString();\n      const fileName = \"bucketFolder/\".concat(timestamp, \"-lg\");\n      const data = await uploadFile(buffer, fileName, type);\n      return response.status(200).send(data);\n    } catch (error) {\n      return response.status(400).send(error);\n    }\n  });\n});\napp.listen(process.env.PORT || 3000);\nconsole.log(\"Server up and running...\"); // exports.sign_s3 = (bucketName, req, res) => {\n//     const s3 = new aws.S3(); // Create a new instance of S3\n//     const fileName = req.body.fileName;\n//     const fileType = req.body.fileType;\n//     // Set up the payload of what we are sending to the S3 api\n//     const s3Params = {\n//         Bucket: bucketName,\n//         Key: fileName,\n//         Expires: 500,\n//         ContentType: fileType\n//     };\n//     // Make a request to the S3 API to get a signed URL which we can use to upload our file\n//     s3.getSignedUrl(\"putObject\", s3Params, (err, data) => {\n//         if (err) {\n//             console.log(err);\n//             res.json({ success: false, error: err });\n//         }\n//         // Data payload of what we are sending back, the url of the signedRequest and a URL where we can access the content after its saved.\n//         const returnData = {\n//             signedRequest: data,\n//             url: `https://${bucketName}.s3.amazonaws.com/${fileName}`\n//         };\n//         // Send it all back\n//         res.json({ success: true, data: { returnData } });\n//     });\n// };","map":{"version":3,"sources":["/Users/kaiweiwu/Documents/page_designer/page-designer/src/logoUpload.js"],"names":["aws","require","config","express","app","fs","fileType","bluebird","multiparty","update","region","accessKeyId","secretAccessKey","AWS","setPromisesDependency","s3","S3","uploads3","prefix","bucketName","fileName","presignedPUTURL","getSignedUrl","Bucket","Key","Prefix","Expires","uploadFile","buffer","name","type","params","ACL","Body","ContentType","mime","ext","upload","promise","post","request","response","form","Form","parse","error","fields","files","Error","path","file","readFileSync","timestamp","Date","now","toString","data","status","send","listen","process","env","PORT","console","log"],"mappings":"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","sourcesContent":["var aws = require(\"aws-sdk\");\nrequire(\"dotenv\").config(); // Configure dotenv to load in the .env file\n// Configure aws with your accessKeyId and your secretAccessKey\n\nconst express = require(\"express\");\nconst app = express();\nconst fs = require(\"fs\");\nconst fileType = require(\"file-type\");\nconst bluebird = require(\"bluebird\");\nconst multiparty = require(\"multiparty\");\naws.config.update({\n    region: \"us-east-1\", // Put your aws region here\n    accessKeyId: \"AKIAXKCRRSD3GJHJE65C\",\n    secretAccessKey: \"0lBmJkb6hl885URDMhm+llobNp8WeYLjftjmiy02\"\n});\nAWS.config.setPromisesDependency(bluebird);\nvar s3 = new AWS.S3();\n\nconst uploads3 = async (prefix, bucketName, fileName) => {\n    var presignedPUTURL = await s3.getSignedUrl(\"putObject\", {\n        Bucket: bucketName,\n        Key: fileName, //filename\n        Prefix: prefix,\n        Expires: 300 //time to expire in seconds\n    });\n    return presignedPUTURL;\n};\n\n// abstracts function to upload a file returning a promise\nconst uploadFile = (buffer, name, type) => {\n    const params = {\n        ACL: \"public-read\",\n        Body: buffer,\n        Bucket: \"max-client-logos\",\n        ContentType: type.mime,\n        Key: `${name}.${type.ext}`\n    };\n    return s3.upload(params).promise();\n};\n\n// Define POST route\napp.post(\"/test-upload\", (request, response) => {\n    const form = new multiparty.Form();\n    form.parse(request, async (error, fields, files) => {\n        if (error) throw new Error(error);\n        try {\n            const path = files.file[0].path;\n            const buffer = fs.readFileSync(path);\n            const type = fileType(buffer);\n            const timestamp = Date.now().toString();\n            const fileName = `bucketFolder/${timestamp}-lg`;\n            const data = await uploadFile(buffer, fileName, type);\n            return response.status(200).send(data);\n        } catch (error) {\n            return response.status(400).send(error);\n        }\n    });\n});\n\napp.listen(process.env.PORT || 3000);\nconsole.log(\"Server up and running...\");\n\n// exports.sign_s3 = (bucketName, req, res) => {\n//     const s3 = new aws.S3(); // Create a new instance of S3\n//     const fileName = req.body.fileName;\n//     const fileType = req.body.fileType;\n//     // Set up the payload of what we are sending to the S3 api\n//     const s3Params = {\n//         Bucket: bucketName,\n//         Key: fileName,\n//         Expires: 500,\n//         ContentType: fileType\n//     };\n//     // Make a request to the S3 API to get a signed URL which we can use to upload our file\n//     s3.getSignedUrl(\"putObject\", s3Params, (err, data) => {\n//         if (err) {\n//             console.log(err);\n//             res.json({ success: false, error: err });\n//         }\n//         // Data payload of what we are sending back, the url of the signedRequest and a URL where we can access the content after its saved.\n//         const returnData = {\n//             signedRequest: data,\n//             url: `https://${bucketName}.s3.amazonaws.com/${fileName}`\n//         };\n//         // Send it all back\n//         res.json({ success: true, data: { returnData } });\n//     });\n// };\n"]},"metadata":{},"sourceType":"module"}