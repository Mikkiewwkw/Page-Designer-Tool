{"ast":null,"code":"import React from \"react\";\n\nconst downloadS3 = async function (prefix, bucketName) {\n  var AWS = require(\"aws-sdk\");\n\n  AWS.config.update({\n    accessKeyId: \"AKIAXKCRRSD3GJHJE65C\",\n    secretAccessKey: \"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\",\n    region: \"us-west-2\"\n  });\n  const s3 = new AWS.S3();\n  var allKeys = [];\n  const params = {\n    Bucket: bucketName,\n    Delimiter: \"/\",\n    Prefix: prefix,\n    StartAfter: prefix\n  };\n\n  function listAllKeys() {\n    s3.listObjectsV2(params, function (err, data) {\n      if (err) {\n        console.log(err, err.stack);\n      } else {\n        var contents = data.Contents;\n        contents.forEach(function (content) {\n          allKeys.push(content.Key);\n          console.log(\"1\", allKeys);\n        });\n\n        if (data.IsTruncated) {\n          params.ContinuationToken = data.NextContinuationToken;\n          console.log(\"There are more keys coming up\");\n          listAllKeys();\n        }\n      }\n    });\n  }\n\n  await listAllKeys(); // console.log(allKeys.length);\n  // console.log(\"yes\", allKeys[0]);\n  // var nodesArray = [].slice.call(allKeys);\n  // console.log(typeof nodesArray);\n  // console.log(\"elements\", nodesArray);\n  // allKeys.map(key => s3.getSignedUrl('getObject', {Bucket:bucketName,Key:key}, function (err, url) {\n  //     return url;\n  // });\n  //\n  //   var urlparams = {Bucket: 'max-client-logos', Key: allKeys[0]};\n  //   s3.getSignedUrl('getObject', urlparams, function (err, url) {\n  //     console.log('Your generated pre-signed URL is', url);\n  // });\n  //   let url = allKeys.map((key) => (s3.getSignedUrl('getObject', {\n  //     Bucket:\"max-client-logos\",\n  //     Key:key\n  //   }, function(err, url) {\n  //     console.log('Your generated pre-signed URL is', url);\n  //   }\n  // )));\n\n  return allKeys;\n};\n\nexport default downloadS3;","map":{"version":3,"sources":["/Users/kaiweiwu/Documents/page_designer/page-designer/src/s3config.js"],"names":["React","downloadS3","prefix","bucketName","AWS","require","config","update","accessKeyId","secretAccessKey","region","s3","S3","allKeys","params","Bucket","Delimiter","Prefix","StartAfter","listAllKeys","listObjectsV2","err","data","console","log","stack","contents","Contents","forEach","content","push","Key","IsTruncated","ContinuationToken","NextContinuationToken"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,UAAU,GAAG,gBAAeC,MAAf,EAAuBC,UAAvB,EAAmC;AAClD,MAAIC,GAAG,GAAGC,OAAO,CAAC,SAAD,CAAjB;;AACAD,EAAAA,GAAG,CAACE,MAAJ,CAAWC,MAAX,CAAkB;AACdC,IAAAA,WAAW,EAAE,sBADC;AAEdC,IAAAA,eAAe,EAAE,0CAFH;AAGdC,IAAAA,MAAM,EAAE;AAHM,GAAlB;AAKA,QAAMC,EAAE,GAAG,IAAIP,GAAG,CAACQ,EAAR,EAAX;AAEA,MAAIC,OAAO,GAAG,EAAd;AACA,QAAMC,MAAM,GAAG;AACXC,IAAAA,MAAM,EAAEZ,UADG;AAEXa,IAAAA,SAAS,EAAE,GAFA;AAGXC,IAAAA,MAAM,EAAEf,MAHG;AAIXgB,IAAAA,UAAU,EAAEhB;AAJD,GAAf;;AAOA,WAASiB,WAAT,GAAuB;AACnBR,IAAAA,EAAE,CAACS,aAAH,CAAiBN,MAAjB,EAAyB,UAASO,GAAT,EAAcC,IAAd,EAAoB;AACzC,UAAID,GAAJ,EAAS;AACLE,QAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ,EAAiBA,GAAG,CAACI,KAArB;AACH,OAFD,MAEO;AACH,YAAIC,QAAQ,GAAGJ,IAAI,CAACK,QAApB;AACAD,QAAAA,QAAQ,CAACE,OAAT,CAAiB,UAASC,OAAT,EAAkB;AAC/BhB,UAAAA,OAAO,CAACiB,IAAR,CAAaD,OAAO,CAACE,GAArB;AACAR,UAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ,EAAiBX,OAAjB;AACH,SAHD;;AAKA,YAAIS,IAAI,CAACU,WAAT,EAAsB;AAClBlB,UAAAA,MAAM,CAACmB,iBAAP,GAA2BX,IAAI,CAACY,qBAAhC;AACAX,UAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AACAL,UAAAA,WAAW;AACd;AACJ;AACJ,KAhBD;AAiBH;;AAED,QAAMA,WAAW,EAAjB,CArCkD,CAsClD;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAON,OAAP;AACH,CA5DD;;AA8DA,eAAeZ,UAAf","sourcesContent":["import React from \"react\";\n\nconst downloadS3 = async function(prefix, bucketName) {\n    var AWS = require(\"aws-sdk\");\n    AWS.config.update({\n        accessKeyId: \"AKIAXKCRRSD3GJHJE65C\",\n        secretAccessKey: \"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\",\n        region: \"us-west-2\"\n    });\n    const s3 = new AWS.S3();\n\n    var allKeys = [];\n    const params = {\n        Bucket: bucketName,\n        Delimiter: \"/\",\n        Prefix: prefix,\n        StartAfter: prefix\n    };\n\n    function listAllKeys() {\n        s3.listObjectsV2(params, function(err, data) {\n            if (err) {\n                console.log(err, err.stack);\n            } else {\n                var contents = data.Contents;\n                contents.forEach(function(content) {\n                    allKeys.push(content.Key);\n                    console.log(\"1\", allKeys);\n                });\n\n                if (data.IsTruncated) {\n                    params.ContinuationToken = data.NextContinuationToken;\n                    console.log(\"There are more keys coming up\");\n                    listAllKeys();\n                }\n            }\n        });\n    }\n\n    await listAllKeys();\n    // console.log(allKeys.length);\n    // console.log(\"yes\", allKeys[0]);\n    // var nodesArray = [].slice.call(allKeys);\n    // console.log(typeof nodesArray);\n    // console.log(\"elements\", nodesArray);\n\n    // allKeys.map(key => s3.getSignedUrl('getObject', {Bucket:bucketName,Key:key}, function (err, url) {\n    //     return url;\n    // });\n    //\n    //   var urlparams = {Bucket: 'max-client-logos', Key: allKeys[0]};\n    //   s3.getSignedUrl('getObject', urlparams, function (err, url) {\n    //     console.log('Your generated pre-signed URL is', url);\n    // });\n    //   let url = allKeys.map((key) => (s3.getSignedUrl('getObject', {\n    //     Bucket:\"max-client-logos\",\n    //     Key:key\n    //   }, function(err, url) {\n    //     console.log('Your generated pre-signed URL is', url);\n    //   }\n    // )));\n    return allKeys;\n};\n\nexport default downloadS3;\n"]},"metadata":{},"sourceType":"module"}