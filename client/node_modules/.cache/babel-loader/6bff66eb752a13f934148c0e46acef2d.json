{"ast":null,"code":"var _jsxFileName = \"/Users/kaiweiwu/Documents/page_designer/client/src/Logo.js\";\nimport React from \"react\";\nimport uniqueId from \"lodash/uniqueId\";\nimport downloadS3 from \"./s3config\";\nimport S3FileUpload from \"react-s3\";\nimport { uploadFile } from \"react-s3\";\nimport axios from \"axios\";\nimport Dropzone from \"./Dropzone\";\n\nrequire(\"dotenv\").config(); //need this\n// s3.getSignedUrl('getObject', params, function (err, url) {\n//     console.log('Your generated pre-signed URL is', url);\n// });\n\n\nvar AWS = require(\"aws-sdk\"); // var keys = [\"194/194-logo-black.png\", \"194/kitty.jpg\"];\n// var list = [];\n\n\nAWS.config.update({\n  accessKeyId: \"AKIAXKCRRSD3GJHJE65C\",\n  secretAccessKey: \"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\",\n  region: \"us-west-2\"\n});\nconst s3 = new AWS.S3(); // var urlparams = { Bucket: \"max-client-logos\", Key: keys[0] };\n// s3.getSignedUrl(\"getObject\", urlparams, function(err, url) {\n//     list.push(url);\n//     console.log(\"Your generated pre-signed URL is\", url);\n// });\n// urlparams = { Bucket: \"max-client-logos\", Key: keys[1] };\n// var hapi = s3.getSignedUrl(\"getObject\", urlparams);\n// list.push(hapi);\n//\n// function createAllUrl(allkey) {\n//     let allURL = [];\n//     const length = allkey.length;\n//     console.log(length);\n//     for (let i = 0; i < length; i++) {\n//         console.log(\"im a dog\");\n//         let params = { Bucket: \"max-client-logos\", Key: allkey[i] };\n//         let url = s3.getSignedUrl(\"getObject\", params);\n//         allURL.push(url);\n//     }\n//     console.log(allURL);\n//     return allURL;\n// }\n// createAllUrl(keys);\n\nclass Logo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = option => {\n      const value = option.target.value;\n      this.setState({\n        choice: value\n      });\n    };\n\n    this.getBackgroundColor = () => {\n      const client_code = this.props.clientCode;\n      const pageId = this.props.pageId;\n      const field = \"style.main-background-color\";\n      this.setState({\n        isLoading: true\n      });\n      let newUrl = url + \"?client_code=\" + client_code + \"&page_id=\" + pageId + \"&field=\" + field;\n      fetch(newUrl, {\n        method: \"GET\",\n        headers: headers,\n        mode: \"cors\"\n      }).then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw new Error(\"Something went wrong ...\");\n        }\n      }).then(data => {\n        this.setState({\n          backgroundColor: data.value\n        });\n      }).catch(error => this.setState({\n        error: error,\n        isLoading: false\n      }));\n    };\n\n    this.handleClick = () => {\n      this.setState(prevState => ({\n        showDropZone: !prevState.showDropZone\n      }));\n    };\n\n    this.state = {\n      showDropZone: false,\n      backgroundColor: null,\n      choice: \"\",\n      options: [],\n      error: null,\n      isLoading: false //Need to somehow set up the initial state so that the user can see the current stage of the logo\n\n    }; // this.getKeys = this.getKeys.bind(this);\n  }\n\n  //\n  // createAllUrl = allkey => {\n  //     let allURL = [];\n  //     const length = allkey.length;\n  //     for (let i = 0; i < length; i++) {\n  //         console.log(\"im a dog\");\n  //         let params = {\n  //             Bucket: this.props.bucketName,\n  //             key: allkey[\"index\" === i][\"Key\"]\n  //         };\n  //         let url = s3.getSignedUrl(\"getObject\", params);\n  //         allURL.push(url);\n  //         console.log(i, allURL);\n  //     }\n  //     return allURL;\n  // };\n  async componentDidMount() {\n    this.setState({\n      isLoading: true\n    });\n\n    try {\n      const result = await downloadS3(this.props.prefix, this.props.bucketName); // console.log(\"allkey\", result);\n\n      await this.getBackgroundColor();\n      this.setState({\n        options: result,\n        isLoading: false\n      });\n    } catch (error) {\n      this.setState({\n        error: error,\n        isLoading: false\n      });\n    }\n  }\n\n  render() {\n    if (this.state.error) {\n      return React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, this.state.error.message);\n    }\n\n    if (this.state.isLoading) {\n      return React.createElement(\"div\", {\n        className: \"loader\",\n        id: \"loader-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"sr-only\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, \"Loading...\"));\n    }\n\n    var list = this.state.options;\n    const allURL = list.map(key => s3.getSignedUrl(\"getObject\", {\n      Bucket: this.props.bucketName,\n      Key: key,\n      Expires: 300\n    }));\n    const logoList = allURL.map(url => React.createElement(\"div\", {\n      key: uniqueId(),\n      className: \"container col-md-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      className: \"radio-inline\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"radio\",\n      name: \"inlineRadioOptions\",\n      value: url,\n      onChange: this.handleChnage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      className: \"logoImage\",\n      src: url,\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }))));\n    const backgroundColor = {\n      background: this.state.backgroundColor\n    };\n    return React.createElement(\"div\", {\n      id: \"logo\",\n      className: \"logo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, \"Logo\"), React.createElement(\"span\", {\n      className: \"help-block\",\n      id: \"helpBlock\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, \"Choose page logo\"), React.createElement(\"div\", {\n      className: \"logo-options\",\n      style: backgroundColor,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, logoList), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }), React.createElement(\"form\", {\n      className: \"logo-upload form-group row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-sm-10 col-md-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      name: \"button\",\n      className: \"btn btn-primary\",\n      type: \"submit\",\n      onClick: this.handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, \"Add a new logo\"))), React.createElement(Dropzone, {\n      prefix: this.props.prefix,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Logo;","map":{"version":3,"sources":["/Users/kaiweiwu/Documents/page_designer/client/src/Logo.js"],"names":["React","uniqueId","downloadS3","S3FileUpload","uploadFile","axios","Dropzone","require","config","AWS","update","accessKeyId","secretAccessKey","region","s3","S3","Logo","Component","constructor","props","handleChange","option","value","target","setState","choice","getBackgroundColor","client_code","clientCode","pageId","field","isLoading","newUrl","url","fetch","method","headers","mode","then","response","ok","json","Error","data","backgroundColor","catch","error","handleClick","prevState","showDropZone","state","options","componentDidMount","result","prefix","bucketName","render","message","list","allURL","map","key","getSignedUrl","Bucket","Key","Expires","logoList","handleChnage","background"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport uniqueId from \"lodash/uniqueId\";\nimport downloadS3 from \"./s3config\";\nimport S3FileUpload from \"react-s3\";\nimport { uploadFile } from \"react-s3\";\nimport axios from \"axios\";\nimport Dropzone from \"./Dropzone\";\nrequire(\"dotenv\").config(); //need this\n// s3.getSignedUrl('getObject', params, function (err, url) {\n//     console.log('Your generated pre-signed URL is', url);\n// });\nvar AWS = require(\"aws-sdk\");\n// var keys = [\"194/194-logo-black.png\", \"194/kitty.jpg\"];\n// var list = [];\nAWS.config.update({\n    accessKeyId: \"AKIAXKCRRSD3GJHJE65C\",\n    secretAccessKey: \"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\",\n    region: \"us-west-2\"\n});\nconst s3 = new AWS.S3();\n// var urlparams = { Bucket: \"max-client-logos\", Key: keys[0] };\n// s3.getSignedUrl(\"getObject\", urlparams, function(err, url) {\n//     list.push(url);\n//     console.log(\"Your generated pre-signed URL is\", url);\n// });\n// urlparams = { Bucket: \"max-client-logos\", Key: keys[1] };\n// var hapi = s3.getSignedUrl(\"getObject\", urlparams);\n// list.push(hapi);\n//\n// function createAllUrl(allkey) {\n//     let allURL = [];\n//     const length = allkey.length;\n//     console.log(length);\n//     for (let i = 0; i < length; i++) {\n//         console.log(\"im a dog\");\n//         let params = { Bucket: \"max-client-logos\", Key: allkey[i] };\n//         let url = s3.getSignedUrl(\"getObject\", params);\n//         allURL.push(url);\n//     }\n//     console.log(allURL);\n//     return allURL;\n// }\n// createAllUrl(keys);\n\nclass Logo extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            showDropZone: false,\n            backgroundColor: null,\n            choice: \"\",\n            options: [],\n            error: null,\n            isLoading: false //Need to somehow set up the initial state so that the user can see the current stage of the logo\n        };\n        // this.getKeys = this.getKeys.bind(this);\n    }\n\n    handleChange = option => {\n        const value = option.target.value;\n        this.setState({ choice: value });\n    };\n    //\n\n    // createAllUrl = allkey => {\n    //     let allURL = [];\n    //     const length = allkey.length;\n    //     for (let i = 0; i < length; i++) {\n    //         console.log(\"im a dog\");\n    //         let params = {\n    //             Bucket: this.props.bucketName,\n    //             key: allkey[\"index\" === i][\"Key\"]\n    //         };\n    //         let url = s3.getSignedUrl(\"getObject\", params);\n    //         allURL.push(url);\n    //         console.log(i, allURL);\n    //     }\n    //     return allURL;\n    // };\n    async componentDidMount() {\n        this.setState({ isLoading: true });\n        try {\n            const result = await downloadS3(\n                this.props.prefix,\n                this.props.bucketName\n            );\n            // console.log(\"allkey\", result);\n            await this.getBackgroundColor();\n            this.setState({ options: result, isLoading: false });\n        } catch (error) {\n            this.setState({ error: error, isLoading: false });\n        }\n    }\n\n    getBackgroundColor = () => {\n        const client_code = this.props.clientCode;\n        const pageId = this.props.pageId;\n        const field = \"style.main-background-color\";\n        this.setState({ isLoading: true });\n        let newUrl =\n            url +\n            \"?client_code=\" +\n            client_code +\n            \"&page_id=\" +\n            pageId +\n            \"&field=\" +\n            field;\n        fetch(newUrl, {\n            method: \"GET\",\n            headers: headers,\n            mode: \"cors\"\n        })\n            .then(response => {\n                if (response.ok) {\n                    return response.json();\n                } else {\n                    throw new Error(\"Something went wrong ...\");\n                }\n            })\n            .then(data => {\n                this.setState({ backgroundColor: data.value });\n            })\n            .catch(error => this.setState({ error: error, isLoading: false }));\n    };\n\n    handleClick = () => {\n        this.setState(prevState => ({ showDropZone: !prevState.showDropZone }));\n    };\n\n    render() {\n        if (this.state.error) {\n            return <p>{this.state.error.message}</p>;\n        }\n        if (this.state.isLoading) {\n            return (\n                <div className=\"loader\" id=\"loader-1\">\n                    <span className=\"sr-only\">Loading...</span>\n                </div>\n            );\n        }\n\n        var list = this.state.options;\n        const allURL = list.map(key =>\n            s3.getSignedUrl(\"getObject\", {\n                Bucket: this.props.bucketName,\n                Key: key,\n                Expires: 300\n            })\n        );\n\n        const logoList = allURL.map(url => (\n            <div key={uniqueId()} className=\"container col-md-12\">\n                <label className=\"radio-inline\">\n                    <input\n                        type=\"radio\"\n                        name=\"inlineRadioOptions\"\n                        value={url}\n                        onChange={this.handleChnage}\n                    />\n                    <img className=\"logoImage\" src={url} alt=\"\" />\n                </label>\n            </div>\n        ));\n\n        const backgroundColor = {\n            background: this.state.backgroundColor\n        };\n        return (\n            <div id=\"logo\" className=\"logo\">\n                <h3>Logo</h3>\n                <span className=\"help-block\" id=\"helpBlock\">\n                    Choose page logo\n                </span>\n                <div className=\"logo-options\" style={backgroundColor}>\n                    {logoList}\n                </div>\n                <br />\n                <form className=\"logo-upload form-group row\">\n                    <div className=\"col-sm-10 col-md-12\">\n                        <button\n                            name=\"button\"\n                            className=\"btn btn-primary\"\n                            type=\"submit\"\n                            onClick={this.handleClick}\n                        >\n                            Add a new logo\n                        </button>\n                    </div>\n                </form>\n                <Dropzone prefix={this.props.prefix} />\n            </div>\n        );\n    }\n}\n\nexport default Logo;\n"]},"metadata":{},"sourceType":"module"}