{"ast":null,"code":"import _slicedToArray from \"/Users/kaiweiwu/Documents/page_designer/page-designer/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/kaiweiwu/Documents/page_designer/page-designer/src/Dropzone.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport { ListGroup, ListGroupItem, Button } from \"react-bootstrap\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\"; // import uniqueId from \"lodash/uniqueId\";\n\nconst getColor = props => {\n  if (props.isDragAccept) {\n    return \"#00e676\";\n  }\n\n  if (props.isDragReject) {\n    return \"#ff1744\";\n  }\n\n  if (props.isDragActive) {\n    return \"#2196f3\";\n  }\n\n  return \"#eeeeee\";\n};\n\nconst thumbsContainer = {\n  display: \"flex\",\n  flexDirection: \"row\",\n  flexWrap: \"wrap\",\n  marginTop: 16\n};\nconst thumb = {\n  display: \"inline-flex\",\n  borderRadius: 2,\n  border: \"1px solid #eaeaea\",\n  marginBottom: 8,\n  marginRight: 8,\n  width: 100,\n  height: 100,\n  padding: 4,\n  boxSizing: \"border-box\"\n};\nconst thumbInner = {\n  display: \"flex\",\n  minWidth: 0,\n  overflow: \"hidden\"\n};\nconst img = {\n  display: \"block\",\n  width: \"auto\",\n  height: \"100%\"\n};\n\nfunction Dropzone(props) {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        files = _useState2[0],\n        setFiles = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        showRemove = _useState4[0],\n        setShowRemove = _useState4[1];\n\n  const _useDropzone = useDropzone({\n    multiple: true,\n    accept: \"image/*\",\n    onDrop: acceptedFiles => {\n      console.log(acceptedFiles);\n      setFiles(acceptedFiles.map(file => Object.assign(file, {\n        preview: URL.createObjectURL(file)\n      })));\n      setShowRemove(true);\n    }\n  }),\n        getRootProps = _useDropzone.getRootProps,\n        getInputProps = _useDropzone.getInputProps,\n        isDragActive = _useDropzone.isDragActive,\n        isDragReject = _useDropzone.isDragReject; //with inner or not? inner will shrink the size\n\n\n  const thumbs = React.createElement(\"div\", {\n    style: thumbsContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, files.map(file => React.createElement(CSSTransition, {\n    key: file.path,\n    timeout: 500,\n    classNames: \"item\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: thumb,\n    key: file.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: thumbInner,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: file.preview,\n    alt: \"\",\n    style: img,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  })))))); // const thumbs = files.map(file => (\n  //     <div style={thumb} key={file.name}>\n  //         <img src={file.preview} style={img} />\n  //     </div>\n  // ));\n\n  const removefile = name => () => {\n    console.log(\"hi there\");\n    const newFiles = files.filter(item => item.name !== name);\n    setFiles(newFiles);\n\n    if (newFiles.length === 0) {\n      setShowRemove(false);\n    }\n  };\n\n  const removeAll = () => {\n    setFiles([]);\n    setShowRemove(false);\n  };\n\n  const uploadLogo = () => {};\n\n  useEffect(() => () => {\n    // Make sure to revoke the data uris to avoid memory leaks\n    files.forEach(file => URL.revokeObjectURL(file.preview));\n  }, [files]);\n  const acceptedFilesItems = React.createElement(ListGroup, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, files.map(file => React.createElement(ListGroupItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, file.path, \" - \", file.size, \" bytes\", \" \", React.createElement(Button, {\n    size: \"sm\",\n    className: \"remove-btn\",\n    \"aria-label\": \"Close\",\n    variant: \"danger\",\n    onClick: removefile(file.name),\n    value: file.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, \"\\xD7\")))); // <em>(Only *.jpeg and *.png images will be accepted)</em>);\n\n  const dragInActiveText = React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, \"Drag and drop some files here, or click to select files\"), React.createElement(\"em\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, \"(Only *.jpeg and *.png images will be accepted)\"));\n  const dragActiveText = React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, \"Drop it like hot\");\n  const dragRejecttedText = React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, \"File type not accepted\");\n  return React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, React.createElement(\"div\", Object.assign({}, getRootProps({\n    className: \"dropzone\"\n  }), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }), React.createElement(\"input\", Object.assign({}, getInputProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  })), !isDragActive && dragInActiveText, isDragActive && !isDragReject && dragActiveText, isDragReject && dragRejecttedText), React.createElement(CSSTransition, {\n    in: showRemove,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, \"timeout=\", 300, \"classNames=\\\"item\\\" onEnter=\", () => setShowRemove(true), \"onExited=\", () => setShowRemove(false), React.createElement(\"aside\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, thumbs, acceptedFilesItems), showRemove && React.createElement(Button, {\n    variant: \"danger\",\n    className: \"remove-btn\",\n    onClick: removeAll,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, \"Remove All\"), files.length > 0 && React.createElement(Button, {\n    className: \"save-btn pull-right\",\n    onClick: uploadLogo,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }, \"Save\")));\n}\n\nexport default Dropzone;","map":{"version":3,"sources":["/Users/kaiweiwu/Documents/page_designer/page-designer/src/Dropzone.js"],"names":["React","useEffect","useState","useDropzone","ListGroup","ListGroupItem","Button","CSSTransition","TransitionGroup","getColor","props","isDragAccept","isDragReject","isDragActive","thumbsContainer","display","flexDirection","flexWrap","marginTop","thumb","borderRadius","border","marginBottom","marginRight","width","height","padding","boxSizing","thumbInner","minWidth","overflow","img","Dropzone","files","setFiles","showRemove","setShowRemove","multiple","accept","onDrop","acceptedFiles","console","log","map","file","Object","assign","preview","URL","createObjectURL","getRootProps","getInputProps","thumbs","path","name","removefile","newFiles","filter","item","length","removeAll","uploadLogo","forEach","revokeObjectURL","acceptedFilesItems","size","dragInActiveText","dragActiveText","dragRejecttedText","className"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport { ListGroup, ListGroupItem, Button } from \"react-bootstrap\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\n// import uniqueId from \"lodash/uniqueId\";\n\nconst getColor = props => {\n    if (props.isDragAccept) {\n        return \"#00e676\";\n    }\n    if (props.isDragReject) {\n        return \"#ff1744\";\n    }\n    if (props.isDragActive) {\n        return \"#2196f3\";\n    }\n    return \"#eeeeee\";\n};\n\nconst thumbsContainer = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexWrap: \"wrap\",\n    marginTop: 16\n};\n\nconst thumb = {\n    display: \"inline-flex\",\n    borderRadius: 2,\n    border: \"1px solid #eaeaea\",\n    marginBottom: 8,\n    marginRight: 8,\n    width: 100,\n    height: 100,\n    padding: 4,\n    boxSizing: \"border-box\"\n};\n\nconst thumbInner = {\n    display: \"flex\",\n    minWidth: 0,\n    overflow: \"hidden\"\n};\n\nconst img = {\n    display: \"block\",\n    width: \"auto\",\n    height: \"100%\"\n};\n\nfunction Dropzone(props) {\n    const [files, setFiles] = useState([]);\n    const [showRemove, setShowRemove] = useState(false);\n    const {\n        getRootProps,\n        getInputProps,\n        isDragActive,\n        isDragReject\n    } = useDropzone({\n        multiple: true,\n        accept: \"image/*\",\n        onDrop: acceptedFiles => {\n            console.log(acceptedFiles);\n            setFiles(\n                acceptedFiles.map(file =>\n                    Object.assign(file, {\n                        preview: URL.createObjectURL(file)\n                    })\n                )\n            );\n            setShowRemove(true);\n        }\n    });\n\n    //with inner or not? inner will shrink the size\n    const thumbs = (\n        <div style={thumbsContainer}>\n            {files.map(file => (\n                <CSSTransition key={file.path} timeout={500} classNames=\"item\">\n                    <div style={thumb} key={file.name}>\n                        <div style={thumbInner}>\n                            <img src={file.preview} alt=\"\" style={img} />\n                        </div>\n                    </div>\n                </CSSTransition>\n            ))}\n        </div>\n    );\n\n    // const thumbs = files.map(file => (\n    //     <div style={thumb} key={file.name}>\n    //         <img src={file.preview} style={img} />\n    //     </div>\n    // ));\n\n    const removefile = name => () => {\n        console.log(\"hi there\");\n        const newFiles = files.filter(item => item.name !== name);\n        setFiles(newFiles);\n        if (newFiles.length === 0) {\n            setShowRemove(false);\n        }\n    };\n\n    const removeAll = () => {\n        setFiles([]);\n        setShowRemove(false);\n    };\n\n    const uploadLogo = () => {};\n\n    useEffect(\n        () => () => {\n            // Make sure to revoke the data uris to avoid memory leaks\n            files.forEach(file => URL.revokeObjectURL(file.preview));\n        },\n        [files]\n    );\n\n    const acceptedFilesItems = (\n        <ListGroup>\n            {files.map(file => (\n                <ListGroupItem>\n                    {file.path} - {file.size} bytes{\" \"}\n                    <Button\n                        size=\"sm\"\n                        className=\"remove-btn\"\n                        aria-label=\"Close\"\n                        variant=\"danger\"\n                        onClick={removefile(file.name)}\n                        value={file.name}\n                    >\n                        &times;\n                    </Button>\n                </ListGroupItem>\n            ))}\n        </ListGroup>\n    );\n\n    // <em>(Only *.jpeg and *.png images will be accepted)</em>);\n    const dragInActiveText = (\n        <React.Fragment>\n            <p>Drag and drop some files here, or click to select files</p>\n            <em>(Only *.jpeg and *.png images will be accepted)</em>\n        </React.Fragment>\n    );\n    const dragActiveText = <p>Drop it like hot</p>;\n    const dragRejecttedText = <p>File type not accepted</p>;\n\n    return (\n        <div className=\"container\">\n            <div\n                {...getRootProps({\n                    className: \"dropzone\"\n                })}\n            >\n                <input {...getInputProps()} />\n                {!isDragActive && dragInActiveText}\n                {isDragActive && !isDragReject && dragActiveText}\n                {isDragReject && dragRejecttedText}\n            </div>\n            <CSSTransition in={showRemove}>\n                timeout={300}\n                classNames=\"item\" onEnter={() => setShowRemove(true)}\n                onExited={() => setShowRemove(false)}\n                <aside>\n                    {thumbs}\n                    {acceptedFilesItems}\n                </aside>\n                {showRemove && (\n                    <Button\n                        variant=\"danger\"\n                        className=\"remove-btn\"\n                        onClick={removeAll}\n                    >\n                        Remove All\n                    </Button>\n                )}\n                {files.length > 0 && (\n                    <Button\n                        className=\"save-btn pull-right\"\n                        onClick={uploadLogo}\n                    >\n                        Save\n                    </Button>\n                )}\n            </CSSTransition>\n        </div>\n    );\n}\n\nexport default Dropzone;\n"]},"metadata":{},"sourceType":"module"}