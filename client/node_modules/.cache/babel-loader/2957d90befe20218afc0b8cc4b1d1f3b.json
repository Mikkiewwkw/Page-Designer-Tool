{"ast":null,"code":"import _slicedToArray from \"/Users/kaiweiwu/Documents/page_designer/page-designer/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/kaiweiwu/Documents/page_designer/page-designer/src/Dropzone.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nconst thumbsContainer = {\n  display: \"flex\",\n  flexDirection: \"row\",\n  flexWrap: \"wrap\",\n  marginTop: 16\n};\nconst thumb = {\n  display: \"inline-flex\",\n  borderRadius: 2,\n  border: \"1px solid #eaeaea\",\n  marginBottom: 8,\n  marginRight: 8,\n  width: 100,\n  height: 100,\n  padding: 4,\n  boxSizing: \"border-box\"\n};\nconst thumbInner = {\n  display: \"flex\",\n  minWidth: 0,\n  overflow: \"hidden\"\n};\nconst img = {\n  display: \"block\",\n  width: \"auto\",\n  height: \"100%\"\n};\n\nfunction Dropzone(props) {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        files = _useState2[0],\n        setFiles = _useState2[1];\n\n  const _useDropzone = useDropzone({\n    accept: \"image/*\",\n    onDrop: acceptedFiles => {\n      setFiles(acceptedFiles.map(file => Object.assign(file, {\n        preview: URL.createObjectURL(file)\n      })));\n    }\n  }),\n        getRootProps = _useDropzone.getRootProps,\n        getInputProps = _useDropzone.getInputProps;\n\n  const thumbs = files.map(file => React.createElement(\"div\", {\n    style: thumb,\n    key: file.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: thumbInner,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: file.preview,\n    style: img,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }))));\n  useEffect(() => () => {\n    // Make sure to revoke the data uris to avoid memory leaks\n    files.forEach(file => URL.revokeObjectURL(file.preview));\n  }, [files]);\n  const acceptedFilesItems = acceptedFiles.map(file => React.createElement(\"li\", {\n    key: file.path,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, file.path, \" - \", file.size, \" bytes\"));\n  return React.createElement(\"section\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(\"div\", Object.assign({}, getRootProps({\n    className: \"dropzone\"\n  }), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }), React.createElement(\"input\", Object.assign({}, getInputProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  })), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, \"Drag and drop some files here, or click to select files\"), React.createElement(\"em\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, \"(Only *.jpeg and *.png images will be accepted)\")), React.createElement(\"aside\", {\n    style: thumbsContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, thumbs, React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }), acceptedFilesItems));\n}\n\nexport default Dropzone;","map":{"version":3,"sources":["/Users/kaiweiwu/Documents/page_designer/page-designer/src/Dropzone.js"],"names":["React","useEffect","useState","useDropzone","thumbsContainer","display","flexDirection","flexWrap","marginTop","thumb","borderRadius","border","marginBottom","marginRight","width","height","padding","boxSizing","thumbInner","minWidth","overflow","img","Dropzone","props","files","setFiles","accept","onDrop","acceptedFiles","map","file","Object","assign","preview","URL","createObjectURL","getRootProps","getInputProps","thumbs","name","forEach","revokeObjectURL","acceptedFilesItems","path","size","className"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\n\nconst thumbsContainer = {\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexWrap: \"wrap\",\n    marginTop: 16\n};\n\nconst thumb = {\n    display: \"inline-flex\",\n    borderRadius: 2,\n    border: \"1px solid #eaeaea\",\n    marginBottom: 8,\n    marginRight: 8,\n    width: 100,\n    height: 100,\n    padding: 4,\n    boxSizing: \"border-box\"\n};\n\nconst thumbInner = {\n    display: \"flex\",\n    minWidth: 0,\n    overflow: \"hidden\"\n};\n\nconst img = {\n    display: \"block\",\n    width: \"auto\",\n    height: \"100%\"\n};\n\nfunction Dropzone(props) {\n    const [files, setFiles] = useState([]);\n    const { getRootProps, getInputProps } = useDropzone({\n        accept: \"image/*\",\n        onDrop: acceptedFiles => {\n            setFiles(\n                acceptedFiles.map(file =>\n                    Object.assign(file, {\n                        preview: URL.createObjectURL(file)\n                    })\n                )\n            );\n        }\n    });\n\n    const thumbs = files.map(file => (\n        <div style={thumb} key={file.name}>\n            <div style={thumbInner}>\n                <img src={file.preview} style={img} />\n            </div>\n        </div>\n    ));\n\n    useEffect(\n        () => () => {\n            // Make sure to revoke the data uris to avoid memory leaks\n            files.forEach(file => URL.revokeObjectURL(file.preview));\n        },\n        [files]\n    );\n\n    const acceptedFilesItems = acceptedFiles.map(file => (\n        <li key={file.path}>\n            {file.path} - {file.size} bytes\n        </li>\n    ));\n\n    return (\n        <section className=\"container\">\n            <div {...getRootProps({ className: \"dropzone\" })}>\n                <input {...getInputProps()} />\n                <p>Drag and drop some files here, or click to select files</p>\n                <em>(Only *.jpeg and *.png images will be accepted)</em>\n            </div>\n            <aside style={thumbsContainer}>\n                {thumbs}\n                <br />\n                {acceptedFilesItems}\n            </aside>\n        </section>\n    );\n}\n\nexport default Dropzone;\n"]},"metadata":{},"sourceType":"module"}