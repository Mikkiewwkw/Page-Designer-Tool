{"ast":null,"code":"var AWS = require('aws-sdk');\n\nvar allKeys = [];\n\nconst downloadS3 = (prefix, bucketName) => {\n  const s3 = new AWS.S3();\n  s3.config.update({\n    accessKeyId: 'AKIAXKCRRSD3GJHJE65C',\n    secretAccessKey: '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',\n    region: 'us-west-2'\n  });\n  const params = {\n    Bucket: bucketName,\n    Delimiter: '/',\n    Prefix: prefix,\n    StartAfter: prefix\n  };\n\n  function listAllKeys() {\n    s3.listObjectsV2(params, (err, data) => {\n      if (err) {\n        console.log(err, err.stack);\n      } else {\n        var contents = data.Contents;\n        contents.forEach(function (content) {\n          allKeys.push(content.Key);\n        });\n\n        if (data.IsTruncated) {\n          params.ContinuationToken = data.NextContinuationToken;\n          console.log(\"There are more keys coming up\");\n          listAllKeys();\n        }\n      }\n    });\n    console.log(allKeys);\n  }\n\n  listAllKeys(); // allKeys.map(key => s3.getSignedUrl('getObject', {Bucket:bucketName,Key:key}, function (err, url) {\n  //     return url;\n  // });\n\n  var urlparams = {\n    Bucket: 'max-client-logos',\n    Key: allKeys[0]\n  };\n  s3.getSignedUrl('getObject', urlparams, function (err, url) {\n    console.log('Your generated pre-signed URL is', url);\n  }); //   let url = allKeys.map((key) => (s3.getSignedUrl('getObject', {\n  //     Bucket:\"max-client-logos\",\n  //     Key:key\n  //   }, function(err, url) {\n  //     console.log('Your generated pre-signed URL is', url);\n  //   }\n  // )));\n\n  console.log(allKeys);\n  return allKeys;\n};\n\nexport default downloadS3;","map":{"version":3,"sources":["/Users/kaiweiwu/Documents/page_designer/page-designer/src/s3config.js"],"names":["AWS","require","allKeys","downloadS3","prefix","bucketName","s3","S3","config","update","accessKeyId","secretAccessKey","region","params","Bucket","Delimiter","Prefix","StartAfter","listAllKeys","listObjectsV2","err","data","console","log","stack","contents","Contents","forEach","content","push","Key","IsTruncated","ContinuationToken","NextContinuationToken","urlparams","getSignedUrl","url"],"mappings":"AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,SAAD,CAAjB;;AACA,IAAIC,OAAO,GAAG,EAAd;;AACA,MAAMC,UAAU,GAAG,CAACC,MAAD,EAASC,UAAT,KAAwB;AACzC,QAAMC,EAAE,GAAG,IAAIN,GAAG,CAACO,EAAR,EAAX;AACAD,EAAAA,EAAE,CAACE,MAAH,CAAUC,MAAV,CAAiB;AACfC,IAAAA,WAAW,EAAC,sBADG;AAEfC,IAAAA,eAAe,EAAC,0CAFD;AAGfC,IAAAA,MAAM,EAAC;AAHQ,GAAjB;AAMA,QAAMC,MAAM,GAAG;AACbC,IAAAA,MAAM,EAAET,UADK;AAEbU,IAAAA,SAAS,EAAE,GAFE;AAGbC,IAAAA,MAAM,EAAEZ,MAHK;AAIba,IAAAA,UAAU,EAAEb;AAJC,GAAf;;AAMA,WAASc,WAAT,GAAsB;AACpBZ,IAAAA,EAAE,CAACa,aAAH,CAAiBN,MAAjB,EAAyB,CAACO,GAAD,EAAMC,IAAN,KAAe;AACtC,UAAID,GAAJ,EAAS;AACPE,QAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ,EAAgBA,GAAG,CAACI,KAApB;AACD,OAFD,MAGI;AACF,YAAIC,QAAQ,GAAGJ,IAAI,CAACK,QAApB;AACAD,QAAAA,QAAQ,CAACE,OAAT,CAAiB,UAAUC,OAAV,EAAmB;AAChC1B,UAAAA,OAAO,CAAC2B,IAAR,CAAaD,OAAO,CAACE,GAArB;AACH,SAFD;;AAIA,YAAIT,IAAI,CAACU,WAAT,EAAsB;AAClBlB,UAAAA,MAAM,CAACmB,iBAAP,GAA2BX,IAAI,CAACY,qBAAhC;AACAX,UAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AACAL,UAAAA,WAAW;AACd;AACF;AACF,KAhBD;AAiBAI,IAAAA,OAAO,CAACC,GAAR,CAAYrB,OAAZ;AACD;;AACDgB,EAAAA,WAAW,GAlC8B,CAoCzC;AACA;AACA;;AAEA,MAAIgB,SAAS,GAAG;AAACpB,IAAAA,MAAM,EAAE,kBAAT;AAA6BgB,IAAAA,GAAG,EAAE5B,OAAO,CAAC,CAAD;AAAzC,GAAhB;AACAI,EAAAA,EAAE,CAAC6B,YAAH,CAAgB,WAAhB,EAA6BD,SAA7B,EAAwC,UAAUd,GAAV,EAAegB,GAAf,EAAoB;AAC1Dd,IAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ,EAAgDa,GAAhD;AACH,GAFC,EAzCyC,CA4C3C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEEd,EAAAA,OAAO,CAACC,GAAR,CAAYrB,OAAZ;AAEA,SAAOA,OAAP;AACD,CAvDD;;AAyDA,eAAeC,UAAf","sourcesContent":["var AWS = require('aws-sdk');\nvar allKeys = [];\nconst downloadS3 = (prefix, bucketName) => {\n  const s3 = new AWS.S3();\n  s3.config.update({\n    accessKeyId:'AKIAXKCRRSD3GJHJE65C',\n    secretAccessKey:'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',\n    region:'us-west-2'\n  });\n\n  const params = {\n    Bucket: bucketName,\n    Delimiter: '/',\n    Prefix: prefix,\n    StartAfter: prefix\n  };\n  function listAllKeys(){\n    s3.listObjectsV2(params, (err, data) => {\n      if (err) {\n        console.log(err,err.stack);\n      }\n      else{\n        var contents = data.Contents;\n        contents.forEach(function (content) {\n            allKeys.push(content.Key);\n        });\n\n        if (data.IsTruncated) {\n            params.ContinuationToken = data.NextContinuationToken;\n            console.log(\"There are more keys coming up\");\n            listAllKeys();\n        }\n      }\n    })\n    console.log(allKeys);\n  }\n  listAllKeys();\n\n  // allKeys.map(key => s3.getSignedUrl('getObject', {Bucket:bucketName,Key:key}, function (err, url) {\n  //     return url;\n  // });\n\n  var urlparams = {Bucket: 'max-client-logos', Key: allKeys[0]};\n  s3.getSignedUrl('getObject', urlparams, function (err, url) {\n    console.log('Your generated pre-signed URL is', url);\n});\n//   let url = allKeys.map((key) => (s3.getSignedUrl('getObject', {\n//     Bucket:\"max-client-logos\",\n//     Key:key\n//   }, function(err, url) {\n//     console.log('Your generated pre-signed URL is', url);\n//   }\n// )));\n\n  console.log(allKeys);\n\n  return allKeys;\n}\n\nexport default downloadS3;\n"]},"metadata":{},"sourceType":"module"}