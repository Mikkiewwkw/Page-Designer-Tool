{"ast":null,"code":"var _jsxFileName = \"/Users/kaiweiwu/Documents/page_designer/page-designer/src/test.js\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\"; // import sign_s3 from \"logoUpload\";\n\nvar aws = require(\"aws-sdk\");\n\nrequire(\"dotenv\").config(); // Configure dotenv to load in the .env file\n// Configure aws with your accessKeyId and your secretAccessKey\n\n\nconst express = require(\"express\");\n\nconst app = express();\n\nconst AWS = require(\"aws-sdk\");\n\nconst fs = require(\"fs\");\n\nconst fileType = require(\"file-type\");\n\nconst bluebird = require(\"bluebird\");\n\nconst multiparty = require(\"multiparty\"); // configure the keys for accessing AWS\n\n\nAWS.config.update({\n  accessKeyId: process.env.AWS_ACCESS_KEY_ID,\n  secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY\n}); // configure AWS to work with promises\n\nAWS.config.setPromisesDependency(bluebird); // create S3 instance\n// abstracts function to upload a file returning a promise\n\nconst uploadFile = (buffer, name, type) => {\n  const params = {\n    ACL: \"public-read\",\n    Body: buffer,\n    Bucket: process.env.S3_BUCKET,\n    ContentType: type.mime,\n    Key: \"\".concat(name, \".\").concat(type.ext)\n  };\n  return s3.upload(params).promise();\n}; // Define POST route\n\n\napp.post(\"/194\", (request, response) => {\n  const form = new multiparty.Form();\n  form.parse(request, async (error, fields, files) => {\n    if (error) throw new Error(error);\n\n    try {\n      const path = files.file[0].path;\n      const buffer = fs.readFileSync(path);\n      const type = fileType(buffer);\n      const timestamp = Date.now().toString();\n      const fileName = \"bucketFolder/\".concat(timestamp, \"-lg\");\n      const data = await uploadFile(buffer, fileName, type);\n      return response.status(200).send(data);\n    } catch (error) {\n      return response.status(400).send(error);\n    }\n  });\n});\napp.listen(process.env.PORT || 9000);\nconsole.log(\"Server up and running...\"); //\n// const sign_s3 = (bucketName, req, res) => {\n//     const s3 = new aws.S3(); // Create a new instance of S3\n//     const fileName = req.body.fileName;\n//     const fileType = req.body.fileType;\n//     // Set up the payload of what we are sending to the S3 api\n//     const s3Params = {\n//         Bucket: bucketName,\n//         Key: fileName,\n//         Expires: 500,\n//         ContentType: fileType\n//     };\n//     // Make a request to the S3 API to get a signed URL which we can use to upload our file\n//     s3.getSignedUrl(\"putObject\", s3Params, (err, data) => {\n//         if (err) {\n//             console.log(err);\n//             res.json({ success: false, error: err });\n//         }\n//         // Data payload of what we are sending back, the url of the signedRequest and a URL where we can access the content after its saved.\n//         const returnData = {\n//             signedRequest: data,\n//             url: `https://${bucketName}.s3.amazonaws.com/${fileName}`\n//         };\n//         // Send it all back\n//         res.json({ success: true, data: { returnData } });\n//     });\n// };\n\nclass SketchExample extends Component {\n  constructor() {\n    super();\n\n    this.submitFile = event => {\n      event.preventDefault();\n      const formData = new FormData();\n      formData.append(\"file\", this.state.file[0]);\n      axios.post(\"/test-upload\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      }).then(response => {// handle your response;\n      }).catch(error => {// handle your error\n      });\n    };\n\n    this.handleFileUpload = event => {\n      this.setState({\n        file: event.target.files\n      });\n    };\n\n    this.state = {\n      file: null\n    };\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      onSubmit: this.submitFile,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      label: \"upload file\",\n      type: \"file\",\n      onChange: this.handleFileUpload,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, \"Send\"));\n  }\n\n}\n\nexport default SketchExample;","map":{"version":3,"sources":["/Users/kaiweiwu/Documents/page_designer/page-designer/src/test.js"],"names":["React","Component","axios","aws","require","config","express","app","AWS","fs","fileType","bluebird","multiparty","update","accessKeyId","process","env","AWS_ACCESS_KEY_ID","secretAccessKey","AWS_SECRET_ACCESS_KEY","setPromisesDependency","uploadFile","buffer","name","type","params","ACL","Body","Bucket","S3_BUCKET","ContentType","mime","Key","ext","s3","upload","promise","post","request","response","form","Form","parse","error","fields","files","Error","path","file","readFileSync","timestamp","Date","now","toString","fileName","data","status","send","listen","PORT","console","log","SketchExample","constructor","submitFile","event","preventDefault","formData","FormData","append","state","headers","then","catch","handleFileUpload","setState","target","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\n// import sign_s3 from \"logoUpload\";\nvar aws = require(\"aws-sdk\");\nrequire(\"dotenv\").config(); // Configure dotenv to load in the .env file\n// Configure aws with your accessKeyId and your secretAccessKey\n\nconst express = require(\"express\");\nconst app = express();\nconst AWS = require(\"aws-sdk\");\nconst fs = require(\"fs\");\nconst fileType = require(\"file-type\");\nconst bluebird = require(\"bluebird\");\nconst multiparty = require(\"multiparty\");\n\n// configure the keys for accessing AWS\nAWS.config.update({\n    accessKeyId: process.env.AWS_ACCESS_KEY_ID,\n    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY\n});\n\n// configure AWS to work with promises\nAWS.config.setPromisesDependency(bluebird);\n\n// create S3 instance\n\n// abstracts function to upload a file returning a promise\nconst uploadFile = (buffer, name, type) => {\n    const params = {\n        ACL: \"public-read\",\n        Body: buffer,\n        Bucket: process.env.S3_BUCKET,\n        ContentType: type.mime,\n        Key: `${name}.${type.ext}`\n    };\n    return s3.upload(params).promise();\n};\n\n// Define POST route\napp.post(\"/194\", (request, response) => {\n    const form = new multiparty.Form();\n    form.parse(request, async (error, fields, files) => {\n        if (error) throw new Error(error);\n        try {\n            const path = files.file[0].path;\n            const buffer = fs.readFileSync(path);\n            const type = fileType(buffer);\n            const timestamp = Date.now().toString();\n            const fileName = `bucketFolder/${timestamp}-lg`;\n            const data = await uploadFile(buffer, fileName, type);\n            return response.status(200).send(data);\n        } catch (error) {\n            return response.status(400).send(error);\n        }\n    });\n});\n\napp.listen(process.env.PORT || 9000);\nconsole.log(\"Server up and running...\");\n//\n// const sign_s3 = (bucketName, req, res) => {\n//     const s3 = new aws.S3(); // Create a new instance of S3\n//     const fileName = req.body.fileName;\n//     const fileType = req.body.fileType;\n//     // Set up the payload of what we are sending to the S3 api\n//     const s3Params = {\n//         Bucket: bucketName,\n//         Key: fileName,\n//         Expires: 500,\n//         ContentType: fileType\n//     };\n//     // Make a request to the S3 API to get a signed URL which we can use to upload our file\n//     s3.getSignedUrl(\"putObject\", s3Params, (err, data) => {\n//         if (err) {\n//             console.log(err);\n//             res.json({ success: false, error: err });\n//         }\n//         // Data payload of what we are sending back, the url of the signedRequest and a URL where we can access the content after its saved.\n//         const returnData = {\n//             signedRequest: data,\n//             url: `https://${bucketName}.s3.amazonaws.com/${fileName}`\n//         };\n//         // Send it all back\n//         res.json({ success: true, data: { returnData } });\n//     });\n// };\n\nclass SketchExample extends Component {\n    constructor() {\n        super();\n        this.state = {\n            file: null\n        };\n    }\n\n    submitFile = event => {\n        event.preventDefault();\n        const formData = new FormData();\n        formData.append(\"file\", this.state.file[0]);\n        axios\n            .post(`/test-upload`, formData, {\n                headers: {\n                    \"Content-Type\": \"multipart/form-data\"\n                }\n            })\n            .then(response => {\n                // handle your response;\n            })\n            .catch(error => {\n                // handle your error\n            });\n    };\n\n    handleFileUpload = event => {\n        this.setState({ file: event.target.files });\n    };\n\n    render() {\n        return (\n            <form onSubmit={this.submitFile}>\n                <input\n                    label=\"upload file\"\n                    type=\"file\"\n                    onChange={this.handleFileUpload}\n                />\n                <button type=\"submit\">Send</button>\n            </form>\n        );\n    }\n}\n\nexport default SketchExample;\n"]},"metadata":{},"sourceType":"module"}