{"ast":null,"code":"import _objectSpread from \"/Users/kaiweiwu/Documents/page_designer/page-designer/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/kaiweiwu/Documents/page_designer/page-designer/src/frequency.js\";\nimport React from \"react\";\nimport uniqueId from 'lodash/uniqueId';\n\nclass Checkbox extends React.Component {\n  render() {\n    const _this$props = this.props,\n          isChecked = _this$props.isChecked,\n          onCheckboxChange = _this$props.onCheckboxChange,\n          name = _this$props.name,\n          value = _this$props.value;\n    return React.createElement(\"label\", {\n      key: uniqueId(),\n      className: \"checkbox-inline\",\n      htmlFor: \"frequency-selection\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 9\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      value: value,\n      checked: isChecked,\n      onChange: onCheckboxChange,\n      onBlur: onCheckboxChange,\n      type: \"checkbox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10\n      },\n      __self: this\n    }), name);\n  }\n\n}\n\nclass Frequency_options extends React.Component {\n  constructor(props) {\n    super(props);\n    const minCount = this.props.minCount;\n    this.state = {\n      frequencyOptions: [{\n        name: \"Weekly\",\n        isChecked: false\n      }, {\n        name: \"Monthly\",\n        isChecked: false\n      }, {\n        name: \"Twice Montly\",\n        isChecked: false\n      }, {\n        name: \"Every Other Week\",\n        isChecked: false\n      }],\n      frequencyOptionsChecked: [],\n      totalFrequencyOptionsChecked: 0,\n      errorMessage: \"Must have at least \".concat(minCount, \" checkboxe selected.\")\n    };\n    this.addFrequencyOptions = this.addFrequencyOptions.bind(this);\n  }\n\n  addFrequencyOptions(event) {\n    const minCount = this.props.minCount;\n    let totalFrequencyOptionsChecked = this.state.totalFrequencyOptionsChecked;\n    const isChecked = event.target.checked;\n    const value = event.target.value;\n\n    if (event.type === 'change') {\n      if (event.currentTarget.checked) {\n        totalFrequencyOptionsChecked += 1;\n      } else {\n        totalFrequencyOptionsChecked -= 1;\n      }\n    }\n\n    this.setState(prevState => ({\n      frequencyOptions: prevState.frequencyOptions.map(option => option.name === value ? _objectSpread({}, option, {\n        isChecked: isChecked\n      }) : option)\n    }));\n\n    if (isChecked) {\n      this.setState(prevState => ({\n        frequencyOptionsChecked: [...prevState.frequencyOptionsChecked, value]\n      }));\n    } else {\n      const newfrequencyOptionsChecked = this.state.frequencyOptionsChecked.filter(option => option !== value);\n      this.setState({\n        frequencyOptionsChecked: newfrequencyOptionsChecked\n      });\n    } //Error in selectoin count\n\n\n    if (totalFrequencyOptionsChecked < minCount) {\n      // Is below min\n      this.setState({\n        errorMessage: \"Must have at least \".concat(minCount, \" checkboxe selected.\"),\n        totalFrequencyOptionsChecked: totalFrequencyOptionsChecked\n      });\n    } else {\n      // Valid\n      this.setState({\n        errorMessage: \"\",\n        totalFrequencyOptionsChecked: totalFrequencyOptionsChecked\n      });\n    }\n  }\n\n  render() {\n    const errorMessage = this.state.errorMessage; // let errorMessage = this.state.errorMessage !== \"\" ? <p>{errorMessage}</p> : null;\n    // if(!this.props.isRecurringChecked){\n    //   return null;\n    // }\n\n    return React.createElement(\"div\", {\n      className: \"frequency-option\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"Frequency Options\"), React.createElement(\"div\", {\n      className: \"multi-selection-frequency-option\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(\"section\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, errorMessage), this.state.frequencyOptions.map(option => React.createElement(Checkbox, {\n      key: uniqueId(),\n      value: option.name,\n      isChecked: option.isChecked,\n      onCheckboxChange: this.addFrequencyOptions,\n      name: option.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nclass Frequency extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.addFrequency = option => {\n      const isChecked = option.target.checked;\n      const value = option.target.value;\n      this.setState(prevState => ({\n        frequencyList: prevState.frequencyList.map(option => option.name === value ? _objectSpread({}, option, {\n          isChecked: isChecked\n        }) : option)\n      }));\n\n      if (isChecked) {\n        this.setState(prevState => ({\n          frequencyChecked: [...prevState.frequencyChecked, value]\n        }));\n      } else {\n        const newfrequencyChecked = this.state.frequencyChecked.filter(option => option !== value);\n        this.setState({\n          frequencyChecked: newfrequencyChecked\n        });\n      }\n    };\n\n    this.renderOptions = () => {\n      renderOptions = React.createElement(Frequency_options, {\n        minCount: 1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      });\n    };\n\n    let renderOptions = null;\n    this.state = {\n      frequencyList: [{\n        name: \"One-time\",\n        isChecked: false\n      }, {\n        name: \"Recurring\",\n        isChecked: false\n      }],\n      frequencyChecked: []\n    };\n  }\n\n  render() {\n    const onetime = this.state.frequencyList[0];\n    const recurring = this.state.frequencyList[1];\n    return React.createElement(\"div\", {\n      className: \"frequency\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"Frequency\"), React.createElement(\"span\", {\n      className: \"help-block\",\n      id: \"helpBlock\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, \"Choose which frequency option are available to the user\"), React.createElement(\"div\", {\n      className: \"multi-selection-frequency\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      key: uniqueId(),\n      className: \"checkbox-inline\",\n      htmlFor: \"frequency-selection\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"checkbox\",\n      value: onetime.name,\n      checked: onetime.isChecked,\n      onChange: this.addFrequency,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }), onetime.name), React.createElement(\"label\", {\n      key: uniqueId(),\n      className: \"checkbox-inline\",\n      htmlFor: \"frequency-selection\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"checkbox\",\n      value: recurring.name,\n      checked: recurring.isChecked,\n      onChange: this.addFrequency,\n      onClick: this.renderOptions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }), recurring.name), renderOptions)); // let renderOptions = recurring.isChecked ? <Frequency_options minCount={1} /> : null;\n    // if(recurring.isChecked){\n    //   return (\n    //     <div className=\"frequency\">\n    //       <h4>Frequency</h4>\n    //       <span className=\"help-block\" id=\"helpBlock\">Choose which frequency option are available to the user</span>\n    //       <div className=\"multi-selection-frequency\">\n    //         <label key={uniqueId()} className=\"checkbox-inline\" htmlFor=\"frequency-selection\">\n    //           <input type=\"checkbox\" value={onetime.name} checked={onetime.isChecked} onChange={this.addFrequency} />{onetime.name}\n    //         </label>\n    //         <label key={uniqueId()} className=\"checkbox-inline\" htmlFor=\"frequency-selection\">\n    //           <input type=\"checkbox\" value={recurring.name} checked={recurring.isChecked} onChange={this.addFrequency} onClick={this.renderOptions}/>{recurring.name}\n    //         </label>\n    //         <Frequency_options minCount={1} />\n    //       </div>\n    //     </div>\n    //   );\n    // }\n    // else{\n    //   return (\n    //     <div className=\"frequency\">\n    //       <h4>Frequency</h4>\n    //       <span className=\"help-block\" id=\"helpBlock\">Choose which frequency option are available to the user</span>\n    //       <div className=\"multi-selection-frequency\">\n    //         <label key={uniqueId()} className=\"checkbox-inline\" htmlFor=\"frequency-selection\">\n    //           <input type=\"checkbox\" value={onetime.name} checked={onetime.isChecked} onChange={this.addFrequency} />{onetime.name}\n    //         </label>\n    //         <label key={uniqueId()} className=\"checkbox-inline\" htmlFor=\"frequency-selection\">\n    //           <input type=\"checkbox\" value={recurring.name} checked={recurring.isChecked} onChange={this.addFrequency} onClick={this.renderOptions}/>{recurring.name}\n    //         </label>\n    //       </div>\n    //     </div>\n    //   );\n    // }\n    // const frequency_list = this.state.frequencyList.map((frequency) => (\n    //   if (frequency.name === \"Recurring\") {\n    //     <label key={uniqueId()} className=\"checkbox-inline\" htmlFor=\"fund-selection\">\n    //       <input type=\"checkbox\" value={frequency.name} checked={frequency.checked} onClick={this.renderOptions} onChange={this.addFrequency} />{frequency.name}\n    //     </label>\n    //   }\n    //   else{\n    //     <label key={uniqueId()} className=\"checkbox-inline\" htmlFor=\"fund-selection\">\n    //       <input type=\"checkbox\" value={frequency.name} checked={frequency.checked} onChange={this.addFrequency} />{frequency.name}\n    //     </label>\n    //   }\n    // ));\n  }\n\n}\n\nexport default Frequency;","map":{"version":3,"sources":["/Users/kaiweiwu/Documents/page_designer/page-designer/src/frequency.js"],"names":["React","uniqueId","Checkbox","Component","render","props","isChecked","onCheckboxChange","name","value","Frequency_options","constructor","minCount","state","frequencyOptions","frequencyOptionsChecked","totalFrequencyOptionsChecked","errorMessage","addFrequencyOptions","bind","event","target","checked","type","currentTarget","setState","prevState","map","option","newfrequencyOptionsChecked","filter","Frequency","addFrequency","frequencyList","frequencyChecked","newfrequencyChecked","renderOptions","onetime","recurring"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport uniqueId from 'lodash/uniqueId';\n\nclass Checkbox extends React.Component {\n  render() {\n    const { isChecked, onCheckboxChange, name, value } = this.props;\n\n    return (\n      <label key={uniqueId()} className=\"checkbox-inline\" htmlFor=\"frequency-selection\">\n        <input\n          value={value}\n          checked={isChecked}\n          onChange={onCheckboxChange}\n          onBlur={onCheckboxChange}\n          type='checkbox'\n        />{name}\n      </label>\n    );\n  }\n}\n\nclass Frequency_options extends React.Component{\n  constructor(props){\n    super(props);\n    const {minCount} = this.props;\n    this.state = {\n      frequencyOptions : [{name:\"Weekly\", isChecked: false}, {name:\"Monthly\",isChecked:false}, {name:\"Twice Montly\", isChecked: false}, {name:\"Every Other Week\",isChecked:false}],\n      frequencyOptionsChecked : [],\n      totalFrequencyOptionsChecked : 0,\n      errorMessage : `Must have at least ${minCount} checkboxe selected.`\n    }\n    this.addFrequencyOptions = this.addFrequencyOptions.bind(this);\n  }\n\n  addFrequencyOptions(event) {\n    const {minCount} = this.props;\n    let {totalFrequencyOptionsChecked} = this.state;\n    const isChecked = event.target.checked;\n    const value = event.target.value;\n\n    if (event.type === 'change') {\n      if (event.currentTarget.checked) {\n        totalFrequencyOptionsChecked += 1;\n      } else {\n        totalFrequencyOptionsChecked  -= 1;\n      }\n    }\n\n    this.setState(prevState => ({ frequencyOptions: prevState.frequencyOptions.map(option => option.name === value ? { ...option, isChecked: isChecked } : option) }));\n\n    if(isChecked){\n      this.setState(prevState => ({frequencyOptionsChecked: [...prevState.frequencyOptionsChecked, value] }));\n    }\n    else {\n      const newfrequencyOptionsChecked = this.state.frequencyOptionsChecked.filter(option => option !== value)\n      this.setState({ frequencyOptionsChecked: newfrequencyOptionsChecked });\n    }\n\n    //Error in selectoin count\n    if (totalFrequencyOptionsChecked < minCount){\n      // Is below min\n      this.setState({\n        errorMessage: `Must have at least ${minCount} checkboxe selected.`,\n        totalFrequencyOptionsChecked:totalFrequencyOptionsChecked\n      });\n    }\n    else {\n    // Valid\n      this.setState({\n        errorMessage: \"\",\n        totalFrequencyOptionsChecked:totalFrequencyOptionsChecked\n      });\n    }\n  }\n  render() {\n    const { errorMessage } = this.state;\n    // let errorMessage = this.state.errorMessage !== \"\" ? <p>{errorMessage}</p> : null;\n\n    // if(!this.props.isRecurringChecked){\n    //   return null;\n    // }\n\n    return (\n      <div className=\"frequency-option\">\n        <h4>Frequency Options</h4>\n        <div className=\"multi-selection-frequency-option\">\n          <section>\n            <p>{errorMessage}</p>\n            {this.state.frequencyOptions.map((option) => (\n              <Checkbox\n                key={uniqueId()}\n                value={option.name}\n                isChecked={option.isChecked}\n                onCheckboxChange={this.addFrequencyOptions}\n                name={option.name}\n              />\n            ))}\n          </section>\n        </div>\n      </div>\n    )\n  }\n}\n\nclass Frequency extends React.Component {\n  constructor(props){\n    super(props);\n    let renderOptions = null;\n    this.state = {\n      frequencyList : [{name:\"One-time\", isChecked: false}, {name:\"Recurring\",isChecked:false}],\n      frequencyChecked : []\n    }\n  }\n\n    addFrequency = (option) => {\n      const isChecked = option.target.checked;\n      const value = option.target.value;\n\n      this.setState(prevState => ({ frequencyList: prevState.frequencyList.map(option => option.name === value ? { ...option, isChecked: isChecked } : option) }));\n\n      if (isChecked){\n          this.setState(prevState => ({frequencyChecked: [...prevState.frequencyChecked, value] }));\n      }\n      else {\n          const newfrequencyChecked = this.state.frequencyChecked.filter(option => option !== value);\n          this.setState({ frequencyChecked: newfrequencyChecked });\n      }\n    }\n\n    renderOptions = () => {\n      renderOptions = <Frequency_options minCount={1} />;\n    }\n\n\n\n    render(){\n      const onetime = this.state.frequencyList[0];\n      const recurring = this.state.frequencyList[1];\n\n      return(\n        <div className=\"frequency\">\n          <h4>Frequency</h4>\n          <span className=\"help-block\" id=\"helpBlock\">Choose which frequency option are available to the user</span>\n          <div className=\"multi-selection-frequency\">\n            <label key={uniqueId()} className=\"checkbox-inline\" htmlFor=\"frequency-selection\">\n              <input type=\"checkbox\" value={onetime.name} checked={onetime.isChecked} onChange={this.addFrequency} />{onetime.name}\n            </label>\n            <label key={uniqueId()} className=\"checkbox-inline\" htmlFor=\"frequency-selection\">\n              <input type=\"checkbox\" value={recurring.name} checked={recurring.isChecked} onChange={this.addFrequency} onClick={this.renderOptions}/>{recurring.name}\n            </label>\n            {renderOptions}\n          </div>\n        </div>\n      )\n\n      // let renderOptions = recurring.isChecked ? <Frequency_options minCount={1} /> : null;\n      // if(recurring.isChecked){\n      //   return (\n      //     <div className=\"frequency\">\n      //       <h4>Frequency</h4>\n      //       <span className=\"help-block\" id=\"helpBlock\">Choose which frequency option are available to the user</span>\n      //       <div className=\"multi-selection-frequency\">\n      //         <label key={uniqueId()} className=\"checkbox-inline\" htmlFor=\"frequency-selection\">\n      //           <input type=\"checkbox\" value={onetime.name} checked={onetime.isChecked} onChange={this.addFrequency} />{onetime.name}\n      //         </label>\n      //         <label key={uniqueId()} className=\"checkbox-inline\" htmlFor=\"frequency-selection\">\n      //           <input type=\"checkbox\" value={recurring.name} checked={recurring.isChecked} onChange={this.addFrequency} onClick={this.renderOptions}/>{recurring.name}\n      //         </label>\n      //         <Frequency_options minCount={1} />\n      //       </div>\n      //     </div>\n      //   );\n      // }\n      // else{\n      //   return (\n      //     <div className=\"frequency\">\n      //       <h4>Frequency</h4>\n      //       <span className=\"help-block\" id=\"helpBlock\">Choose which frequency option are available to the user</span>\n      //       <div className=\"multi-selection-frequency\">\n      //         <label key={uniqueId()} className=\"checkbox-inline\" htmlFor=\"frequency-selection\">\n      //           <input type=\"checkbox\" value={onetime.name} checked={onetime.isChecked} onChange={this.addFrequency} />{onetime.name}\n      //         </label>\n      //         <label key={uniqueId()} className=\"checkbox-inline\" htmlFor=\"frequency-selection\">\n      //           <input type=\"checkbox\" value={recurring.name} checked={recurring.isChecked} onChange={this.addFrequency} onClick={this.renderOptions}/>{recurring.name}\n      //         </label>\n      //       </div>\n      //     </div>\n      //   );\n      // }\n\n      // const frequency_list = this.state.frequencyList.map((frequency) => (\n      //   if (frequency.name === \"Recurring\") {\n      //     <label key={uniqueId()} className=\"checkbox-inline\" htmlFor=\"fund-selection\">\n      //       <input type=\"checkbox\" value={frequency.name} checked={frequency.checked} onClick={this.renderOptions} onChange={this.addFrequency} />{frequency.name}\n      //     </label>\n      //   }\n      //   else{\n      //     <label key={uniqueId()} className=\"checkbox-inline\" htmlFor=\"fund-selection\">\n      //       <input type=\"checkbox\" value={frequency.name} checked={frequency.checked} onChange={this.addFrequency} />{frequency.name}\n      //     </label>\n      //   }\n      // ));\n\n    }\n}\n\nexport default Frequency;\n"]},"metadata":{},"sourceType":"module"}